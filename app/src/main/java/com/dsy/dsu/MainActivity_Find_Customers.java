package com.dsy.dsu;// TODO: 08.09.2021  ------------------------import android.app.Activity;import android.app.ProgressDialog;import android.content.ContentValues;import android.content.Context;import android.content.Intent;import android.content.pm.ActivityInfo;import android.content.res.Configuration;import android.database.Cursor;import android.database.sqlite.SQLiteCursor;import android.graphics.drawable.Drawable;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.os.VibrationEffect;import android.os.Vibrator;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.ListView;import android.widget.ScrollView;import android.widget.SimpleCursorAdapter;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.Nullable;import androidx.annotation.UiThread;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.loader.content.AsyncTaskLoader;import com.google.android.material.dialog.MaterialAlertDialogBuilder;import com.google.android.material.snackbar.Snackbar;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Collections;import java.util.Date;import java.util.GregorianCalendar;import java.util.LinkedHashMap;import java.util.LinkedList;import java.util.List;import java.util.Locale;import java.util.Map;import java.util.TimeZone;import java.util.concurrent.TimeUnit;public class MainActivity_Find_Customers extends AppCompatActivity {    Configuration config;    protected ScrollView  ГлавныйКонтейнерДляПосикаТабелей; ////главный linelayuout    protected   View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦиклаДляПоиска;Activity activity;    ///////TODO    CREATE_DATABASE   Create_Database_СсылкаНАБазовыйКласс;    List<String> АрайЛИстФИОВсеДляПосика=  Collections.synchronizedList(new LinkedList<String>());    Map<Long, String> ХэшФИОВсеДляПосика;  Long  МетодГенерацииUUIDУжеСуществующегоСотрудника=0l;    ArrayAdapter<String> АдаптерДляСпинераДата;    protected ProgressDialog progressDialog;    String finalПоискФИОЧерезLIKE;    Integer  ИндексСтрокКомпонентовТабеля=0;    protected  Button     КнопкаОтправкиСотрудникаДляТабеля;    protected  EditText   ЗначениеПоискаФИОИзменяетПользоатель ;    ///todo пришли данные    String ДепартаментТабеляФинал;    String UUIDТабеляФинал;    String МесяцТабеляФинал;    String ГодВырезалиИзБуфераТабель;    String ПолноеНазваниеЗагруженногТАбеля;    //    String МЕсяцДляКурсораТабелей;    //TODO месяц и год для куросара    String ГодДляКурсораТабелей;    //    Integer       ЦифровоеИмяНовгоТабеля;    int МЕсяцПриВставкеНовогоСотрудника ;    int ГодПриВставкеНовогоСотрудника;    ListView ЛистСДаннымиФИО;    long  РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабельОбновление = 0;    long  РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабель=0;    protected Button КнопкаНазад;    /////    Cursor Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля=null;     Context КонтекстДляАктивтиПосикаСотрудников;    ScrollView ГлавныйКойтейнерПоискаФИОСотрудника;    String ПоученыйУжеСущетсвующийЭлектронноеИмяТабеля;    ///    Long  РодительскийUUDТаблицыТабель=0l;    @Override    protected void onCreate(Bundle savedInstanceState) {        try{            super.onCreate(savedInstanceState);            КонтекстДляАктивтиПосикаСотрудников=this;            //////            getSupportActionBar().hide(); ///скрывать тул бар            ///TODO попытка открыть экран как full screan            //TODO  ОЧИЩАЕМ ПАМТЬ            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);            ////            //  getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION  );            ХэшФИОВсеДляПосика=     Collections.synchronizedMap(new LinkedHashMap<Long, String>());            /////            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            /////  activity=this;            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON                    | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);            ////todo запрещает поворот экрана///////TODO               Create_Database_СсылкаНАБазовыйКласс=new CREATE_DATABASE(getApplicationContext());            setContentView(R.layout.activity_main__find_customer);            //МетодУдалениеAsyncTaskИзПамяти();            /////            Log.d(this.getClass().getName(), "   ");            // Locale locale = Locale.ROOT;            Locale locale = new Locale("rus");            Locale.setDefault(locale);            config =                    getBaseContext().getResources().getConfiguration();            config.setLocale(locale);            createConfigurationContext(config);            ///TODO разное            Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа");            ///TODO главный контйренр табеля только поиск            ГлавныйКонтейнерДляПосикаТабелей = (ScrollView ) findViewById(R.id.ГлавныйКойтейнерПоискаФИОСотрудника);            ///todo кнопака добалание уже суюествюещнго сотрдника в ТАБЕЛЬ            КнопкаОтправкиСотрудникаДляТабеля = (Button) findViewById(R.id.КнопкаОтправкиСотрудникаДляТабеля);            //кнопкаВыборСотрудникаДляТабеля.setVisibility(View.GONE);            ////todo текс который изменяеть ФИО            ЗначениеПоискаФИОИзменяетПользоатель = (EditText) findViewById(R.id.editTextДляПосикаСотрудникаСоздаваемогоТабеля);            //TODO ЛИСТ С КОНКРЕТНЫМИ ДАННЫМИ ФИО            ЛистСДаннымиФИО = (ListView) findViewById(R.id.ЛистДляПосикаПоТабелюРодительская);            ГлавныйКойтейнерПоискаФИОСотрудника  = (ScrollView) findViewById(R.id. ГлавныйКойтейнерПоискаФИОСотрудника);            //TODO СЛУЧШАТЕЛЬ            ЗначениеПоискаФИОИзменяетПользоатель.addTextChangedListener(СлушательПолученияДанных);            //todo кнопка назад            КнопкаНазад= findViewById(R.id.imagimageViewСтрелкаНазадПодборСотрудник);            ЛистСДаннымиФИО.setBackgroundResource(R.drawable.textlines_tabel_row_color_green_mini);            // ГлавныйКойтейнерПоискаФИОСотрудника .setBackgroundResource(R.drawable.textlines_tabel_row_color_green_mini);///TODO остановка служюы подгруски словаря fio            ////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());           // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onDestroy() {        super.onDestroy();        //////TODO  данный код срабатывает когда произошда ошивка в базе    }    @Override    protected void onStop() {        super.onStop();        try {          /////  МетодЗапускаЛокальнойСинхронизации();            ///////        } catch (Exception e) {            //  Block of code to handle errors            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onStart() {        super.onStart();        try{            ///////////// //TODO пришли два значения месяц и год после успешного создание ТАБЕЛЯ            МетодПолучениеДАнныхЧерезИнтрентДляПосикаСотрудника();/////////////////            ///todo созадние кода для возврата на предыдущее актвити            МетодПриНАжатииНаКнопкуBACK();            МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск(null);///TODO клик            МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным();            ////////            //////            ////todo метод обработки кнопки котрая и отправляеть подобраных сотрудников для ТАБЕЛЯ  в другую активити            МетодРаботуКнопкиКотораяОтправляетПодобранныхСотрудников();            ////////TODO ЗАВЕРШЕНИЯ ПОТОКА        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());           // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод возврата к предыдущему активти    private void МетодПриНАжатииНаКнопкуBACK() {        КнопкаНазад.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Log.d(this.getClass().getName(), " кликнем для созданни новго сотрдника при нажатии  ");                Vibrator v2 = (Vibrator) getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE);// Vibrate for 500 milliseconds                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {                    v2.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE));                } else {                    //deprecated in API 26                    v2.vibrate(200);                }                ///todo код которыц возврящет предыдущий актвитики кнопка back                МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти();            }        });    }    private void МетодПолучениеДАнныхЧерезИнтрентДляПосикаСотрудника() {        try{            Intent Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля = getIntent();            ////////todo  ПРИШЛИ САМИ сами данные            ДепартаментТабеляФинал= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля .getStringExtra("ДепартаментТабеляФинал");            UUIDТабеляФинал= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля .getStringExtra("UUIDТабеляФинал");            МесяцТабеляФинал= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля .getStringExtra("МесяцТабеляФинал");            ГодВырезалиИзБуфераТабель= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля .getStringExtra("ГодВырезалиИзБуфераТабель");            ПолноеНазваниеЗагруженногТАбеля= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля .getStringExtra("ДепартаментТабеляВКоторомИНадоСоздатьНовогоСотрудника");///TODO МЕСЯЦ И ГОД В ВИДЕ ЦИФР            МЕсяцДляКурсораТабелей= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля .getStringExtra("МЕсяцДляКурсораТабелей");            ГодДляКурсораТабелей= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля .getStringExtra("ГодДляКурсораТабелей");            ///TODO цифровоеимя табеля            ЦифровоеИмяНовгоТабеля = Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля.getIntExtra("ЦифровоеИмяНовгоТабеля",0);            Log.d(this.getClass().getName(), "ЦифровоеИмяНовгоТабеля  " +ЦифровоеИмяНовгоТабеля);            String  РодительскийUUDТаблицыТабельТекст= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля.getStringExtra("UUIDТабеляФинал");            ////            if (РодительскийUUDТаблицыТабельТекст!=null) {                ///////                if (РодительскийUUDТаблицыТабельТекст.length()>0) {                    //////                    РодительскийUUDТаблицыТабель=Long.parseLong(РодительскийUUDТаблицыТабельТекст.trim());                }            }            Log.d(this.getClass().getName(), "РодительскийUUDТаблицыТабель  " +РодительскийUUDТаблицыТабель+ " РодительскийUUDТаблицыТабельТекст " +РодительскийUUDТаблицыТабельТекст);            if (РодительскийUUDТаблицыТабель==0) {                // TODO: 15.11.2021                РодительскийUUDТаблицыТабель     = Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля.getLongExtra("UUIDТабеляФинал",0);                Log.d(this.getClass().getName(), "РодительскийUUDТаблицыТабель  " +РодительскийUUDТаблицыТабель+ " РодительскийUUDТаблицыТабельТекст " +РодительскийUUDТаблицыТабельТекст);            }            if (РодительскийUUDТаблицыТабель==0) {                // TODO: 15.11.2021                РодительскийUUDТаблицыТабель     = Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля.getLongExtra("РодительскийUUDТаблицыТабель",0);                Log.d(this.getClass().getName(), "РодительскийUUDТаблицыТабель  " +РодительскийUUDТаблицыТабель+ " РодительскийUUDТаблицыТабельТекст " +РодительскийUUDТаблицыТабельТекст);            }            Log.d(  this.getClass().getName(), " ПолноеНазваниеЗагруженногТАбеля" +ПолноеНазваниеЗагруженногТАбеля                    + "  UUIDТабеляФинал " +UUIDТабеляФинал  + " МесяцТабеляФинал " +МесяцТабеляФинал+ " МЕсяцДляКурсораТабелей " +МЕсяцДляКурсораТабелей + " ГодДляКурсораТабелей " +ГодДляКурсораТабелей+                     " РодительскийUUDТаблицыТабель " +РодительскийUUDТаблицыТабель);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }/////TODO МЕТОД ПОИСКА И ЗАГРУЩКИ ВСЕХ ПОЛЬЗОВАТЕЛЬ ГОТОВЫ И ПОИК ИХ ЧЕРЕЗ LIKE    protected void МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск(String ПоискФИОЧерезLIKE)            throws InterruptedException {        //todo перед созданием нового уьиваем из папмятт  Class_GRUD_SQL_Operations class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск;        try {            finalПоискФИОЧерезLIKE = ПоискФИОЧерезLIKE;            //////TODO ПРИ ПЕРВОМ ЗАПУСКЕ КОГДА Ы НИЧЕГО НЕ ВЫБРАЛИ И ПЕРВЙ ЗАПУС ПОСЫЛВАЕТ ЧТОВ СТРОКИ            if (finalПоискФИОЧерезLIKE == null) {                ///                //////todo если пустой то без like                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE);                ////                //////todo выбор только like                ////TODO ПОЛУЧАЕМ ВСЕ ДАННЫЕ ПО ТАБЛИЦУ ФИО ДЛЯ ПОСИКА                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());                ///                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","fio");                ///////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","name,_id,uuid,BirthDate,snils");                //            /*        class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","uuid=?    AND status_send !=? AND month_tabels=? AND  year_tabels =? AND fio IS NOT NULL ");                    ///"_id > ?   AND _id< ?"                    //////                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",finalПолученныйUUID);                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/                ////TODO другие поля                ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);                ////                //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","name ASC");                ////                /// class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");                ////                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля=null;                ///                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков                        ,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                Log.d(this.getClass().getName(), "GetData "+Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля  );/*                // TODO: 07.09.2021  _old                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля = new MODEL_synchronized(getApplicationContext()).                        КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,_id,uuid,BirthDate,snils"},                                null, null, null, null, "name ASC", null);///"SELECT name  FROM MODIFITATION_Client WHERE name=?",НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"                // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n                Log.d(this.getClass().getName(), " UBLIC_CONTENT.  АрайЛИстФИОВсеДляПосикаПослеПосика.size()  " + PUBLIC_CONTENT.АрайЛИстФИОВсеДляПосикаПослеПосика.size() +                        " Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля .getCount() " + Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getCount());*/                /////TODO если справочник был уже загружен то мы его не заполянм а с него и загружемся                ////todo проверяем куроср                МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО();                Log.d(this.getClass().getName(), " загрузка справочника ФИО без распарсивания а сразу");                //todo КУРСОР ЧЕРЕЗ ПОИСК LIKE  ПОСИК ЧЕРЕЗ LIKE  КОГДА ПОЛЬЗОВАТЕЛЬ ВЫБРАН ЧТО ТО КОНТЕРТНО            } else if (finalПоискФИОЧерезLIKE.length() > 0) {                /*try {                    ////TODO засыпаем  ПРИ ПОСИКЕ СОТРУДУНИКА                    TimeUnit.MILLISECONDS.sleep(0);                } catch (InterruptedException e) {                    e.printStackTrace();                }*/                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE);///todo like                final String ВПотокеfinalПоискФИОЧерезLIKE = finalПоискФИОЧерезLIKE;                //////todo выбор только like                //// like                ////TODO ПОЛУЧАЕМ ВСЕ ДАННЫЕ ПО ТАБЛИЦУ ФИО ДЛЯ ПОСИКА                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());                ///                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","fio");                ///////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","name,_id,uuid,BirthDate,snils");                //                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","name LIKE ? ");                    ///"_id > ?   AND _id< ?"                    //////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",ВПотокеfinalПоискФИОЧерезLIKE + "%");                    ///       /*         class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/                ////TODO другие поля                ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);                ////                //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update DESC");                ////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","500");                ////                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля = null;                ///                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                Log.d(this.getClass().getName(), "GetData "+Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля  );                // TODO: 07.09.2021  _old/*                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля = new MODEL_synchronized(getApplicationContext()).                        КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,_id,uuid,BirthDate,snils"},                                "name LIKE ?", new String[]{ВПотокеfinalПоискФИОЧерезLIKE + "%"}, null, null, "date_update DESC", "500");///"SELECT name  FROM MODIFITATION_Client WHERE name=?",                // НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"                // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n*/                               /* Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля = new MODEL_synchronized(getApplicationContext()).                                        КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,id,uuid,BirthDate,snils"},                                                "name LIKE ?", new String[]{"%" + finalПоискФИОЧерезLIKE + "%"}, null, null, "date_update DESC", "100");///"SELECT name  FROM MODIFITATION_Client WHERE name=?",                                // НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"*/                // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n                ////todo проверяем куроср                МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО();                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE);                ////TODO ЕСЛИ ПОЛСЛЕ ВЫБОРКИ ИДЕМ НАЗАД И У НАС ""            } else {                //////todo если пустой то без like                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE);                ////                //////todo выбор только like                ////TODO ПОЛУЧАЕМ ВСЕ ДАННЫЕ ПО ТАБЛИЦУ ФИО ДЛЯ ПОСИКА                ////TODO ПОЛУЧАЕМ ВСЕ ДАННЫЕ ПО ТАБЛИЦУ ФИО ДЛЯ ПОСИКА                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());                ///                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","fio");                ///////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","name,_id,uuid,BirthDate,snils");                //            /*        class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","uuid=?    AND status_send !=? AND month_tabels=? AND  year_tabels =? AND fio IS NOT NULL ");                    ///"_id > ?   AND _id< ?"                    //////                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",finalПолученныйUUID);                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/                ////TODO другие поля                ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);                ////                //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update DESC");                ////                /// class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");                ////                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля = null;                ///                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                Log.d(this.getClass().getName(), "GetData "+Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля  );                                // TODO: 07.09.2021  _old/*                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля = new MODEL_synchronized(getApplicationContext()).                        КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,_id,uuid,BirthDate,snils"},                                null, null, null, null, "date_update DESC", null);///"SELECT name  FROM MODIFITATION_Client WHERE name=?",НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"                ///////*/                // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n                Log.d(this.getClass().getName(),  " + Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getCount()  "+Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля .getCount() );                /////TODO если справочник был уже загружен то мы его не заполянм а с него и загружемся                ////todo проверяем куроср                МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО();            }            //поймать ошибку всего классаIOException | MyException e    NumberFormatException        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());           // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод заполнения активтии из таблицы фио//todo метод не ПОСТРЕДТСВЕНО АПОЛЯНЕТ LISTVIEW ДАНЫМИ    private void МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО() {        try{            ЛистСДаннымиФИО.setClickable(true);            ///todo перед заполенеем данных удалем возможные комнопенты на активити            try{                ГлавныйКонтейнерДляПосикаТабелей.removeAllViews();            } catch (Exception e) {                //   e.printStackTrace(); /*           ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());*/            }            ////TODO перерд обработки б=бнуляем            ///  ХэшФИОВсеДляПосика.clear();//TODO потОКИ            //////*                                         ////todo циклы заполения                                         ////todo начинаем цикл                                         do {                                             //   Log.d(this.getClass().getName(), "    " +  .getHoldCount());                                             ////TODO ДДАНЫЕ ИЗ БАЗЫ САМИ ФИО                                             String ПолученыеФИО = Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getString(0);                                             Log.d(this.getClass().getName(), " ПолученыеФИО " + ПолученыеФИО);                                             String ПолученныеID = Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getString(1);                                             long ПолученныйUUID = Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getLong(2);                                             String ПолученыеДатаРождения = Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getString(3);                                             String ПолученыеСНИЛС = Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getString(4);                                             ///TODO ЗАПОЛЕНИЕЯ АРАЙЛИСТА И хЭШМЭПА                                             МетодЗаполенияАрайЛистаИХэшМэпаДляПосикаПоФИО(ПолученыеФИО, ПолученныеID, ПолученныйUUID, ПолученыеДатаРождения, ПолученыеСНИЛС);                                             ///TODO ЧТО ПРИ КЛИКЕ ПОНИМАТЬ КАКАУЮ ЯЧЕЙКУ МЫ КЛИКНУЛИ МЫЗАПИСЫВАЕМ UUID ФИО В КОМПОНЕТ setTag                                             Log.d(this.getClass().getName(), " ИндексСтрокКомпонентовТабеля " + ИндексСтрокКомпонентовТабеля +                                                     " ЛистСДаннымиФИО.getTag() " + ЛистСДаннымиФИО.getTag() +                                                     "  ЛистСДаннымиФИО.getId()) " + ЛистСДаннымиФИО.getId() +                                                     " ПолученыеФИО " + ПолученыеФИО + " ПолученныеID " + ПолученныеID + " ПолученныйUUID "                                                     + ПолученныйUUID + " ПолученыеДатаРождения " + ПолученыеДатаРождения + " ПолученыеСНИЛС " + ПолученыеСНИЛС);                                             //METHOD WHICH WILL HANDLE DYNAMIC INSERTION                                             //////TODO заврешаем уикл загрузки данных на ктивити табель                                             ////todo увеличитваем элемент                                             ИндексСтрокКомпонентовТабеля++;                                             ///todo разбларируем поток                                             ////////                                         } while (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.moveToNext());*/            /////            МетодФинальнойВставкиДАнныхДляПосикаСотрудников();            //     ЛистДляВсеСотурдникаТекущегоТабеля.setBackgroundResource(R.drawable.textlines_tabeltwo);            //////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());           // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ////todo ФИНАЛЬНЫЙ МЕТОД    private void МетодФинальнойВставкиДАнныхДляПосикаСотрудников() {        ////        ИндексСтрокКомпонентовТабеля=0;        ////////        Log.d(this.getClass().getName()," ИндексСтрокКомпонентовТабеля "+ИндексСтрокКомпонентовТабеля);/////////TODO ЗАПОЛЕНИЕ        ////TODO SET УСТАНОВКА ДАНЫХ В АДАПТЕР        try {            ////TODO ПОСЛЕ ТОГО КАК ЗАПОЛНИЛИ АРАЙЛИСТ ПРИСВАИВАЕМ ВСЕ КОМПОНЕЕТЫ В LINEARLOUT  /*          SimpleCursorAdapter userAdapter = new AsyncTaskLoader<SimpleCursorAdapter>(getApplicationContext()) {                @Nullable                @Override                public SimpleCursorAdapter loadInBackground() {                    SimpleCursorAdapter userAdapterвнутри = null;                    // создаем адаптер, передаем в него курсор                    userAdapterвнутри = new SimpleCursorAdapter(getApplicationContext(), R.layout.list_item,                            Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля, new String[]{"name"}, new int[]{android.R.id.text1}, 0);                    ////TODO настройка внешнего вида                    SimpleCursorAdapter finalUserAdapterвнутри = userAdapterвнутри;                    userAdapterвнутри.setViewBinder(new SimpleCursorAdapter.ViewBinder() {                        @Override                        public boolean setViewValue(View view, Cursor cursor, int columnIndex) {                            int ИндексИмя = cursor.getColumnIndex("name");                            if (ИндексИмя == columnIndex) {                                TextView tvColor = (TextView) view;                                ///                                String data = cursor.getString(0);                                tvColor.setText(data);                                ///                                if (tvColor.length() == 25) {                                    tvColor.setTextColor(Color.MAGENTA);                                } else if (tvColor.length() == 28) {                                    tvColor.setTextColor(Color.GREEN);                                }                                return true;                            } else {                                Log.e(this.getClass().getName(), "view.getId() " + view.getId());                            }                            return false;                        }                    });                    return userAdapterвнутри;                }            }.loadInBackground();*/            //    ЛистСДаннымиФИО.setAdapter(userAdapter);            //  ЛистСДаннымиФИО.setAdapter(АдаптерДляСпинераДата);            //sqlite data helper class to receive all the data            // create the adapter using the cursor pointing to the desired data            // as well as the layout information            SimpleCursorAdapter dataAdapter = new AsyncTaskLoader<SimpleCursorAdapter>(getApplicationContext()) {                @Nullable                @Override                public SimpleCursorAdapter loadInBackground() {                    SimpleCursorAdapter   dataAdapterВнутри = new SimpleCursorAdapter(getApplicationContext(),R.layout.list_item,                            Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля, new String[]{"name"}, new int[]{android.R.id.text1}, 0);                    SimpleCursorAdapter.ViewBinder binding = new SimpleCursorAdapter.ViewBinder() {                        @Override                        public boolean setViewValue(View view, Cursor cursor, int columnIndex) {                            int ИндексФИО = cursor.getColumnIndex("name");                            ////                            int ИндексДеньРождения = cursor.getColumnIndex("BirthDate");                            ////                            Drawable icon = null;                            //                            StringBuffer БуферФИОиДатыРождения=new StringBuffer();                            if (ИндексФИО == columnIndex) {                                icon = getResources().getDrawable(R.mipmap.icon_dsu1_tabels_for_find_item);                                icon.setBounds(0, 1, 60, 60);                                ((TextView) view).   setPadding(10,10,10,10);                                ((TextView) view).setCompoundDrawables(icon, null, null, null);                                /*   TextView tvColor = (TextView) view;                                 */                                ///                                String ФИОДляПОиска = cursor.getString(ИндексФИО);                                String ДатаРОжденияДляПОиска = cursor.getString(ИндексДеньРождения);                                //                                if(ДатаРОжденияДляПОиска==null){                                    ДатаРОжденияДляПОиска="нет";                                }////                                БуферФИОиДатыРождения.append("    ").append(ФИОДляПОиска).append("\n").                                        append("   ").append("(").append(ДатаРОжденияДляПОиска).append(")").append(" г.");                                Log.d(this.getClass().getName(), " БуферФИОиДатыРождения.toString()" + БуферФИОиДатыРождения.toString());//////TODO заполняем simple двнными                                ((TextView) view).setText(БуферФИОиДатыРождения.toString());                                ///                       /* if (tvColor.length() == 25) {                            tvColor.setTextColor(Color.MAGENTA);                        } else if (tvColor.length() == 28) {                            tvColor.setTextColor(Color.GREEN);                        }*/                                return true;                            } else {                                Log.e(this.getClass().getName(), "view.getId() " + view.getId());                            }                            return false;                        }                    };                    dataAdapterВнутри.setViewBinder(binding);                    /////                    return dataAdapterВнутри;                }            }.loadInBackground();            ЛистСДаннымиФИО.setAdapter(dataAdapter);            //TODO ЗАПОЛЕНЕИЯ АДАПТЕРА            // АдаптерДляСпинераДата = new ArrayAdapter<String>(getApplicationContext(), R.layout.list_item,  АрайЛИстФИОВсеДляПосика);//ХэшФИОВсеДляПосика // АрайЛИстФИОВсеДляПосика // simple_list_item_checked //simple_list_item_multiple_choice            /////////            try {                ГлавныйКонтейнерДляПосикаТабелей.removeAllViews();            } catch (Exception e) {                //   e.printStackTrace();            }            ////            ЛистСДаннымиФИО.setBackgroundResource(R.drawable.textlines_tabeltwo);            ///TODO КОПИРУЕМ в пабик            ЛистСДаннымиФИО.invalidate();            ЛистСДаннымиФИО.deferNotifyDataSetChanged();            ГлавныйКонтейнерДляПосикаТабелей.invalidate();            try {                ГлавныйКонтейнерДляПосикаТабелей.addView(ЛистСДаннымиФИО);            } catch (Exception e) {                // e.printStackTrace();            }            ЛистСДаннымиФИО.deferNotifyDataSetChanged();            //////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());           // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///////////    private void МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным() {        ЛистСДаннымиФИО.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {//TODO ПРИНУДИТЕЛЬНО ЗАПОЛНЯЕМ SETTAG                if (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getCount()>0){                    Log.d(this.getClass().getName(), "  Курсор_СамиФИОДляПоиска.getCount()" + Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getCount());                    Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.moveToFirst();                    while (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.move(position)){                        long UUIDПолучаемДляОправкиВФИОпослеПосика=Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.getLong(2);                        ((TextView) parent.getChildAt(0)).setTag(UUIDПолучаемДляОправкиВФИОпослеПосика);//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ             /* TextView textView=  (TextView) parent.getChildAt((int) id);                textView.setTextSize(25);*/                        Log.d(this.getClass().getName()," UUIDПолучаемДляОправкиВФИОпослеПосика " +UUIDПолучаемДляОправкиВФИОпослеПосика);                        break;                    }//todo ЗАПОЛЯЕМ UUID И ИМЯ ФИО                    TextView textView = (TextView) view;                    long UUIDgetTagДляПосикаПолученныйИзListView= (long) ((TextView) parent.getChildAt(0)).getTag();//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ                    String СамоЗначениеФИОДляПосикаПолученныйИзListView = textView.getText().toString(); // получаем текст нажатого элемента                    //Toast.makeText(getApplicationContext(), " Вы выбрали ФИО : " + СамоЗначениеФИОДляПосикаПолученныйИзListView   , Toast.LENGTH_LONG).show();                    //  Toast.makeText(getApplicationContext(), " Вы выбрали : " + String.valueOf(UUIDgetTagДляПосикаПолученныйИзListView ) , Toast.LENGTH_LONG).show();                    //TODO ПОЛУЧЕНЫЕ ЗНАЧЕНИЯ UUID  И ФИО ЗАПОЛЯНЕМ В ХЭШМЭП                    if (UUIDgetTagДляПосикаПолученныйИзListView>0 && СамоЗначениеФИОДляПосикаПолученныйИзListView!=null  ){                        ///    /////todo заполение хэша сотрудниками котрые мы  ПОДОБРАЛИ    ХэшФИОВсеДляПосика.put(UUIDgetTagДляПосикаПолученныйИзListView, СамоЗначениеФИОДляПосикаПолученныйИзListView);    Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеДляПосика.size() + "  ХэшФИОВсеДляПосика.toString() " + ХэшФИОВсеДляПосика.toString());    ////// todo оформление                        КнопкаОтправкиСотрудникаДляТабеля.setVisibility(View.VISIBLE);                        //todo после вставки обнуляем переменные                        UUIDgetTagДляПосикаПолученныйИзListView=0;                        СамоЗначениеФИОДляПосикаПолученныйИзListView=null;                    }else{                        Log.e(this.getClass().getName(), " UUID отрицательный сотрудника "+UUIDgetTagДляПосикаПолученныйИзListView);                    }                }}        });        //////todo    }    ////todo метод отправки полученых сотрудников на другую активти    private void МетодРаботуКнопкиКотораяОтправляетПодобранныхСотрудников() {        try{            КнопкаОтправкиСотрудникаДляТабеля.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Vibrator v2 = (Vibrator) getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE);// Vibrate for 500 milliseconds                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {                        v2.vibrate(VibrationEffect.createOneShot(200, VibrationEffect.DEFAULT_AMPLITUDE));                    } else {                        //deprecated in API 26                        v2.vibrate(150);                    }                    Log.d(this.getClass().getName(), " кликнем для созданни новго сотрдника при нажатии  ");                    ///////TODO перед созданием определяем не пустые ли значения                    if (ХэшФИОВсеДляПосика.size()>0) {             /*       if (PUBLIC_CONTENT.Отладка==true) {                            СообщениеКотороеСпрашиваетТочноЛиНужноСоздатьНовогоСотрудника("Выбор/поиск сотрудника", "Отправить в табель выбраных " +                                    "(сотрудник/ов) ? : " +"\n" + " " +ХэшФИОВсеДляПосика.values()+"\n"+ " кол: " +ХэшФИОВсеДляПосика.size(), true);                        *////todo ВСТАВКИ ВЫБРАНОГО СОТРУЖИНКА КОТОРРЫЙ УЖЕ ЕСТЬ В  БАЗЕ                            МетодЗапускаВставкиВыбраногоСотрудникаВГотовыйТабель();                    } else {                        Toast aa = Toast.makeText(getApplicationContext(), "OPEN",Toast.LENGTH_SHORT);                        ImageView cc = new ImageView(getApplicationContext());                        cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_error);//icon_dsu1_synchronisazia_dsu1_success                        aa.setView(cc);                        aa.show();                        Toast.makeText(getApplicationContext(), "Вы не выбрали не одного сотрудника (выберите и повторите попытку).", Toast.LENGTH_SHORT).show();                    }                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());           // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///todo сообщение на активти ПОДБОР СОТРУДНИКА КОТОРЫЙ УЖЕ ЕСТЬ В БАЗЕ И ОТПРАВИТЬ ЕГО НА ДРУГТУЮ АКТИВНОСТЬ ПО ЗАПОДЕНИЮ В ТАБЕЛЬ    @UiThread    protected void СообщениеКотороеСпрашиваетТочноЛиНужноСоздатьНовогоСотрудника(String ШабкаДиалога, final String СообщениеДиалога, boolean статус) {        ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ        try {//////сам вид            final AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)                    .setTitle(ШабкаДиалога)                    .setMessage(СообщениеДиалога)                    .setPositiveButton("Да", null)                    .setNeutralButton("Ещё", null)                    .setNegativeButton("Очистить", null)                    .setIcon(R.drawable.icon_dsu1_new_customer7 )// //icon_dsu1_new_customer_success                    .show();/////////кнопка            final Button MessageBoxОтправкаУжеСуществещегоСотрудника = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);            MessageBoxОтправкаУжеСуществещегоСотрудника .setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                    Log.d(this.getClass().getName(), " ХэшФИОВсеДляПосика.size()" + ХэшФИОВсеДляПосика.size() + " ХэшФИОВсеДляПосика.toString() " +ХэшФИОВсеДляПосика.toString());///todo ВСТАВКИ ВЫБРАНОГО СОТРУЖИНКА КОТОРРЫЙ УЖЕ ЕСТЬ В  БАЗЕ                    МетодЗапускаВставкиВыбраногоСотрудникаВГотовыйТабель();                }            });/////////кнопка            final Button MessageBoxUpdateЗАкрытьСозданиеТабеля = alertDialog.getButton(AlertDialog.BUTTON_NEUTRAL);            MessageBoxUpdateЗАкрытьСозданиеТабеля.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();///запуск метода обновления через DIALOGBOX                }            });/////////кнопка            final Button MessageBoxUpdateОчиститьСозданиеТабеля = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);            MessageBoxUpdateОчиститьСозданиеТабеля.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                    ///TODO ПОСЛЕ ОТПРАВКИ ОДНУЛЯЕМ ПЕРЕДВАЕМЫЙ хэш                    ХэшФИОВсеДляПосика.clear();                    //  ХэшФИОВсеДляПосика=null;                    ///TODO ошибка                    ///todo/////////TODO ЗАПОЛЕНИЕ                    ////TODO SET УСТАНОВКА ДАНЫХ В АДАПТЕР                    try {                        МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск(null);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }///запуск метода обновления через DIALOGBOX                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ////todo добавления уже действущего сотрдника////todo добавления уже действущего сотрдника    private  void МетодЗапускаВставкиВыбраногоСотрудникаВГотовыйТабель() {        try{            ///TODO засыпаем цикл чтобы он не падал            //  TimeUnit.MILLISECONDS.sleep(100);            ///todo перед вставкой обнуляем            progressDialog= new ProgressDialog(this);            Log.d(this.getClass().getName(), " ХэшФИОВсеДляПосика  "+ХэшФИОВсеДляПосика.values());            ////TODO КОД ПОСЛЕ ПОДБОРА  СУЩЕСТВУЕЩЕГО СОТРУДНИКА И ВСТАКА ЕГО В ДЕЙСТВУЩЕЙ ТАБЕЛЬ            //////todo РАСПРСИВАЕМ ПРИШЕДШИЙ ХЭШМАП С ПОДОБРАНЫМИ СОТРУНИКАМИ  цикл for         // ((ThreadPoolExecutor)AsyncTask.THREAD_POOL_EXECUTOR).setCorePoolSize(1);        //  ((ThreadPoolExecutor)AsyncTask.THREAD_POOL_EXECUTOR).setMaximumPoolSize(1);            int CountRow=ХэшФИОВсеДляПосика.size();            AsyncTask asyncTask = null;            asyncTask =new AsyncTask() {                @Override                protected void onPreExecute() {                    super.onPreExecute();                    //progressDialog.setMessage(Значения[0]);                    if ( ХэшФИОВсеДляПосика.size()>0) {                        progressDialog.setIndeterminate(true);                        progressDialog.setCancelable(false);                        progressDialog.setTitle("Сотрудника/ов в Табель");                        progressDialog.setMessage("Добавление...");                        progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);                        progressDialog.setMax(ХэшФИОВсеДляПосика.size());                        progressDialog.setProgress(0);                        progressDialog.setCanceledOnTouchOutside(false);                        progressDialog.show();                    }                    ЛистСДаннымиФИО.setClickable(false);                    ГлавныйКонтейнерДляПосикаТабелей.setClickable(false);                    ГлавныйКойтейнерПоискаФИОСотрудника.setClickable(false);                }                /////TODO МЕТОД ЗАПИСИ ВЫБРАНОГО СОТРКДГНКАВ В ТАБЕЛЬ                @Override                protected Object doInBackground(Object[] objects) {                    Log.d(this.getClass().getName(), " asyncTask ");                    final long[] РезультатВставкиПоложительныйИлиОтрецательныйИЗСотрудников = {0l};                    final int[] ТекущаяУспешнаяОперацияПоДобаленеиСотрудниковВТАбель = {0};//////todo сохраняем выбранных сотрудников в ТЕКУЩИЙ ТАБЕЛЬ                    for (Map.Entry<Long, String> entry : ХэшФИОВсеДляПосика.entrySet()) {                        ////                        Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.keySet().stream().count() "+ ХэшФИОВсеДляПосика.keySet().stream().count());                        /////TODO СОН                        try {                            ///TODO сама вставка                          TimeUnit.MILLISECONDS.sleep(500);                        final Long[] UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника = new Long[1];                        ////                        final String[] ФИОДляВставки = new String[1];                        UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника[0] =entry.getKey();                            Log.w(getApplicationContext().getClass().getName(),                                    "UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника[0]"                                            +UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника[0]);                     ФИОДляВставки[0] =entry.getValue();                        ////TODO данные для вставки выбраного сотрудника его UUID и ФИО           /////                        ФИОДляВставки[0] = ФИОДляВставки[0].replaceAll("\\n+", "");                        ///  ФИОДляВставки = ФИОДляВставки.replaceAll("\\s+", "");                        int НачалоДатыВФИО= ФИОДляВставки[0].indexOf("(");                        ///                        if(НачалоДатыВФИО>=0){                            ФИОДляВставки[0] = ФИОДляВставки[0].substring(0, НачалоДатыВФИО);                        }                        ФИОДляВставки[0] = ФИОДляВставки[0].trim();                            Log.w(getApplicationContext().getClass().getName(),                                    "ФИОДляВставки[0][0]"                                            +ФИОДляВставки[0]);          // TODO: 24.05.2021 код вставки          Log.d(this.getClass().getName(), " UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника " + UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника[0] +                  " entry.getValue( " + entry.getValue());//TODO  ОЧИЩАЕМ ПАМТЬ          ///TODO ЗАПУСКАЕМ  ПуллПамяти          try{              Log.d(this.getClass().getName(), " UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника[0] " + UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника[0]+ "  РодительскийUUDТаблицыТабель " +РодительскийUUDТаблицыТабель );              ///TODO вставка сотрудников из активти просто много сотрудникв              if (UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника[0] >0   && РодительскийUUDТаблицыТабель>0) {///                  ////                  РезультатВставкиПоложительныйИлиОтрецательныйИЗСотрудников[0] =                          МетодОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоиск(UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника[0], ФИОДляВставки[0]);                  Log.d(this.getClass().getName(), " РезультатВставкиПоложительныйИлиОтрецательныйИЗСотрудников[0]" +                          РезультатВставкиПоложительныйИлиОтрецательныйИЗСотрудников[0]);//TODO  ОЧИЩАЕМ ПАМТЬ                  // TODO: 03.10.2021  нет такой сотркудник уже сть или нет UUID на текущее строчке для сотрудника                          }else {                  /////                  Log.d(this.getClass().getName(), " UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника[0][0]" +                          UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника[0]);              }              // TODO: 03.10.2021  второя событие   вставка ВС,СУББ Понедельник                  if ( РезультатВставкиПоложительныйИлиОтрецательныйИЗСотрудников[0]>0) {                      ///////////////                     /* МетодТретийАвтоматическаяВставкаВыходныхДней(МетодГенерацииUUIDУжеСуществующегоСотрудника,ГодПриВставкеНовогоСотрудника,МЕсяцПриВставкеНовогоСотрудника );*/                      Integer РезультатВставкаВыходныхДНей=       new Class_Generation_Weekend_For_Tabels(getApplicationContext())                              .МетодТретийАвтоматическаяВставкаВыходныхДней(МетодГенерацииUUIDУжеСуществующегоСотрудника,ГодПриВставкеНовогоСотрудника,МЕсяцПриВставкеНовогоСотрудника );                      //                      Log.d(this.getClass().getName(), "   РезультатВставкаВыходныхДНей  "+  РезультатВставкаВыходныхДНей);                  }              if (РезультатВставкиПоложительныйИлиОтрецательныйИЗСотрудников[0] >0) {                  ТекущаяУспешнаяОперацияПоДобаленеиСотрудниковВТАбель[0]++;                  //TODO ЗАПУСКАЕМ ФУТУРЕ                  publishProgress(ТекущаяУспешнаяОперацияПоДобаленеиСотрудниковВТАбель[0]);                  Log.d(this.getClass().getName(), "РезультатВставкиПоложительныйИлиОтрецательныйИЗСотрудников[0]  "+РезультатВставкиПоложительныйИлиОтрецательныйИЗСотрудников[0]);              }else if (РезультатВставкиПоложительныйИлиОтрецательныйИЗСотрудников[0] <= 0) {                  ((Activity) КонтекстДляАктивтиПосикаСотрудников).runOnUiThread(new Runnable() {                      @Override                      public void run() {                          progressDialog.setMessage(" Сотрудник уже есть в табеле !!! " );                                 /*   СообщениеСооьщаетПользовательЧТоСоздалитьНовыеСотрудниккиУспешноИлиНет("Шаблоны","Не был Вставен сотрудник/ки (ошибка)."                                            +"\n"+"Или в текущем Табеле такой сотрудник уже есть.",false);*/                                      /*  Toast aa = Toast.makeText(КонтекстШаблоны, "OPEN",Toast.LENGTH_SHORT);                                        ImageView cc = new ImageView(КонтекстШаблоны);                                        cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_error);//icon_dsu1_synchronisazia_dsu1_success                                        aa.setView(cc);                                        aa.show();*/                      }                  });                  //              }              ///TODO удаляем из хэшмапа внутри цыкла после успешной вставки цикл чтобы он не падал          } catch (Exception e) {              //  Block of code to handle errors              e.printStackTrace();              ///метод запись ошибок в таблицу              Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                      + Thread.currentThread().getStackTrace()[2].getLineNumber());              new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                      Thread.currentThread().getStackTrace()[2].getLineNumber());          }                        ///todo разбларируем поток                    } catch (Exception e) {                            e.printStackTrace();                            ///метод запись ошибок в таблицу                            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                    Thread.currentThread().getStackTrace()[2].getLineNumber());                        }                    }/////TODO END FOR                    return РезультатВставкиПоложительныйИлиОтрецательныйИЗСотрудников[0];                }                @Override                protected void onPostExecute(Object o) {                    super.onPostExecute(o);                    /////                    try{                        long ПолученоеЗначение= (long) o;                    ЛистСДаннымиФИО.setClickable(true);                    ГлавныйКонтейнерДляПосикаТабелей.setClickable(true);                    ГлавныйКойтейнерПоискаФИОСотрудника.setClickable(true);                    progressDialog.setIndeterminate(false);                    progressDialog.setProgress(ХэшФИОВсеДляПосика.size());                    Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа");                    progressDialog.dismiss();                    /////TODO УСПЕШНОЕ  ДОБАВЛЕНИЕ ВЫБРАННЫХ СОТРУДНИКОВ В ТАБЕЛЬ                    if (   ПолученоеЗначение >0){ //;////ПРИ УСПЕШНОЙ ВСТАВКИ ДАННЫХ  ПЕРЕДАЕМ СТАТИЧНОМУ СЁЧИКК  ОБНОВЛЕНИЙ ЧТО НАДО УВЕЛИЧИТ ЗНАЧЕНИЕ НА 1+>0) {                        Log.w(this.getClass().getName(), "успешно ДОБАВЛЕНО СОТУДНИК ЧРЕЗ ПОСИК ДВА "+ПолученоеЗначение );                        Toast aa = Toast.makeText(getApplicationContext(), "OPEN",Toast.LENGTH_SHORT);                        ImageView cc = new ImageView(getApplicationContext());                        //     cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_success);//icon_dsu1_synchronisazia_dsu1_success                        aa.setView(cc);                        aa.show();                /*    if (PUBLIC_CONTENT.Отладка==true) {                            ///TODO сообщаем об успешном создаении данных                            СообщениеСообщаетОСоздаенииНовогоСотрудника("Табель", "Успешное добавление сотрудник/ки ( в Табель :)" + "\n"                                    + " " + ХэшФИОВсеДляПосика.values() + "\n" +                                    " кол : " + ХэшФИОВсеДляПосика.size(), true);*/                            МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти();                        ///TODO после успешной встаки удаляем                        ХэшФИОВсеДляПосика.clear();                        ЛистСДаннымиФИО.invalidate();                        ЛистСДаннымиФИО.deferNotifyDataSetChanged();                        Курсор_ПолучаемВсюТаюлицуФИОДляПосикаТабеля.close();                        ///TODO ДАННЫЙ МЕТОД ЗАПУСКАЕТ СИНХРОНИЗАИЮ В ФОНОВОМ ПОТОКЕ БЕЗ ВИЗУАЛЬНОЙ ЧАСТИ ПОЛЬЗОВАТЛЮ НИЧЕГО НЕ ПОКАЗЫВАЕТ ДвижокОбменаДаннымиОфлайнсОнлайном, когда приложение уходит с перерднего края                        // TODO: 26.03.2021 ДОПОЛНИТЕЛЬНО ОБНУЛЯЕМ ВСЕ ТАБЕЛЯ С NULL В ФИО ЧТО БЫ ОБМЕН НЕ РУГАЛЬСЯ                        ///TODO ДАННЫЙ МЕТОД ЗАПУСКАЕТ СИНХРОНИЗАИЮ В ФОНОВОМ ПОТОКЕ БЕЗ ВИЗУАЛЬНОЙ ЧАСТИ ПОЛЬЗОВАТЛЮ НИЧЕГО НЕ ПОКАЗЫВАЕТ ДвижокОбменаДаннымиОфлайнсОнлайном, когда приложение уходит с перерднего края                        ///////TODO ТУТ ЗАПУСКАЕМ СИНХРОНИЗАЦИЮ В  ФОНЕ КОТОРАЯ НАХОДИТЬСЯ ЗАПУСКАЮЩИЙ МЕТОД В АКТИВИТИ  MainActivity_Tabel_Only_Single_Employee() СОТРУДНИКИ                        ////todo ошибка не встановы новый сотрудник                    }else{                        Log.e(this.getClass().getName(), "Ошибка  новый сотрудник не вставилься" );                        ///TODO сообщаем об успешном создаении данных/*                        Toast aa = Toast.makeText(getApplicationContext(), "OPEN",Toast.LENGTH_SHORT);                        ImageView cc = new ImageView(getApplicationContext());                        cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_error);//icon_dsu1_synchronisazia_dsu1_success                        aa.setView(cc);                        aa.show();*/                        ///////                    /*    СообщениеСообщаетОСоздаенииНовогоСотрудника("Табель", "Не был добавлен сотрудник/ки ошибка."                                +"\n"+"Или данный сотрудник уже есть в текущем Табеле.", false);*////TODO метод запуска формы после вставки                        ///todo ПОСЛЕ ЦИКЛА ОБНУЛЯЕМ ХЭШ                        //МетодаКоторыйПослеУспешнойВставкиЗапускаетТАбельсНовымСотрудниковм();                        МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти();                    }                    ///todo разбларируем поток                } catch (Exception e) {                    e.printStackTrace();                    ///метод запись ошибок в таблицу                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                            + Thread.currentThread().getStackTrace()[2].getLineNumber());                    new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                            Thread.currentThread().getStackTrace()[2].getLineNumber());                }                }                //todo UI                @Override                protected void onProgressUpdate(Object[] values) {                    super.onProgressUpdate(values);                    ////                    try{                    Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа");                     Integer Значения= (Integer) values[0];                        progressDialog.setIndeterminate(false);                        //progressDialog.incrementProgressBy(50);                        //progressDialog.incrementSecondaryProgressBy(75);                    if (Значения>0) {                        progressDialog.setProgress( Значения);                        progressDialog.setMessage("Добавление..."+Значения+" из: ("+ХэшФИОВсеДляПосика.size()+")");                    }                    ///todo разбларируем поток                } catch (Exception e) {                    e.printStackTrace();                    ///метод запись ошибок в таблицу                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                            + Thread.currentThread().getStackTrace()[2].getLineNumber());                    new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                            Thread.currentThread().getStackTrace()[2].getLineNumber());                }                }            }.execute();            ///////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }// TODO: 07.09.2021   метод если существующй сотрудник    protected   Long МетодОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоиск(long UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника,                                                                              String ФИОДляВставки) {        ///////        long РезультатВставкиПодобраногоСотрудниковВТабель = 0l;        Class_GRUD_SQL_Operations class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис =new Class_GRUD_SQL_Operations(getApplicationContext());;        Long РезультатВставкиПодобраногоСотрудниковВТабельВнутри = 0l;        ///        //////////        try {            // ContentValues АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоОбновление = new ContentValues();////контрейнер для нового табеля            ///todo САМА ВСТВКА ТАБЛИЦА ТАЕБЛЬ            ////todo месяц и год нового сотрудника            МЕсяцПриВставкеНовогоСотрудника = МетодПолучениниеМесяцПриСозданииНовогоСОтрудника(МесяцТабеляФинал);            ГодПриВставкеНовогоСотрудника = МетодПолучениниеГОдПриСозданииНовогоСОтрудника(МесяцТабеляФинал);                        //////            ////TODO КУРСОР ПРОВЕЯЕТ ПЕРВЫЙ ЭТО ЗАПУСК ИЛИ НЕТ            ///todo САМА ВСТВКА ТАБЛИЦА ТАЕБЛЬ            ////todo месяц и год нового сотрудника            МЕсяцПриВставкеНовогоСотрудника = МетодПолучениниеМесяцПриСозданииНовогоСОтрудника(МесяцТабеляФинал);            ГодПриВставкеНовогоСотрудника = МетодПолучениниеГОдПриСозданииНовогоСОтрудника(МесяцТабеляФинал);            Log.d(this.getClass().getName(), " МЕсяцПриВставкеНовогоСотрудника  " + МЕсяцПриВставкеНовогоСотрудника                    + "  ГодПриВставкеНовогоСотрудника " + ГодПриВставкеНовогоСотрудника + " UUIDТабеляФинал " + UUIDТабеляФинал);// TODO: 25.10.2021 ВЫЧИСЛЯЕМ ТАКОЙЦ УЖЕ ЕСТЬ СОТРУДНИК ИЛИ НЕТ            // TODO: 25.10.2021  ВЫЧИСЛЯЕМ ЕСЛИ ТАКОЙ УЖЕ СОТРУДНИК В ТАБЛИЦЕ DATA_TBELS            ///            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы", "viewtabel");            ///////            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис                    .concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки", "fio");            //            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика",                    " fio=?   AND uuid_tabel=?  AND status_send!=?    ");            ///"_id > ?   AND _id< ?"            //////            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1", UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника);            ///            // TODO: 22.09.2021  clear operasion            Log.d(this.getClass().getName(), "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель);            //////            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2", РодительскийUUDТаблицыТабель);            //////            //////            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3", "Удаленная");                  /*  class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......                    ////TODO другие поля*/            ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);            ////            //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);            ////            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки", "date_update DESC");            ////            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита", "1");            ////            PUBLIC_CONTENT public_contentМенеджерПотоков = new PUBLIC_CONTENT(getApplicationContext());            // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ            SQLiteCursor Курсор_ИщемПроверяемЕслиТакойСотрудникУжеЕстьВТабеле = null;            Курсор_ИщемПроверяемЕслиТакойСотрудникУжеЕстьВТабеле = (SQLiteCursor) class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.                    new GetData(getApplicationContext()).getdata(class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.                            concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    public_contentМенеджерПотоков.МенеджерПотоков, Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            Log.d(this.getClass().getName(), "GetData " + Курсор_ИщемПроверяемЕслиТакойСотрудникУжеЕстьВТабеле);////todo определяем вставлять на или обновляеть табель агаг , ну нулей  или уже есть записи            if (Курсор_ИщемПроверяемЕслиТакойСотрудникУжеЕстьВТабеле.getCount() ==0) {                // TODO: 25.10.2021                Log.d(this.getClass().getName(), "GetData " + Курсор_ИщемПроверяемЕслиТакойСотрудникУжеЕстьВТабеле);            ///TODO ТАБЛИЦА ТАБЕЛЬ ТОЛЬКО ВВСТАВКА ТАБЕЛЬ            // TODO: 24.03.2021 ЕслиВубличногоНЕтТоНАходим ЕГо            Integer ПубличноеIDПолученныйИзСервлетаДляUUID = 0;            ///                class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис =new Class_GRUD_SQL_Operations(getApplicationContext());;            ///            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы", "SuccessLogin");            ///////            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки", "id");            //            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика", "id IS NOT NULL");            ///"_id > ?   AND _id< ?"            //////            //class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",ЦифровоеИмяНовгоТабеля);            ///   /*         class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/            ////TODO другие поля            ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);            ////            //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);            ////            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки", "date_update DESC");            ////            class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита", "1");            ////            // TODO: 12.10.2021  Ссылка Менеджер Потоков            PUBLIC_CONTENT Class_Engine_SQLГдеНаходитьсяМенеджерПотоков = new PUBLIC_CONTENT(getApplicationContext());            // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ            SQLiteCursor Курсор_ИщемПУбличныйIDКогдаегоНетВстатике = null;            ////TODO вытаскиваем даанные цфо и департамент            Курсор_ИщемПУбличныйIDКогдаегоНетВстатике = (SQLiteCursor) new Class_GRUD_SQL_Operations(getApplicationContext()).                    new GetData(getApplicationContext()).getdata(class_grud_sql_operationsОпределенияВставкиУжеСущетсвующегоСотрудникаЧерезПоис.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков, Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            Log.d(this.getClass().getName(), "GetData " + Курсор_ИщемПУбличныйIDКогдаегоНетВстатике);            // TODO: 07.09.2021    _old   /*             Курсор_ИщемПУбличныйIDКогдаегоНетВстатике =                        new MODEL_synchronized(getApplicationContext()).КурсорУниверсальныйДляБазыДанных("SuccessLogin",                                new String[]{"id"}, " id IS NOT NULL", null, null, null, null, null);//*/            // TODO: 07.09.2021            if (Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.getCount() > 0) {                //////                Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.moveToFirst();                ////                Log.d(this.getClass().getName(), " Курсор_ИщемПУбличныйIDКогдаегоНетВстатике " + Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.getCount());                ПубличноеIDПолученныйИзСервлетаДляUUID = Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.getInt(0);            }            Log.d(this.getClass().getName(), "   ПубличноеIDПолученныйИзСервлетаДляUUID " + ПубличноеIDПолученныйИзСервлетаДляUUID);            ContentValues АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка = new ContentValues();////контрейнер для нового табеля     /*       ///TODO сами данные таблица TABEL вставка            АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка.put("month_tabels", String.valueOf(МЕсяцПриВставкеНовогоСотрудника));            АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка.put("year_tabels", String.valueOf(ГодПриВставкеНовогоСотрудника));*/            ////TODO ДАТА            String СгенерированованныйДатаДляДаннойОперации = new Class_Generation_Data(getApplicationContext()).ГлавнаяДатаИВремяОперацийСБазойДанных();            АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка.put("date_update", СгенерированованныйДатаДляДаннойОперации);            АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка.put("user_update", ПубличноеIDПолученныйИзСервлетаДляUUID);            ///////////            Log.d(this.getClass().getName(), " UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника " + UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника +                    "  ПубличноеIDПолученныйИзСервлетаДляUUID " + ПубличноеIDПолученныйИзСервлетаДляUUID);            // TODO: 13.10.2021            ////            if (UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника > 0) {                ////////////////////////////////////                АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка.put("fio", UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника);            }            МетодГенерацииUUIDУжеСуществующегоСотрудника = 0l;            ////            ////todo создаение UUID            МетодГенерацииUUIDУжеСуществующегоСотрудника = (Long) new Class_Generation_UUID(getApplicationContext()).МетодГенерацииUUID(getApplicationContext());            ///            Log.d(this.getClass().getName(), " МетодГенерацииUUIDУжеСуществующегоСотрудника " + МетодГенерацииUUIDУжеСуществующегоСотрудника);            // TODO: 26.09.2021            АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка.put("uuid", МетодГенерацииUUIDУжеСуществующегоСотрудника);            ///   АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка.put("cfo", ПоученыйУжеСущетсвующийСЦО);            ///            Log.e(this.getClass().getName(), "ПоученыйУжеСущетсвующийЭлектронноеИмяТабеля" + ПоученыйУжеСущетсвующийЭлектронноеИмяТабеля);            АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка.put("status_send", " ");            // TODO: 26.09.2021 uuid родителя            АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка.put("uuid_tabel", РодительскийUUDТаблицыТабель);//UUIDТабеляФинал            Log.e(this.getClass().getName(), "РодительскийUUDТаблицыТабель" + РодительскийUUDТаблицыТабель);// TODO: 08.10.2021 повышаем версию            Class_GRUD_SQL_Operations class_grud_sql_operationsПовышаемВерсиюДанныхПриСозданеииИзШаблонаСотрудника = new Class_GRUD_SQL_Operations(getApplicationContext());            Long РезультатУвеличинаяВерсияПриДОбаленеиНовгоСотрулникаИзПосика = 0L;            РезультатУвеличинаяВерсияПриДОбаленеиНовгоСотрулникаИзПосика =                    class_grud_sql_operationsПовышаемВерсиюДанныхПриСозданеииИзШаблонаСотрудника.new ChangesVesionData(getApplicationContext())                            .МетодПолученияУвеличинойВесрииДанныхДляТекущейВнутренейтаблицы_ПоПолю_current_table_ПоПолю_current_table(                            "data_tabels",                            "localversionandroid_version",                            getApplicationContext(),                            Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            //TODO  конец курант ча            //////            АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка.put("current_table", РезультатУвеличинаяВерсияПриДОбаленеиНовгоСотрулникаИзПосика);                Log.d(this.getClass().getName()," current_table УВЕЛИЧИВАЕМ ВЕРИСЮ ДАННЫХ ВНУТРИ ТАБЛИЦЫ    РезультатУвеличинаяВерсияПриДОбаленеиНовгоСотрулникаИзПосика  " +РезультатУвеличинаяВерсияПриДОбаленеиНовгоСотрулникаИзПосика );            //TODO  конец курант ча            //////            АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка.putNull("_id");            // TODO: 10.10.2021            String ТаблицыОбработкиВставкиВЫбраногосоСОтрудникаВТАюкель = "data_tabels";            ////////            if (ЦифровоеИмяНовгоТабеля > 0 && РодительскийUUDТаблицыТабель > 0) {                /////                /*ReentrantLock reentrantLock=new ReentrantLock();*//*reentrantLock.lock();reentrantLock.newCondition().await(10,TimeUnit.MILLISECONDS);*/                ////////todo подобранный СОТРУДНИК ДЛЯ ТАБЕЛЯ ИЗ АКТИВИТИ ПОСИК СОТРУДНИКА                try {                    РезультатВставкиПодобраногоСотрудниковВТабельВнутри = new MODEL_synchronized(КонтекстДляАктивтиПосикаСотрудников).                            ВставкаДанныхЧерезКонтейнерТолькоПриСозданииНовогоСотрудникаУниверсальная(ТаблицыОбработкиВставкиВЫбраногосоСОтрудникаВТАюкель,                                    АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка, ТаблицыОбработкиВставкиВЫбраногосоСОтрудникаВТАюкель, "");//////TODO когда true -это значет применяеться только не вобмене  и говорит что плюс записываем изменению версии джанных                    ///////                    Log.e(this.getClass().getName(), " РезультатВставкиПодобраногоСотрудниковВТабель[0] " +                            РезультатВставкиПодобраногоСотрудниковВТабельВнутри);                    /////                    if (РезультатВставкиПодобраногоСотрудниковВТабельВнутри > 0) {                        ///////                        Log.w(this.getClass().getName(), " РезультатВставкиПодобраногоСотрудниковВТабель[0] " +                                РезультатВставкиПодобраногоСотрудниковВТабельВнутри);                    }else{                        ///////                        Log.e(this.getClass().getName(), " Ошибка новы сотрудник не вставлься  РезультатВставкиПодобраногоСотрудниковВТабель[0] " +                                РезультатВставкиПодобраногоСотрудниковВТабельВнутри);                    }                    /////                    //АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка.clear();                } catch (Exception e) {                    e.printStackTrace();                    ///метод запись ошибок в таблицу                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                            " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                    new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                }            } else {                //                Log.e(this.getClass().getName(), " ОШИБКА РезультатВставкиПодобраногоСотрудниковВТабель[0] " +                        РезультатВставкиПодобраногоСотрудниковВТабельВнутри);                Toast toast = Toast.makeText(getApplicationContext(), "Для вставки не хватает данных !!!", Toast.LENGTH_LONG);            }            //////////////////////////////////            Log.d(this.getClass().getName(), " Успешное РезультатВставкиПодобраногоСотрудниковВТабель" + РезультатВставкиПодобраногоСотрудниковВТабель);            //////TODO ПОСЛЕ УСПЕШНОЙ ВСТВКИ ВЫБАРНЫХ СОТРУДНИКА МЕНЯЕМ ВЕРСИЮ ДАННЫХ ДАТЫ НА УКАЗАНОЙ ТАБЛИЦЕ            //// ССылкаНаСозданнуюБазу.execSQL(" DELETE FROM tabels WHERE fio= -9223372036854775808; ");       /*     ///TODO проверка встаки из уже выбраный сотрудников            if (РезультатВставкиПодобраногоСотрудниковВТабельВнутри > 0) {                /////TODO ПОСЛЕ УСПЕШНОЙ ВСТАВКИ УВЕЛИЧИВАЕМ СЧЕТЧИК                АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоВставка.clear();                ////                Log.i(this.getClass().getName(), " +РезультатВставкиПодобраногоСотрудниковВТабель " + РезультатВставкиПодобраногоСотрудниковВТабель +                        "  РезультатВставкиПодобраногоСотрудниковВТабельВнутри " + РезультатВставкиПодобраногоСотрудниковВТабельВнутри);               *//* ////TODO ДАТА                String СгенерированованныйДатаДляДаннойОперации=     new Class_Generation_Data(getApplicationContext()).ГлавнаяДатаИВремяОперацийСБазойДанных();                //todo ВО ВРЕМЯ СИНХРОНИЗХАЦИИ В ФОНЕ ИЗМЕНЯЕМ ДАТЫ ТАБЛИЦ ТОЛЬКО ПО ТАБЛИЦАМ КОГДА ИДЕМ                int Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы = new MODEL_synchronized(getApplicationContext()).                        МетодЗаписьЧтоОрацияПрошлаЗаписываемВТбалицуВерсийДанныхТолькоДляЛокальногоОбновленияДанных("tabels", РезультатВставкиПодобраногоСотрудниковВТабель);*//*                Log.d(this.getClass().getName()," current_table УВЕЛИЧИВАЕМ ВЕРИСЮ ДАННЫХ ВНУТРИ ТАБЛИЦЫ    РезультатУвеличинаяВерсияПриДОбаленеиНовгоСотрулникаИзПосика  " +РезультатУвеличинаяВерсияПриДОбаленеиНовгоСотрулникаИзПосика );                Integer Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы =                        new Class_Engine_SQL(getApplicationContext()).МетодПовышаемВерсиюДанныхПроектавТаблицеMODIFITATION_Client(                                РезультатВставкиПодобраногоСотрудниковВТабель,                                ТаблицыОбработкиВставкиВЫбраногосоСОтрудникаВТАюкель,                                "Локальное", РезультатУвеличинаяВерсияПриДОбаленеиНовгоСотрулникаИзПосика,                                Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков);                Log.i(this.getClass().getName(), " +РезультатВставкиПодобраногоСотрудниковВТабель " + РезультатВставкиПодобраногоСотрудниковВТабель +                        "  Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы " + Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы);                if (Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы > 0) {                    //////////////////////////////////                    Log.d(this.getClass().getName(), "Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы  "                            + Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы);                    ///////                }                *//*  TimeUnit.MILLISECONDS.sleep(100);//    TimeUnit.SECONDS.sleep(1);*//*                ////todo после успешной встаки новго сотрудкниа и обнуляем общий с ним и uuid  табеля по которому они оба связанны            } else {                Log.e(this.getClass().getName(), "Ошибка  новый сотрудник не вставилься");                ////todo пока выключено в ASYNTASK СООБЩЕНИ СПЛЫВАЕМ ТУТ ПОКА ЗАКОМЕНТИРОВАНО                *//*Log.e(this.getClass().getName(), "Ошибка  новый сотрудник не вставилься" );                ///TODO сообщаем об успешном создаении данных                СообщениеСообщаетОСоздаенииНовогоСотрудника("Табель", "Не был создан сотрудник/ки", false);*//*            }*/        }else{                // TODO: 01.11.2021                Toast.makeText(getApplicationContext(), "  Ошибка данный сотрудник уже есть в табеле !!!  " , Toast.LENGTH_LONG).show();            }        } catch (Exception e) {            e.fillInStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        //////        return РезультатВставкиПодобраногоСотрудниковВТабельВнутри;    }    /////todo метод заполения аралилта и хэшмема    private void МетодЗаполенияАрайЛистаИХэшМэпаДляПосикаПоФИО(String ПолученыеФИО, String ПолученныеID, long ПолученныйUUID,String ПолученыеДатаРождения,String ПолученыеСНИЛС) {        try{            /////TODO НЕ ПОСТРДВСТВЕНО ЗАПОЛЯНЕМ LISTVIEW  ДАННЫМИ            АрайЛИстФИОВсеДляПосика.add(ПолученыеФИО );            Log.d(this.getClass().getName(), "  АрайЛИстФИОВсеДляПосика.size() " + АрайЛИстФИОВсеДляПосика.size() + " АрайЛИстФИОВсеДляМетокТабеля " +  АрайЛИстФИОВсеДляПосика.toString()+                    "  ПолученныйUUID  " +ПолученныйUUID);            /////todo заполения TAG uuid меток табеля            ЛистСДаннымиФИО.setTag(String.valueOf(ПолученныйUUID));        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());           // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplication()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO КОД СЛУШАТЕЛЬ ПРИ НАЖАТИИ НА ТАБЕЛЬ Создаем экземпляр TextWatcher:    private final TextWatcher СлушательПолученияДанных = new TextWatcher() {        public void beforeTextChanged (CharSequence s,int start, int count, int after){            Log.d(this.getClass().getName(), "  beforeTextChanged  " + s.toString());            String ЗначениевПоискеФИО = s.toString();        }        public void onTextChanged (CharSequence s,int start, int before, int count){            Log.d(this.getClass().getName(), "  onTextChanged  " + s.toString());        }        //Задаем действия для TextView после смены введенных в EditText символов:        public void afterTextChanged (Editable s){            try {                //TODO ДАННЫЙ КОД НЕПОСТРЕДСТВЕННО ЗАРУСКАЕТ ОБНОВЛЕНИЕ ЛОКАЛЬНОЕ С АКТИВТИИ                Log.d(this.getClass().getName(), "  afterTextChanged " + s.toString());                String СамоЗначениеЯчейкиТабеля = s.toString();                Log.d(this.getClass().getName(), "  СамоЗначениеЯчейкиТабеля" + СамоЗначениеЯчейкиТабеля);                Log.d(this.getClass().getName(), "  СамоЗначениеЯчейкиТабеля" + СамоЗначениеЯчейкиТабеля);                ////TODO запускаем метод ЛОКАЛЬНОГО ОБНОВЛЕНИЕ ПОСЛЕ ПОЛУЧЕННЫХ ДАННЫХ                МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковТабеляЧкерезПоиск(СамоЗначениеЯчейкиТабеля); // TODO ПОСИК С LIKE                /////            } catch (Exception e) {                e.printStackTrace();                ///метод запись ошибок в таблицу                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());               // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplication()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            } finally {            }        }    };    // TODO  конец КОД СЛУШАТЕЛЬ ПРИ НАЖАТИИ НА ТАБЕЛЬ Создаем экземпляр TextWatcher:    //TODO метод получени месяа для записи в одну колонку    private int МетодПолучениниеМесяцПриСозданииНовогоСОтрудника(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        int month = 0;        try{            System.out.println(" " + ДатаКоторуюНадоПеревестиИзТекставЦифру + " " + ДатаКоторуюНадоПеревестиИзТекставЦифру);            SimpleDateFormat formatмесяц = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));            // formatмесяц.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));            formatмесяц.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));            Date date = formatмесяц.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру);            GregorianCalendar calendar = (GregorianCalendar) GregorianCalendar.getInstance(new Locale("ru"));            calendar.setTime(date);            /////TODO ОБРАБАТЫВАЕМ ДАННЫЕ ДАТЫ ЯНВАРЬ            if (ДатаКоторуюНадоПеревестиИзТекставЦифру.matches("(.*)Январь(.*)")) {                month = calendar.get(Calendar.MONTH)+1;            } else                month = calendar.get(Calendar.MONTH) + 1;            ///////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());           // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplication()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return month;    }    //TODO метод получени месяа для записи в одну колонку    private int МетодПолучениниеГОдПриСозданииНовогоСОтрудника(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        int year= 0;        try{            System.out.println("ДатаКоторуюНадоПеревестиИзТекставЦифру " + ДатаКоторуюНадоПеревестиИзТекставЦифру);            SimpleDateFormat formatгод = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));            // formatгод.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));            formatгод.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));            Date date = formatгод.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру);            Calendar calendar = Calendar.getInstance(new Locale("ru"));            calendar.setTime(date);            if (ДатаКоторуюНадоПеревестиИзТекставЦифру.matches("(.*)Январь(.*)")) {                year = calendar.get(Calendar.YEAR);            } else                year = calendar.get(Calendar.YEAR);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());           // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplication()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return year;    }    //функция получающая время операции ДАННАЯ ФУНКЦИЯ ВРЕМЯ ПРИМЕНЯЕТЬСЯ ВО ВСЕЙ ПРОГРАММЕ    ///todo сообщение на активти создание новго сотрудника спрашиваем нужно ли создать    ///todo сообщение    @UiThread    protected void СообщениеСообщаетОСоздаенииНовогоСотрудника(String ШабкаДиалога,  String СообщениеДиалога,                                                               boolean статус ) {        ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ        int ФлагЗнака;        if (статус) {            ФлагЗнака = R.drawable.icon_dsu1_new_customer_success;//icon_dsu1_new_customer7        } else {            ФлагЗнака = R.drawable.icon_dsu1_new_customer_error;        }        try {//////сам вид            final AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)                    .setTitle(ШабкаДиалога)                    .setMessage(СообщениеДиалога)                    .setPositiveButton("ОК", null)                    .setIcon(ФлагЗнака)                    .show();/////////кнопка            final Button MessageBoxUpdateСоздатьТабель = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);            MessageBoxUpdateСоздатьТабель.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                    Log.d(this.getClass().getName(), "  ФИНАЛ создание нового сотрудника ");                        //TODO после успешной вставки нового сотрудника  в табель обнуляем переменные///TODO метод запуска формы после вставки                        ///todo ПОСЛЕ ЦИКЛА ОБНУЛЯЕМ ХЭШ                        //МетодаКоторыйПослеУспешнойВставкиЗапускаетТАбельсНовымСотрудниковм();                        МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти();                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());           // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplication()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///todo финалный метод еотровый другому активти посылает данные    private void МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти() {        try{            Intent Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки = new Intent();            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.setClass(getApplication(), MainActivity_List_Employees_Current_Tabel.class); // Т            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ДепартаментТабеляПослеПодбора", ДепартаментТабеляФинал);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляПослеПодбора", UUIDТабеляФинал);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляПослеПодбораУниверсальный", UUIDТабеляФинал);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("МесяцТабеляПослеПодбора", МесяцТабеляФинал);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ПолноеНазваниеЗагруженногТАбеляПослеПодбора",ДепартаментТабеляФинал);            //год и месяц цифр            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("МЕсяцДляКурсораТабелейПослеПодбора", МЕсяцПриВставкеНовогоСотрудника);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ГодДляКурсораТабелейПослеПодбора",ГодПриВставкеНовогоСотрудника);            // TODO: 22.09.2021  clear operasion            Log.d(this.getClass().getName(), "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель);            if (РодительскийUUDТаблицыТабель>0) {                Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("РодительскийUUDТаблицыТабель",РодительскийUUDТаблицыТабель);                Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляКнопкаBACKУниверсальный",РодительскийUUDТаблицыТабель);            }            //todo передает контент при нажатии на кнопку back            if (UUIDТабеляФинал!=null) {                Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляКнопкаBACKУниверсальный",                        UUIDТабеляФинал);            }            if (ПоученыйУжеСущетсвующийЭлектронноеИмяТабеля!=null) {                Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ПоученыйУжеСущетсвующийЭлектронноеИмяТабеля);",                        ПоученыйУжеСущетсвующийЭлектронноеИмяТабеля);            }            ///TODO цифровоеимя табеля            if (ЦифровоеИмяНовгоТабеля!=null) {                Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ЦифровоеИмяНовгоТабеля",                        ЦифровоеИмяНовгоТабеля);            }///TODO цифровоеимя табеля            /*Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("РодительскийUUDТаблицыТабель",                    UUIDТабеляФинал );*/            ///TODO ОПИСАНИЕ ЧТО ПЕРЕДАЕМ            Log.d(  this.getClass().getName(), " ПолноеНазваниеЗагруженногТАбеля" +ПолноеНазваниеЗагруженногТАбеля                    + "  UUIDТабеляФинал " +UUIDТабеляФинал  + " МесяцТабеляФинал " +МесяцТабеляФинал + " ХэшФИОВсеДляПосика " +ХэшФИОВсеДляПосика);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);////todo запускаем активти            startActivity( Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки);            /////////TODO  100% процентов обязательная команда КОРОТАЯ УБИРАЕТ ИЗ ПАМЯТИ ВСЕ ПЕРЕКРЕСТНЫЕ ЗАПРОСЫ ОТ ТЕКУЩЕГО АКТИВТИ  ПОМТОМУ ЧТО В ПУЛЕ ЗАПРОССО ВЧТО ОТСАЕТЬСЯfinish();        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());           // TODO: 01.09.2021 метод вызова            new   Class_Generation_Errors(getApplication()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    protected  View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла;    //TODO адаптер сомостоятельный для GridView    public class СоздаемСвойАдаптерДляГридМюу extends BaseAdapter {        @Override        public int getCount() {            return 0;        }        @Override        public Object getItem(int position) {            return null;        }        @Override        public long getItemId(int position) {            return 0;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            LayoutInflater МеханизмЗагрузкиОдногЛайАутавДругой = getLayoutInflater();            if(convertView ==null){                /*КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла = МеханизмЗагрузкиОдногЛайАутавДругой.inflate(R.layout.activity_main_grid_for_tables_two,//activity_main_find_customer_for_tables // activity_main_grid_for_tables                        ГлавныйКонтейнерТабель, false);*/            }            /*/////TODO ТАБЕЛЬ ФИО создаем textview названия дней понелельник вторик среда четеварг            ///////// todo фио            НазваниеДанныхВТабелеФИО = КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла.findViewById(R.id.КонтейнерКудаЗагружаетьсяФИО);            ПосикДня = Курсор_ЗагружаемТабеляСозданный.getColumnIndex("uuid"); ////TODO СЮДА ПОЛЕ UUID            НазваниеСтолбикаДляЛобкальногоОбноления = Курсор_ЗагружаемТабеляСозданный.getColumnName(ПосикДня);            НазваниеДанныхВТабелеФИО.setTag(Курсор_ЗагружаемТабеляСозданный.getString(ПосикДня));            Log.d(this.getClass().getName(), " UUID пристваем Внутри ФИО  " + Курсор_ЗагружаемТабеляСозданный.getString(ПосикДня));            ////todo УСТАНАВЛИВАЕМ КЛИК НА ФИО            НазваниеДанныхВТабелеФИО.setOnLongClickListener(СлушательУдаланиеСотрудникаИзТабеля);            НазваниеДанныхВТабелеФИО.setOnClickListener(СлушательИнформацияОСотрудника);*/            return convertView;        }    }    //////////////    //    //    //    // ///////}