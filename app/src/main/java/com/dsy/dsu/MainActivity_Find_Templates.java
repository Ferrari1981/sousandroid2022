package com.dsy.dsu;import android.app.Activity;import android.app.ProgressDialog;import android.content.ContentValues;import android.content.Context;import android.content.Intent;import android.content.pm.ActivityInfo;import android.content.res.Configuration;import android.database.Cursor;import android.database.sqlite.SQLiteCursor;import android.graphics.Color;import android.graphics.drawable.Drawable;import android.os.AsyncTask;import android.os.Bundle;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.CursorAdapter;import android.widget.EditText;import android.widget.ImageView;import android.widget.ListView;import android.widget.ScrollView;import android.widget.SimpleCursorAdapter;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.UiThread;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.constraintlayout.widget.ConstraintLayout;import com.dsy.dsu.Business_logic_Only_Class.Class_GRUD_SQL_Operations;import com.dsy.dsu.Business_logic_Only_Class.Class_Generation_Data;import com.dsy.dsu.Business_logic_Only_Class.Class_Generation_Errors;import com.dsy.dsu.Business_logic_Only_Class.Class_Generation_UUID;import com.dsy.dsu.Business_logic_Only_Class.Class_MODEL_synchronized;import com.google.android.material.dialog.MaterialAlertDialogBuilder;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Collections;import java.util.Date;import java.util.GregorianCalendar;import java.util.LinkedHashMap;import java.util.LinkedList;import java.util.List;import java.util.Locale;import java.util.Map;import java.util.TimeZone;import java.util.concurrent.TimeUnit;public class MainActivity_Find_Templates extends AppCompatActivity {    Configuration config;    protected ScrollView  ГлавныйКонтейнерДляПосикаТабелей; ////главный linelayuout    protected   View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦиклаДляПоиска;    List<String> АрайЛИстФИОВсеДляПосика=  Collections.synchronizedList(new LinkedList<String>());    ///////TODO    CREATE_DATABASE   Create_Database_СсылкаНАБазовыйКласс;    Map<Long, String> ХэшФИОВсеДляПосика;    ArrayAdapter<String> АдаптерДляСпинераДата;    protected ProgressDialog progressDialog;  String finalПоискФИОЧерезLIKE;    Integer  ИндексСтрокКомпонентовТабеля=0;    protected  Button     КнопкаОтправкиСотрудникаДляТабеля;    protected  EditText   ЗначениеПоискаФИОИзменяетПользоатель ;    ///todo пришли данные    String ДепартаментТабеляФинал;    String UUIDТабеляФинал;    String МесяцТабеляФинал;    Long   ПолученнаяUUIDНазванияОрганизации;    String ПередаемСозданнуюНазваниеТабеля;  Long ПередаваемыйИзКнопкиПолучаемUUIDТабеля;  boolean ЗапускШаблоновFaceAppБлокировкаКнопкиДа;    String ГодВырезалиИзБуфераТабель;    String ПолноеНазваниеЗагруженногТАбеля;    //    String МЕсяцДляКурсораТабелей;    //TODO месяц и год для куросара    String ГодДляКурсораТабелей;    // int       ЦифровоеИмяНовгоТабеля;    int МЕсяцПриВставкеНовогоСотрудника ;    int ГодПриВставкеНовогоСотрудника;    ListView ЛистСДаннымиФИО;    long  РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабельОбновление = 0;    long  РезультатВставкиНовогоТабеляЧерезКонтрейнерТаблицыТабель=0;    protected Button КнопкаНазад;    /////    Cursor Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон=null;     Context КонтекстДляАктивтиПосикаШаблонов;    ScrollView ГлавныйКойтейнерПоискаФИОСотрудника;    String ПоученыйУжеСущетсвующийЭлектронноеИмяТабеля;    ///    String НаписаниеИмяНовгоШаблона;    Long  РодительскийUUDТаблицыТабель=0l;    private Long СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels=0l;    @Override    protected void onCreate(Bundle savedInstanceState) {        try{            super.onCreate(savedInstanceState);            КонтекстДляАктивтиПосикаШаблонов=this;            //////            getSupportActionBar().hide(); ///скрывать тул бар            ///TODO попытка открыть экран как full screan            //TODO  ОЧИЩАЕМ ПАМТЬ            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);            ////          //  getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION  );            ХэшФИОВсеДляПосика    = Collections.synchronizedMap(new LinkedHashMap<Long, String>());            /////            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            /////            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON                    | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);            // TODO: 01.05.2021 тест  // ClassActityty d=new ClassActityty(this);            ////todo запрещает поворот экрана            setContentView(R.layout.activity_main__find_temples);            //МетодУдалениеAsyncTaskИзПамяти();            /////            Log.d(this.getClass().getName(), "   ");            // Locale locale = Locale.ROOT;            Locale locale = new Locale("rus");            Locale.setDefault(locale);            config =                    getBaseContext().getResources().getConfiguration();            config.setLocale(locale);            createConfigurationContext(config);///////TODO               Create_Database_СсылкаНАБазовыйКласс=new CREATE_DATABASE(getApplicationContext());            ///TODO разное            Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа");            ///TODO главный контйренр табеля только поиск            ГлавныйКонтейнерДляПосикаТабелей = (ScrollView ) findViewById(R.id.ГлавныйКойтейнерПоискаФИОСотрудника);            ///todo кнопака добалание уже суюествюещнго сотрдника в ТАБЕЛЬ            КнопкаОтправкиСотрудникаДляТабеля = (Button) findViewById(R.id.КнопкаОтправкиСотрудникаДляТабеля);            //кнопкаВыборСотрудникаДляТабеля.setVisibility(View.GONE);            ////todo текс который изменяеть ФИО            ЗначениеПоискаФИОИзменяетПользоатель = (EditText) findViewById(R.id.editTextДляПосикаСотрудникаСоздаваемогоТабеля);            //TODO ЛИСТ С КОНКРЕТНЫМИ ДАННЫМИ ФИО            ЛистСДаннымиФИО = (ListView) findViewById(R.id.ЛистДляПосикаПоТабелюРодительская);            ГлавныйКойтейнерПоискаФИОСотрудника  = (ScrollView) findViewById(R.id. ГлавныйКойтейнерПоискаФИОСотрудника);            //TODO СЛУЧШАТЕЛЬ            ЗначениеПоискаФИОИзменяетПользоатель.addTextChangedListener(СлушательПолученияДанных);            //todo кнопка назад            КнопкаНазад= findViewById(R.id.imagimageViewСтрелкаНазадПодборСотрудник);            ЛистСДаннымиФИО.setBackgroundResource(R.drawable.textlines_tabel_row_color_green_mini);           // ГлавныйКойтейнерПоискаФИОСотрудника .setBackgroundResource(R.drawable.textlines_tabel_row_color_green_mini);///TODO остановка служюы подгруски словаря fio            ////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onDestroy() {        super.onDestroy();        //////TODO  данный код срабатывает когда произошда ошивка в базе    }    @Override    protected void onStop() {        super.onStop();        try {        ///    МетодЗапускаЛокальнойСинхронизации();            ///////        } catch (Exception e) {            //  Block of code to handle errors            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onStart() {        super.onStart();        try{            ///////////// //TODO пришли два значения месяц и год после успешного создание ТАБЕЛЯ            МетодПолучениеДАнныхЧерезИнтрентДляПосикаСотрудника();/////////////////            ///todo созадние кода для возврата на предыдущее актвити            МетодПриНАжатииНаКнопкуBACK();            МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск(null);///TODO клик            МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным();            ////////            //////            ////todo метод обработки кнопки котрая и отправляеть подобраных сотрудников для ТАБЕЛЯ  в другую активити            МетодРаботуКнопкиКотораяОтправляетПодобранныхСотрудников();            ////////TODO ЗАВЕРШЕНИЯ ПОТОКА        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());               new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод возврата к предыдущему активти    private void МетодПриНАжатииНаКнопкуBACK() {        КнопкаНазад.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Log.d(this.getClass().getName(), " кликнем для созданни новго сотрдника при нажатии  ");                ///todo код которыц возврящет предыдущий актвитики кнопка back                try{                МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти();            } catch (Exception e) {                e.printStackTrace();                ///метод запись ошибок в таблицу                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            }            }        });    }    private void МетодПолучениеДАнныхЧерезИнтрентДляПосикаСотрудника() {        try{            Intent Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля = getIntent();            ////////todo  ПРИШЛИ САМИ сами данные            ДепартаментТабеляФинал= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля .getStringExtra("ДепартаментТабеляФинал");            UUIDТабеляФинал= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля .getStringExtra("UUIDТабеляФинал");            МесяцТабеляФинал= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля .getStringExtra("МесяцТабеляФинал");            ГодВырезалиИзБуфераТабель= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля .getStringExtra("ГодВырезалиИзБуфераТабель");            ПолноеНазваниеЗагруженногТАбеля= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля .getStringExtra("ДепартаментТабеляВКоторомИНадоСоздатьНовогоСотрудника");///TODO МЕСЯЦ И ГОД В ВИДЕ ЦИФР            МЕсяцДляКурсораТабелей= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля .getStringExtra("МЕсяцДляКурсораТабелей");            ГодДляКурсораТабелей= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля .getStringExtra("ГодДляКурсораТабелей");            ///TODO цифровоеимя табеля            ЦифровоеИмяНовгоТабеля = Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля.getIntExtra("ЦифровоеИмяНовгоТабеля",0);            ПолноеНазваниеЗагруженногТАбеля= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля.getStringExtra("ПолноеИмяТабеляПослеСозданиеНовогоСотрудника");            //////            МесяцТабеляФинал= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля.getStringExtra("МесяцТабеляФинал");            //////            ПолученнаяUUIDНазванияОрганизации= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля.getLongExtra("ПолученнаяUUIDНазванияОрганизации",0l);            Log.d(this.getClass().getName(), "ПолученнаяUUIDНазванияОрганизации  " +UUIDТабеляФинал);            //////            ПередаемСозданнуюНазваниеТабеля= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля.getStringExtra("ПередаемСозданнуюНазваниеТабеля");            //////            ПередаваемыйИзКнопкиПолучаемUUIDТабеля= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля.getLongExtra("ПередаваемыйИзКнопкиПолучаемUUIDТабеля",0L);            ЗапускШаблоновFaceAppБлокировкаКнопкиДа= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля.getBooleanExtra("ЗапускШаблоновFaceAppБлокировкаКнопкиДа",false);            ЦифровоеИмяНовгоТабеля= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля.getIntExtra("ЦифровоеИмяНовгоТабеля",0);            //////////////            Log.d(  this.getClass().getName(), " ПолноеНазваниеЗагруженногТАбеля" +ПолноеНазваниеЗагруженногТАбеля                    + "  UUIDТабеляФинал " +UUIDТабеляФинал  + " МесяцТабеляФинал " +МесяцТабеляФинал+ " МЕсяцДляКурсораТабелей "                    +МЕсяцДляКурсораТабелей + " ГодДляКурсораТабелей " +ГодДляКурсораТабелей+"  ЦифровоеИмяНовгоТабеля "+ЦифровоеИмяНовгоТабеля);            РодительскийUUDТаблицыТабель= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля.getLongExtra("РодительскийUUDТаблицыТабель",0l);            Log.d(this.getClass().getName(), "РодительскийUUDТаблицыТабель  " +РодительскийUUDТаблицыТабель);            if (РодительскийUUDТаблицыТабель==0) {                // TODO: 28.01.2022                РодительскийUUDТаблицыТабель= Интент_ПришлиДанныеДляПосикаУжеСуществующегоСотрудникаДляСозданияТабеля.getLongExtra("РодительскийUUDТаблицыТабель",0l);                Log.d(this.getClass().getName(), "РодительскийUUDТаблицыТабель  " +РодительскийUUDТаблицыТабель);            }        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }/////TODO МЕТОД ПОИСКА И ЗАГРУЩКИ ВСЕХ ПОЛЬЗОВАТЕЛЬ ГОТОВЫ И ПОИК ИХ ЧЕРЕЗ LIKE    protected void МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск(String ПоискФИОЧерезLIKE) throws InterruptedException {        //todo перед созданием нового уьиваем из папмятт      Class_GRUD_SQL_Operations class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск;        try {            finalПоискФИОЧерезLIKE = ПоискФИОЧерезLIKE;            //////TODO ПРИ ПЕРВОМ ЗАПУСКЕ КОГДА Ы НИЧЕГО НЕ ВЫБРАЛИ И ПЕРВЙ ЗАПУС ПОСЫЛВАЕТ ЧТОВ СТРОКИ            if (finalПоискФИОЧерезLIKE ==null ) {                ///                //////todo если пустой то без like                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE);                ////                        //////todo выбор только like                        ////TODO ПОЛУЧАЕМ ВСЕ ДАННЫЕ ПО ТАБЛИЦУ ФИО ДЛЯ ПОСИКА                // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ                ///                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());                ///                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","fio");                ///////                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","name,_id,uuid,BirthDate,snils");                //            /*        class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","uuid=?    AND status_send !=? AND month_tabels=? AND  year_tabels =? AND fio IS NOT NULL ");                    ///"_id > ?   AND _id< ?"                    //////                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",finalПолученныйUUID);                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/                ////TODO другие поля                ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);                ////                //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","name ASC");                ////                /// class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");                ////                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон=null;                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                Log.d(this.getClass().getName(), "GetData " +Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон );                // TODO: 07.09.2021   _old     /*           ////////                            Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон = new Class_MODEL_synchronized(getApplicationContext()).                                    КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,_id,uuid,BirthDate,snils"},                                            null, null, null, null, "name ASC", null);///"SELECT name  FROM MODIFITATION_Client WHERE name=?",НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"                            ///////*/                    Log.d(this.getClass().getName(), " Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон .getCount() " +Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон .getCount());                    /////TODO если справочник был уже загружен то мы его не заполянм а с него и загружемся                    ////todo проверяем куроср                if (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getCount() >0) {                    /////                    МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО();                }                Log.d(this.getClass().getName(), " загрузка справочника ФИО без распарсивания а сразу" );                //todo КУРСОР ЧЕРЕЗ ПОИСК LIKE  ПОСИК ЧЕРЕЗ LIKE  КОГДА ПОЛЬЗОВАТЕЛЬ ВЫБРАН ЧТО ТО КОНТЕРТНО            } else if (finalПоискФИОЧерезLIKE.length()>0) {                /*try {                    ////TODO засыпаем  ПРИ ПОСИКЕ СОТРУДУНИКА                    TimeUnit.MILLISECONDS.sleep(0);                } catch (InterruptedException e) {                    e.printStackTrace();                }*/                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE );///todo like                // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ                ///                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());                ///                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","fio");                ///////                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","name,_id,uuid,BirthDate,snils");                //                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","name LIKE ?  ");                    ///"_id > ?   AND _id< ?"                    //////                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",finalПоискФИОЧерезLIKE+ "%");                    ///             /*       class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/                ////TODO другие поля                ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);                ////                //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update DESC");                ////                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","500");                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                            //// like TODO второй                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон=null;                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                Log.d(this.getClass().getName(), "GetData "+Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон  );/*                // TODO: 07.09.2021   _old                            Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон = new Class_MODEL_synchronized(getApplicationContext()).                                    КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,_id,uuid,BirthDate,snils"},                                            "name LIKE ?", new String[]{ ВПотокеfinalПоискФИОЧерезLIKE + "%"}, null, null, "date_update DESC", "500");///"SELECT name  FROM MODIFITATION_Client WHERE name=?",                            // НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"                            // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n*/                               /* Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон = new Class_MODEL_synchronized(getApplicationContext()).                                        КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,id,uuid,BirthDate,snils"},                                                "name LIKE ?", new String[]{"%" + finalПоискФИОЧерезLIKE + "%"}, null, null, "date_update DESC", "100");///"SELECT name  FROM MODIFITATION_Client WHERE name=?",                                // НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"*/                            // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n                    ////todo проверяем куроср                if (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getCount()>0) {                    /////                    МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО();                }                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE);                ////TODO ЕСЛИ ПОЛСЛЕ ВЫБОРКИ ИДЕМ НАЗАД И У НАС ""            }else {                //////todo если пустой то без like                Log.d(this.getClass().getName(), "finalПоискФИОЧерезLIKE  " + finalПоискФИОЧерезLIKE);                ////                        ////TODO ПОЛУЧАЕМ ВСЕ ДАННЫЕ ПО ТАБЛИЦУ ФИО ДЛЯ ПОСИКА                // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ                ///                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск=new Class_GRUD_SQL_Operations(getApplicationContext());                ///                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","fio");                ///////                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","name,_id,uuid,BirthDate,snils");                //       /*         class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","name LIKE ?  ");                ///"_id > ?   AND _id< ?"                //////                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",finalПоискФИОЧерезLIKE+ "%")*/;                ///             /*       class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/                ////TODO другие поля                ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);                ////                //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                ////                class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","name ASC");                ////               // class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","500");                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                //// like TODO второй                if (!Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.isClosed()) {                    Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.close();                    Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон=null;                }                Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон= (SQLiteCursor)  new Class_GRUD_SQL_Operations(getApplicationContext()).                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                Log.d(this.getClass().getName(), "GetData " +Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон );   /*             // TODO: 07.09.2021  _old                            Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон = new Class_MODEL_synchronized(getApplicationContext()).                                    КурсорУниверсальныйДляБазыДанных("fio", new String[]{"name,_id,uuid,BirthDate,snils"},                                            null, null, null, null, "name ASC", null);///"SELECT name  FROM MODIFITATION_Client WHERE name=?",НазваниеТаблицНаСервере +"%"  // KEY_NAME + " LIKE ?"*/                            ///////                        // new String[] { filter+"%" }, // new String[] {"%"+ filter+ "%" }, n                    Log.d(this.getClass().getName()," Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон .getCount() " + Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getCount());                    /////TODO если справочник был уже загружен то мы его не заполянм а с него и загружемся                    ////todo проверяем куроср                if (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getCount()>0) {                    МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО();                }                    Log.d(this.getClass().getName(), " загрузка справочника ФИО без распарсивания а сразу");            }                //todo КУРСОР ЧЕРЕЗ ПОИСК LIKE  ПОСИК ЧЕРЕЗ LIKE  КОГДА ПОЛЬЗОВАТЕЛЬ ВЫБРАН ЧТО ТО КОНТЕРТНО            //поймать ошибку всего классаIOException | MyException e    NumberFormatException        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());               new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод заполнения активтии из таблицы фио//todo метод не ПОСТРЕДТСВЕНО АПОЛЯНЕТ LISTVIEW ДАНЫМИ    private void МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО() {        try{            ЛистСДаннымиФИО.deferNotifyDataSetChanged();            ///todo перед заполенеем данных удалем возможные комнопенты на активити            try{                ГлавныйКонтейнерДляПосикаТабелей.removeAllViews();            } catch (Exception e) {                //   e.printStackTrace(); /*           ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());*/            } ////TODO перерд обработки б=бнуляем          //  ХэшФИОВсеДляПосика.clear();//TODO потОКИ            //////*                                         ////todo циклы заполения                                         ////todo начинаем цикл                                         do {                                             //   Log.d(this.getClass().getName(), "    " +  .getHoldCount());                                             ////TODO ДДАНЫЕ ИЗ БАЗЫ САМИ ФИО                                             String ПолученыеФИО = Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getString(0);                                             Log.d(this.getClass().getName(), " ПолученыеФИО " + ПолученыеФИО);                                             String ПолученныеID = Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getString(1);                                             long ПолученныйUUID = Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getLong(2);                                             String ПолученыеДатаРождения = Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getString(3);                                             String ПолученыеСНИЛС = Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getString(4);                                             ///TODO ЗАПОЛЕНИЕЯ АРАЙЛИСТА И хЭШМЭПА                                             МетодЗаполенияАрайЛистаИХэшМэпаДляПосикаПоФИО(ПолученыеФИО, ПолученныеID, ПолученныйUUID, ПолученыеДатаРождения, ПолученыеСНИЛС);                                             ///TODO ЧТО ПРИ КЛИКЕ ПОНИМАТЬ КАКАУЮ ЯЧЕЙКУ МЫ КЛИКНУЛИ МЫЗАПИСЫВАЕМ UUID ФИО В КОМПОНЕТ setTag                                             Log.d(this.getClass().getName(), " ИндексСтрокКомпонентовТабеля " + ИндексСтрокКомпонентовТабеля +                                                     " ЛистСДаннымиФИО.getTag() " + ЛистСДаннымиФИО.getTag() +                                                     "  ЛистСДаннымиФИО.getId()) " + ЛистСДаннымиФИО.getId() +                                                     " ПолученыеФИО " + ПолученыеФИО + " ПолученныеID " + ПолученныеID + " ПолученныйUUID "                                                     + ПолученныйUUID + " ПолученыеДатаРождения " + ПолученыеДатаРождения + " ПолученыеСНИЛС " + ПолученыеСНИЛС);                                             //METHOD WHICH WILL HANDLE DYNAMIC INSERTION                                             //////TODO заврешаем уикл загрузки данных на ктивити табель                                             ////todo увеличитваем элемент                                             ИндексСтрокКомпонентовТабеля++;                                             ///todo разбларируем поток                                             ////////                                         } while (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.moveToNext());*/                                         /////            МетодФинальнойВставкиДАнныхДляПосикаСотрудников();            //     ЛистДляВсеСотурдникаТекущегоТабеля.setBackgroundResource(R.drawable.textlines_tabeltwo);            //////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());               new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ////todo ФИНАЛЬНЫЙ МЕТОД    private void МетодФинальнойВставкиДАнныхДляПосикаСотрудников() {        ////        ИндексСтрокКомпонентовТабеля=0;        ////////        Log.d(this.getClass().getName()," ИндексСтрокКомпонентовТабеля "+ИндексСтрокКомпонентовТабеля);/////////TODO ЗАПОЛЕНИЕ        ////TODO SET УСТАНОВКА ДАНЫХ В АДАПТЕР        try {            ////TODO ПОСЛЕ ТОГО КАК ЗАПОЛНИЛИ АРАЙЛИСТ ПРИСВАИВАЕМ ВСЕ КОМПОНЕЕТЫ В LINEARLOUT  /*          SimpleCursorAdapter userAdapter = new AsyncTaskLoader<SimpleCursorAdapter>(getApplicationContext()) {                @Nullable                @Override                public SimpleCursorAdapter loadInBackground() {                    SimpleCursorAdapter userAdapterвнутри = null;                    // создаем адаптер, передаем в него курсор                    userAdapterвнутри = new SimpleCursorAdapter(getApplicationContext(), R.layout.list_item,                            Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон, new String[]{"name"}, new int[]{android.R.id.text1}, 0);                    ////TODO настройка внешнего вида                    SimpleCursorAdapter finalUserAdapterвнутри = userAdapterвнутри;                    userAdapterвнутри.setViewBinder(new SimpleCursorAdapter.ViewBinder() {                        @Override                        public boolean setViewValue(View view, Cursor cursor, int columnIndex) {                            int ИндексИмя = cursor.getColumnIndex("name");                            if (ИндексИмя == columnIndex) {                                TextView tvColor = (TextView) view;                                ///                                String data = cursor.getString(0);                                tvColor.setText(data);                                ///                                if (tvColor.length() == 25) {                                    tvColor.setTextColor(Color.MAGENTA);                                } else if (tvColor.length() == 28) {                                    tvColor.setTextColor(Color.GREEN);                                }                                return true;                            } else {                                Log.e(this.getClass().getName(), "view.getId() " + view.getId());                            }                            return false;                        }                    });                    return userAdapterвнутри;                }            }.loadInBackground();*/        //    ЛистСДаннымиФИО.setAdapter(userAdapter);            //  ЛистСДаннымиФИО.setAdapter(АдаптерДляСпинераДата);            //sqlite data helper class to receive all the data            // create the adapter using the cursor pointing to the desired data            // as well as the layout information            SimpleCursorAdapter dataAdapter = new SimpleCursorAdapter(getApplicationContext(), R.layout.list_item,                    Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон, new String[]{"name"}, new int[]{android.R.id.text1}, CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER);            SimpleCursorAdapter.ViewBinder binding = new SimpleCursorAdapter.ViewBinder() {                @Override                public boolean setViewValue(View view, Cursor cursor, int columnIndex) {                    int ИндексФИО = cursor.getColumnIndex("name");                    ////                    int ИндексДеньРождения = cursor.getColumnIndex("BirthDate");                    ////                    Drawable icon = null;                    //                    StringBuffer БуферФИОиДатыРождения=new StringBuffer();                    if (ИндексФИО == columnIndex) {                        icon = getResources().getDrawable(R.mipmap.icon_dsu1_tabels_for_find_item);                        icon.setBounds(0, 1, 60, 60);                   ((TextView) view).   setPadding(10,10,10,10);                        ((TextView) view).setCompoundDrawables(icon, null, null, null);                     /*   TextView tvColor = (TextView) view;                        */                        ///                        String ФИОДляПОиска = cursor.getString(ИндексФИО);                        String ДатаРОжденияДляПОиска = cursor.getString(ИндексДеньРождения);                        //                        if(ДатаРОжденияДляПОиска==null){                            ДатаРОжденияДляПОиска="нет";                        }////TODO заполение посика в сех сотрудников                        БуферФИОиДатыРождения.append("    ").append(ФИОДляПОиска).append("\n").                                append("   ").append("(").append(ДатаРОжденияДляПОиска).append(")").append(" г.");                        Log.d(this.getClass().getName(), " БуферФИОиДатыРождения.toString()" + БуферФИОиДатыРождения.toString());//////TODO заполняем simple двнными                        ((TextView) view).setText(БуферФИОиДатыРождения.toString());                        ///                       /* if (tvColor.length() == 25) {                            tvColor.setTextColor(Color.MAGENTA);                        } else if (tvColor.length() == 28) {                            tvColor.setTextColor(Color.GREEN);                        }*/                        return true;                    } else {                        Log.e(this.getClass().getName(), "view.getId() " + view.getId());                    }                    return false;                }            };                    dataAdapter.setViewBinder(binding);            /////            ЛистСДаннымиФИО.setAdapter(dataAdapter);                //TODO ЗАПОЛЕНЕИЯ АДАПТЕРА           // АдаптерДляСпинераДата = new ArrayAdapter<String>(getApplicationContext(), R.layout.list_item,  АрайЛИстФИОВсеДляПосика);//ХэшФИОВсеДляПосика // АрайЛИстФИОВсеДляПосика // simple_list_item_checked //simple_list_item_multiple_choice            /////////            try {                ГлавныйКонтейнерДляПосикаТабелей.removeAllViews();            } catch (Exception e) {                //   e.printStackTrace();            }            ////            ЛистСДаннымиФИО.setBackgroundResource(R.drawable.textlines_tabeltwo);            ///TODO КОПИРУЕМ в пабик            ЛистСДаннымиФИО.invalidate();            ЛистСДаннымиФИО.deferNotifyDataSetChanged();            ГлавныйКонтейнерДляПосикаТабелей.invalidate();            try {                ГлавныйКонтейнерДляПосикаТабелей.addView(ЛистСДаннымиФИО);            } catch (Exception e) {               // e.printStackTrace();            }            ЛистСДаннымиФИО.deferNotifyDataSetChanged();            //////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());               new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///////////    private void МетодОбработкиКликаПоЯчейкамСотрудникаВыбранным() {        ЛистСДаннымиФИО.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {//TODO ПРИНУДИТЕЛЬНО ЗАПОЛНЯЕМ SETTAG                if (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getCount()>0){        /*     TextView textView= (TextView) parent.getItemAtPosition(position);                    textView.setBackgroundColor(Color.GRAY);*/                    ((TextView) view).setBackgroundColor(Color.GRAY);                    Log.d(this.getClass().getName(), "  Курсор_СамиФИОДляПоиска.getCount()" + Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getCount());                    Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.moveToFirst();                    while (Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.move(position)){                        long UUIDПолучаемДляОправкиВФИОпослеПосика=Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.getLong(2);                        ((TextView) parent.getChildAt(0)).setTag(UUIDПолучаемДляОправкиВФИОпослеПосика);//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ             /* TextView textView=  (TextView) parent.getChildAt((int) id);                textView.setTextSize(25);*/                        Log.d(this.getClass().getName()," UUIDПолучаемДляОправкиВФИОпослеПосика " +UUIDПолучаемДляОправкиВФИОпослеПосика);                        break;                    }//todo ЗАПОЛЯЕМ UUID И ИМЯ ФИО                    TextView textView = (TextView) view;                    long UUIDgetTagДляПосикаПолученныйИзListView= (long) ((TextView) parent.getChildAt(0)).getTag();//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ                    String СамоЗначениеФИОДляПосикаПолученныйИзListView = textView.getText().toString(); // получаем текст нажатого элемента                    //Toast.makeText(getApplicationContext(), " Вы выбрали ФИО : " + СамоЗначениеФИОДляПосикаПолученныйИзListView   , Toast.LENGTH_LONG).show();                    //  Toast.makeText(getApplicationContext(), " Вы выбрали : " + String.valueOf(UUIDgetTagДляПосикаПолученныйИзListView ) , Toast.LENGTH_LONG).show();                    //TODO ПОЛУЧЕНЫЕ ЗНАЧЕНИЯ UUID  И ФИО ЗАПОЛЯНЕМ В ХЭШМЭП                    if (UUIDgetTagДляПосикаПолученныйИзListView!=0 && СамоЗначениеФИОДляПосикаПолученныйИзListView!=null  ){                        if (UUIDgetTagДляПосикаПолученныйИзListView>0) {                            /////todo заполение хэша сотрудниками котрые мы  ПОДОБРАЛИ                            ХэшФИОВсеДляПосика.put(UUIDgetTagДляПосикаПолученныйИзListView, СамоЗначениеФИОДляПосикаПолученныйИзListView);                        }                        Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеДляПосика.size()+ "  ХэшФИОВсеДляПосика.toString() "                                +ХэшФИОВсеДляПосика.toString()+" UUIDgetTagДляПосикаПолученныйИзListView " +UUIDgetTagДляПосикаПолученныйИзListView);                        ////// todo оформление                        КнопкаОтправкиСотрудникаДляТабеля.setVisibility(View.VISIBLE);                        //todo после вставки обнуляем переменные                        UUIDgetTagДляПосикаПолученныйИзListView=0;                        СамоЗначениеФИОДляПосикаПолученныйИзListView=null;                    }}}        });        //////todo    }    ////todo метод отправки полученых сотрудников на другую активти    private void МетодРаботуКнопкиКотораяОтправляетПодобранныхСотрудников() {        try{            КнопкаОтправкиСотрудникаДляТабеля.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Log.d(this.getClass().getName(), " кликнем для созданни новго сотрдника при нажатии  ");                    ///////TODO перед созданием определяем не пустые ли значения                    // TODO: 27.09.2021 сама отправка                    if (ХэшФИОВсеДляПосика.size()>0) {                        ///                        СообщениеКотороеСпрашиваетТочноЛиНужноСоздатьНовогоСотрудника("Шаблоны", "Создание Шаблона", true);                    } else {                        Toast aa = Toast.makeText(getApplicationContext(), "OPEN",Toast.LENGTH_SHORT);                        ImageView cc = new ImageView(getApplicationContext());                        cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_error);//icon_dsu1_synchronisazia_dsu1_success                        aa.setView(cc);                        aa.show();                        Toast.makeText(getApplicationContext(), "Вы не выбрали не одного сотрудника (выберите и повторите попытку).", Toast.LENGTH_SHORT).show();                    }                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());               new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///todo сообщение на активти ПОДБОР СОТРУДНИКА КОТОРЫЙ УЖЕ ЕСТЬ В БАЗЕ И ОТПРАВИТЬ ЕГО НА ДРУГТУЮ АКТИВНОСТЬ ПО ЗАПОДЕНИЮ В ТАБЕЛЬ    @UiThread    protected void СообщениеКотороеСпрашиваетТочноЛиНужноСоздатьНовогоСотрудника(String ШабкаДиалога, final String СообщениеДиалога, boolean статус) {        ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ        try {            ConstraintLayout constraintLayoutВозможностьЗаписиИмениШаблона=(ConstraintLayout) getLayoutInflater().inflate(R.layout.line_new_name_tample,null);//////сам вид            final AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)                    .setTitle(ШабкаДиалога)                    .setMessage(СообщениеДиалога)                    .setPositiveButton("Сохранить", null)                    .setNeutralButton("Ещё", null)                    .setNegativeButton("Очистить", null)                    .setView(constraintLayoutВозможностьЗаписиИмениШаблона)                    .setIcon(R.drawable.icon_dsu1_new_tamples )// //icon_dsu1_new_customer_success                    .show();            EditText editTextНаписаноеИмяШаблона;            editTextНаписаноеИмяШаблона = alertDialog.findViewById(R.id.editextlinenametamle);            ////TODO ессли данная перменая не пустая знаит мы не созадем новый шадлн ы в него накидываем еще сотрудниклв            if(ПередаемСозданнуюНазваниеТабеля!=null){                editTextНаписаноеИмяШаблона.setText(ПередаемСозданнуюНазваниеТабеля)  ;            }else{            }/////////кнопка            final Button MessageBoxОтправкаУжеСуществещегоСотрудника = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);            MessageBoxОтправкаУжеСуществещегоСотрудника .setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                    Log.d(this.getClass().getName(), " ХэшФИОВсеДляПосика.size()" + ХэшФИОВсеДляПосика.size() + " ХэшФИОВсеДляПосика.toString() " + ХэшФИОВсеДляПосика.toString());                    ////TODO получаем Имя Написаное Новог Шаблона                    НаписаниеИмяНовгоШаблона =null;                    ///                    НаписаниеИмяНовгоШаблона = editTextНаписаноеИмяШаблона.getText().toString().trim();                    Log.d(this.getClass().getName(), " НаписаниеИмяНовгоШаблона " + НаписаниеИмяНовгоШаблона);                    // TODO: 26.03.2021 ЕСЛИ ЕСТЬ НАЗВАНЕИ ШАБЛОНА ТО НАЧИНАЕМ РАБОТУ                    if (НаписаниеИмяНовгоШаблона != null) {                        if (НаписаниеИмяНовгоШаблона.length()>0) {///todo ВСТАВКИ ВЫБРАНОГО СОТРУЖИНКА КОТОРРЫЙ УЖЕ ЕСТЬ В  БАЗЕ                        МетодЗапускаВставкиВыбраногоСотрудникаВГотовыйТабель();                    }else{                            Toast.makeText(getApplicationContext(), " Напите название Шаблона !!! "  , Toast.LENGTH_LONG).show();                        }                    }else {                        Toast.makeText(getApplicationContext(), " Напите название Шаблона !!! "  , Toast.LENGTH_LONG).show();                    }                }            });/////////кнопка            final Button MessageBoxUpdateЗАкрытьСозданиеТабеля = alertDialog.getButton(AlertDialog.BUTTON_NEUTRAL);            MessageBoxUpdateЗАкрытьСозданиеТабеля.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();///запуск метода обновления через DIALOGBOX                }            });/////////кнопка            final Button MessageBoxUpdateОчиститьСозданиеТабеля = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);            MessageBoxUpdateОчиститьСозданиеТабеля.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                    ///TODO ПОСЛЕ ОТПРАВКИ ОДНУЛЯЕМ ПЕРЕДВАЕМЫЙ хэш                    ХэшФИОВсеДляПосика.clear();                 //   ХэшФИОВсеДляПосика=null;                    ///TODO ошибка                    ///todo/////////TODO ЗАПОЛЕНИЕ                    ////TODO SET УСТАНОВКА ДАНЫХ В АДАПТЕР                    try {                        МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск(null);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }///запуск метода обновления через DIALOGBOX                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ////todo добавления уже действущего сотрдника////todo добавления уже действущего сотрдника    private  void МетодЗапускаВставкиВыбраногоСотрудникаВГотовыйТабель() {         СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels = 0l;        try{            ///TODO засыпаем цикл чтобы он не падал            //  TimeUnit.MILLISECONDS.sleep(100);            ///todo перед вставкой обнуляем            progressDialog= new ProgressDialog(this);            Log.d(this.getClass().getName(), " ХэшФИОВсеДляПосика  "+ХэшФИОВсеДляПосика.values());            ////TODO КОД ПОСЛЕ ПОДБОРА  СУЩЕСТВУЕЩЕГО СОТРУДНИКА И ВСТАКА ЕГО В ДЕЙСТВУЩЕЙ ТАБЕЛЬ            //////todo РАСПРСИВАЕМ ПРИШЕДШИЙ ХЭШМАП С ПОДОБРАНЫМИ СОТРУНИКАМИ  цикл for           // ((ThreadPoolExecutor)AsyncTask.THREAD_POOL_EXECUTOR).setCorePoolSize(1);           // ((ThreadPoolExecutor)AsyncTask.THREAD_POOL_EXECUTOR).setMaximumPoolSize(1);  /*          int CountRow=ХэшФИОВсеДляПосика.size();            CountDownLatch countDownLatch=new CountDownLatch(CountRow);*/            AsyncTask asyncTask = null;            asyncTask =new AsyncTask() {                @Override                protected void onPreExecute() {                    super.onPreExecute();                    //progressDialog.setMessage(Значения[0]);                    if ( ХэшФИОВсеДляПосика.size()>0) {                        progressDialog.setIndeterminate(true);                        progressDialog.setTitle("Сотрудника/ов в Шаблон");                        progressDialog.setMessage("Добавление...");                        progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);                        progressDialog.setMax(ХэшФИОВсеДляПосика.size());                        progressDialog.setProgress(0);                        progressDialog.setCanceledOnTouchOutside(false);                        progressDialog.setCancelable(false);                        progressDialog.show();                    }                    ЛистСДаннымиФИО.setClickable(false);                    ГлавныйКонтейнерДляПосикаТабелей.setClickable(false);                    ГлавныйКойтейнерПоискаФИОСотрудника.setClickable(false);                }                long КоличествоУспешныхВставокВШаблонСотрулников;                /////TODO МЕТОД ЗАПИСИ ВЫБРАНОГО СОТРКДГНКАВ В ТАБЕЛЬ                @Override                protected Object doInBackground(Object[] objects) {                    Log.d(this.getClass().getName(), " asyncTask ");                    int КоличествоУспешныхВставокВШаблонСотрулниковДляПередачиPrograssUpdate = 0;                    // TODO: 25.10.2021  данное услоеви срабаытвает только когда мы СОЗДАЕМ НОВЫЙ ШАБЛОН                    if (ПередаваемыйИзКнопкиПолучаемUUIDТабеля==0) {                        ///TODO действие первое создание только ПУСТОГО ШАБЛОНА                        Long       КоличествоУспешныхВставокВШаблонСотрулниковНаодинПроходВПеруютаблицуTemples=                                МетодОпределенияВставкиТолькоШаблонаБезСотрудников();                        // TODO: 24.05.2021 ТРЕТИЙ КОД ЕСЛИ ПОЛЬЗОВАТЕЛЬ ЗАХОДТЕ АВТОМАТИЧЕСКОЙ УСВТУКУ В ВЫХОДЫНЕ ДНИ                        Log.d(this.getClass().getName(), " КоличествоУспешныхВставокВШаблонСотрулниковНаодинПроходВПеруютаблицуTemples "                                + КоличествоУспешныхВставокВШаблонСотрулниковНаодинПроходВПеруютаблицуTemples +                                " СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels " +СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels+                                "  ПередаваемыйИзКнопкиПолучаемUUIDТабеля " +ПередаваемыйИзКнопкиПолучаемUUIDТабеля);                    }                    Log.d(this.getClass().getName(),                            " СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels " +СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels+                            "  ПередаваемыйИзКнопкиПолучаемUUIDТабеля " +ПередаваемыйИзКнопкиПолучаемUUIDТабеля);//////todo сохраняем выбранных сотрудников в ТЕКУЩИЙ ТАБЕЛЬ                    for (Map.Entry<Long, String> entry : ХэшФИОВсеДляПосика.entrySet()) {                        /////TODO СОН                       try {                            TimeUnit.MILLISECONDS.sleep(200);                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                        ////TODO данные для вставки выбраного сотрудника его UUID и ФИО                      Long UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника=0l;                        try {                      UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника=entry.getKey();                        Log.d(this.getClass().getName(), " UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника " +UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника);                    String ФИОДляВставки =entry.getValue();                        ////TODO данные для вставки выбраного сотрудника его UUID и ФИО           /////                        ФИОДляВставки = ФИОДляВставки.replaceAll("\\n+", "");                       // ФИОДляВставки = ФИОДляВставки.replaceAll("\\s+", "");                        int НачалоДатыВФИО=ФИОДляВставки.indexOf("(");                        ///                        if(НачалоДатыВФИО>=0){                            ФИОДляВставки = ФИОДляВставки.substring(0, НачалоДатыВФИО);                        }                        ФИОДляВставки = ФИОДляВставки.trim();                        Log.d(this.getClass().getName(), " UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника " +UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника+                                " ФИОДляВставки " + ФИОДляВставки);//TODO  ОЧИЩАЕМ ПАМТЬ                        ///TODO ЗАПУСКАЕМ  ПуллПамяти                            Long       КоличествоУспешныхВставокВШаблонСотрулниковНаодинПроходВоВтроуюТаблицуFIO_TEmplesСамихСотрудников =0L;                            if (UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника >                                    0  && СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels >0  ) {                                ////                                String finalФИОДляВставки = ФИОДляВставки;                                Long finalUUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника = UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника;                                Log.d(this.getClass().getName(), " UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника " +UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника+                                          "  СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels " +СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels);                                ///TODO вторОЕ ДЕЙСТВИЕ ВСТАВКА САМИХ СОТРУДЛНИКОВ В ТАБЕЛЬ А ВЫШЕ КОД КОТРЫЙ СТРАБОАТЫВАЕТ ТОЛЬКО ОДИН РАЗ СОЗДАЕМ ТОЛЬКО САМ ШАБЛОН                                КоличествоУспешныхВставокВШаблонСотрулниковНаодинПроходВоВтроуюТаблицуFIO_TEmplesСамихСотрудников =                                        МетодОпределенияВставкиУжеСущетсвующийШаблонСотрудников(finalUUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника,                                                finalФИОДляВставки);                                // TODO: 24.05.2021 ТРЕТИЙ КОД ЕСЛИ ПОЛЬЗОВАТЕЛЬ ЗАХОДТЕ АВТОМАТИЧЕСКОЙ УСВТУКУ В ВЫХОДЫНЕ ДНИ                                Log.d(this.getClass().getName(), " КоличествоУспешныхВставокВШаблонСотрулниковНаодинПроходВоВтроуюТаблицуFIO_TEmplesСамихСотрудников "                                        + КоличествоУспешныхВставокВШаблонСотрулниковНаодинПроходВоВтроуюТаблицуFIO_TEmplesСамихСотрудников);                                ///                                //TODO ЗАПУСКАЕМ ФУТУРЕ                            }// TODO: 19.03.2021 end if                            if (UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника >                                    0  && ПередаваемыйИзКнопкиПолучаемUUIDТабеля>0 ) {                                ////                                String finalФИОДляВставки = ФИОДляВставки;                                Long finalUUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника = UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника;                                Log.d(this.getClass().getName(), " UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника " +UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника+                                        "  ПередаваемыйИзКнопкиПолучаемUUIDТабеля " +ПередаваемыйИзКнопкиПолучаемUUIDТабеля);                                ///TODO вторОЕ ДЕЙСТВИЕ ВСТАВКА САМИХ СОТРУДЛНИКОВ В ТАБЕЛЬ А ВЫШЕ КОД КОТРЫЙ СТРАБОАТЫВАЕТ ТОЛЬКО ОДИН РАЗ СОЗДАЕМ ТОЛЬКО САМ ШАБЛОН                                КоличествоУспешныхВставокВШаблонСотрулниковНаодинПроходВоВтроуюТаблицуFIO_TEmplesСамихСотрудников =                                        МетодОпределенияВставкиyнАКИДЫВАЕМуЖЕвСУЩЕСТВУЮЩИЙШаблонСотрудников(finalUUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника,                                                finalФИОДляВставки);                                // TODO: 24.05.2021 ТРЕТИЙ КОД ЕСЛИ ПОЛЬЗОВАТЕЛЬ ЗАХОДТЕ АВТОМАТИЧЕСКОЙ УСВТУКУ В ВЫХОДЫНЕ ДНИ                                Log.d(this.getClass().getName(), " КоличествоУспешныхВставокВШаблонСотрулниковНаодинПроходВоВтроуюТаблицуFIO_TEmplesСамихСотрудников "                                        + КоличествоУспешныхВставокВШаблонСотрулниковНаодинПроходВоВтроуюТаблицуFIO_TEmplesСамихСотрудников);                                ///                                //TODO ЗАПУСКАЕМ ФУТУРЕ                            }// TODO: 19.03.2021 end if// TODO: 25.10.2021  ПЕРВОЕ ДЕЙТСИЕ НА ХОДУ НАКИДЫВАЕМ СОТРУДНИКОВ ТОЛЬКО СОЗДАННЫЙ ШАБЛОН// TODO: 25.10.2021  ВТОРОЕ ДЕЙСТИЕ НАКИДВАЕМ УЖЕ В СУЩЕСТУЮЩИЙ ШАБОН                              if (КоличествоУспешныхВставокВШаблонСотрулниковНаодинПроходВоВтроуюТаблицуFIO_TEmplesСамихСотрудников > 0) {                                КоличествоУспешныхВставокВШаблонСотрулниковДляПередачиPrograssUpdate++;                                  КоличествоУспешныхВставокВШаблонСотрулников++;                                publishProgress(КоличествоУспешныхВставокВШаблонСотрулниковДляПередачиPrograssUpdate);                            }                              // TODO: 29.04.2021 успешная вставка в шаблон нового сотрудуника                                                                                                                      if (КоличествоУспешныхВставокВШаблонСотрулниковНаодинПроходВоВтроуюТаблицуFIO_TEmplesСамихСотрудников > 0) {                                // TODO: 29.04.2021 ошибка добалния такой сотуддник уже есть  в шаблона                              } else {                                Log.e(this.getClass().getName(), " нет вставки в шаблон заполения ");                                ((Activity)КонтекстДляАктивтиПосикаШаблонов).runOnUiThread(new Runnable() {                                    @Override                                    public void run() {                                        progressDialog.setMessage("Ошибка сотрудник не добавилься...");                                    }                                });                            }                            ///TODO удаляем из хэшмапа внутри цыкла после успешной вставки цикл чтобы он не падал///                        } catch (Exception e) {                            //  Block of code to handle errors                            e.printStackTrace();                            ///метод запись ошибок в таблицу                            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                    Thread.currentThread().getStackTrace()[2].getLineNumber());                        }                        ///todo разбларируем поток                    }/////TODO END FOR                    // TODO: 25.10.2021                    if (КоличествоУспешныхВставокВШаблонСотрулников>0) {                        // TODO: 11.08.2021  ЛОКАЛЬНАЯ СЕРВЕРНАЯ НА АНДРОЙДЕ                    }                    return КоличествоУспешныхВставокВШаблонСотрулниковДляПередачиPrograssUpdate;                }                @Override                protected void onPostExecute(Object o) {                    super.onPostExecute(o);                    /////                    Integer ПолученоеЗначение= (Integer) o;                    ЛистСДаннымиФИО.setClickable(true);                    ГлавныйКонтейнерДляПосикаТабелей.setClickable(true);                    ГлавныйКойтейнерПоискаФИОСотрудника.setClickable(true);                    progressDialog.setIndeterminate(false);                    progressDialog.setProgress(ХэшФИОВсеДляПосика.size());                    Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа");                    progressDialog.dismiss();                    ///                    Log.w(this.getClass().getName(), "Ошибка  новый сотрудник не вставилься  o "+o  );                    /////TODO УСПЕШНОЕ  ДОБАВЛЕНИЕ ВЫБРАННЫХ СОТРУДНИКОВ В ТАБЕЛЬ                    if (   ПолученоеЗначение>0){ //;////ПРИ УСПЕШНОЙ ВСТАВКИ ДАННЫХ  ПЕРЕДАЕМ СТАТИЧНОМУ СЁЧИКК  ОБНОВЛЕНИЙ ЧТО НАДО УВЕЛИЧИТ ЗНАЧЕНИЕ НА 1+>0) {                        Log.w(this.getClass().getName(), "Успешно Добавлено Сотрудника ЧЕРЕЗ ПОСИК"+o  );                  /*      Toast aa = Toast.makeText(getApplicationContext(), "OPEN",Toast.LENGTH_SHORT);                        ImageView cc = new ImageView(getApplicationContext());                   //     cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_success);//icon_dsu1_synchronisazia_dsu1_success                        aa.setView(cc);                        aa.show();*/               /*             if(PUBLIC_CONTENT.Отладка==true) {                                ///TODO сообщаем об успешном создаении данных                                СообщениеСообщаетОСоздаенииНовогоСотрудника("Созданный Шаблон", "Успешное создание Шаблона (с сотрудниками.)"                                        + "\n" + " название: " + НаписаниеИмяНовгоШаблона, true);*/                        ///TODO после успешной встаки удаляем                        ХэшФИОВсеДляПосика.clear();                        ЛистСДаннымиФИО.invalidate();                        ЛистСДаннымиФИО.deferNotifyDataSetChanged();                        /////TODO обнуляем статические переменееык перерд каждым созданеим нового табеля                     ///   Курсор_ПолучаемВсюТаюлицуФИОДляПосикаШаблон.close();                        // TODO: 26.03.2021 ДОПОЛНИТЕЛЬНО ОБНУЛЯЕМ ВСЕ ТАБЕЛЯ С NULL В ФИО ЧТО БЫ ОБМЕН НЕ РУГАЛЬСЯ                        ///TODO ДАННЫЙ МЕТОД ЗАПУСКАЕТ СИНХРОНИЗАИЮ В ФОНОВОМ ПОТОКЕ БЕЗ ВИЗУАЛЬНОЙ ЧАСТИ ПОЛЬЗОВАТЛЮ НИЧЕГО НЕ ПОКАЗЫВАЕТ ДвижокОбменаДаннымиОфлайнсОнлайном, когда приложение уходит с перерднего края                        ///TODO ДАННЫЙ МЕТОД ЗАПУСКАЕТ СИНХРОНИЗАИЮ В ФОНОВОМ ПОТОКЕ БЕЗ ВИЗУАЛЬНОЙ ЧАСТИ ПОЛЬЗОВАТЛЮ НИЧЕГО НЕ ПОКАЗЫВАЕТ ДвижокОбменаДаннымиОфлайнсОнлайном, когда приложение уходит с перерднего края                        ///////TODO ТУТ ЗАПУСКАЕМ СИНХРОНИЗАЦИЮ В  ФОНЕ КОТОРАЯ НАХОДИТЬСЯ ЗАПУСКАЮЩИЙ МЕТОД В АКТИВИТИ  MainActivity_Tabel_Only_Single_Employee() СОТРУДНИКИ                        //////try{                                МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти();                    } catch (Exception e) {                        e.printStackTrace();                        ///метод запись ошибок в таблицу                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                        ////todo ошибка не встановы новый сотрудник                    }else{                        Log.e(this.getClass().getName(), "Ошибка  новый сотрудник не вставилься" );                        ///TODO сообщаем об успешном создаении данных                       /* Toast aa = Toast.makeText(getApplicationContext(), "OPEN",Toast.LENGTH_SHORT);                        ImageView cc = new ImageView(getApplicationContext());                        cc.setImageResource(R.drawable.icon_dsu1_add_organisazio_error);//icon_dsu1_synchronisazia_dsu1_success                        aa.setView(cc);                        aa.show();*/                        ///////                     /////   СообщениеСообщаетОСоздаенииНовогоСотрудника("Табель", "Не был создан сотрудник/ки", false);//МетодаКоторыйПослеУспешнойВставкиЗапускаетТАбельсНовымСотрудниковм();try{                        МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти();                    } catch (Exception e) {                        e.printStackTrace();                        ///метод запись ошибок в таблицу                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                    }                    ////                }                //todo UI                @Override                protected void onProgressUpdate(Object[] values) {                    super.onProgressUpdate(values);                    Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа");                    if ( ХэшФИОВсеДляПосика.size()>0){                        Integer Значения= (Integer) values[0];                        progressDialog.setIndeterminate(false);                        //progressDialog.incrementProgressBy(50);                        //progressDialog.incrementSecondaryProgressBy(75);                        progressDialog.setProgress( Значения);                        progressDialog.setMessage("Добавление..."+Значения+" из: ("+ХэшФИОВсеДляПосика.size()+")");                    }                }            }.execute();            ///////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    private  Long МетодОпределенияВставкиУжеСущетсвующийШаблонСотрудников(Long UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника,String ФИОДляВставки) {        Long РезультатВставкиСотрудниковУжеСозданныйШаблон= 0l;        try {            ////todo месяц и год нового сотрудника            Class_MODEL_synchronized classModel_synchronizedОпервцииДОбавленияДанныхСотрудникавШаблон = new Class_MODEL_synchronized(КонтекстДляАктивтиПосикаШаблонов);            //            String ПоученыйУжеСущетсвующийСЦО = null;            String ПоученыйУжеСущетсвующийПерартмет = null;            ПоученыйУжеСущетсвующийЭлектронноеИмяТабеля = null;            //TODO СОЗДАНИЕ СОТРУДНИКА В ТАБЕЛЬ            final Cursor[] Курсор_ИщетВВидеТабеляНазваниеТабеляЦФОИПлюсдерпартмает = {null};            ContentValues АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template = new ContentValues();////контрейнер для нового табеля            /////            //            String ДатаПриВыбореСотрудникаВставка = null;            // TODO: 11.03.2021 //Fio_Template            ///TODO сами данные таблица TABEL вставка            ////TODO ДАТА            // TODO: 24.03.2021 ЕслиВубличногоНЕтТоНАходим ЕГо            Integer ПубличноеIDПолученныйИзСервлетаДляUUID = 0;            Class_GRUD_SQL_Operations class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике;//            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике = new Class_GRUD_SQL_Operations(getApplicationContext());            // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ            ///            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы", "SuccessLogin");            ///////            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки", "id");            //            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика", "id IS NOT NULL ");            ///"_id > ?   AND _id< ?"            //////              /*      class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",finalПолученныйUUID);                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/            ////TODO другие поля            ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);            ////            //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);            ////            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки", "date_update DESC ");            ////            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита", "1");            ////            // TODO: 12.10.2021  Ссылка Менеджер Потоков            PUBLIC_CONTENT Class_Engine_SQLГдеНаходитьсяМенеджерПотоков = new PUBLIC_CONTENT(getApplicationContext());            // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ            SQLiteCursor Курсор_ИщемПУбличныйIDКогдаегоНетВстатике = null;            //////            Курсор_ИщемПУбличныйIDКогдаегоНетВстатике = (SQLiteCursor) class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.                    new GetData(getApplicationContext()).getdata(class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков                            .МенеджерПотоков, Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            Log.d(this.getClass().getName(), "GetData " + Курсор_ИщемПУбличныйIDКогдаегоНетВстатике);            // TODO: 07.09.2021  _old             /*   Курсор_ИщемПУбличныйIDКогдаегоНетВстатике =                        new Class_MODEL_synchronized(getApplicationContext()).КурсорУниверсальныйДляБазыДанных("SuccessLogin",                                new String[]{"id"}, " id IS NOT NULL", null, null, null, "date_update DESC", "1");//*/            // TODO: 07.09.2021  результат            if (Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.getCount() > 0) {                ////////////                Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.moveToFirst();                ////                Log.d(this.getClass().getName(), " Курсор_ИщемПУбличныйIDКогдаегоНетВстатике " + Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.getCount());                ПубличноеIDПолученныйИзСервлетаДляUUID = Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.getInt(0);            }            Log.d(this.getClass().getName(), "   ПубличноеIDПолученныйИзСервлетаДляUUID " + ПубличноеIDПолученныйИзСервлетаДляUUID);            АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template.putNull("id");            АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template.put("user_update", ПубличноеIDПолученныйИзСервлетаДляUUID);            АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template.put("fio_uuid", UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника);            ////todo создаение UUID            ////todo создаение UUID            Long СгенерированованныйUUIDТОлькоДляСотрудниковПриВторомДействииЗаполенияУжеДействуещегоШаблона =                    (Long) new Class_Generation_UUID(getApplicationContext()).МетодГенерацииUUID(getApplicationContext());            ///            ///            Log.d(this.getClass().getName(), "  СгенерированованныйUUIDТОлькоДляСотрудниковПриВторомДействииЗаполенияУжеДействуещегоШаблона "                    + СгенерированованныйUUIDТОлькоДляСотрудниковПриВторомДействииЗаполенияУжеДействуещегоШаблона);            АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template.put("uuid",                    СгенерированованныйUUIDТОлькоДляСотрудниковПриВторомДействииЗаполенияУжеДействуещегоШаблона);                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template.put("fio_template", СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels);            // TODO: 11.03.2021 //таблица fio tample ВТОАРЯ ОПЕРЦИЯ            Long РезультатУвеличинаяВерсияДАныхЧата=0L;            РезультатУвеличинаяВерсияДАныхЧата=         class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике. new ChangesVesionData(getApplicationContext()).                    МетодПолученияУвеличинойВесрииДанныхДляТекущейВнутренейтаблицы_ПоПолю_current_table_ПоПолю_current_table(                            "Fio_Template",                            "localversionandroid_version",                            getApplicationContext(),                            Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            //TODO  конец курант ча            //////            АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template.put("current_table", РезультатУвеличинаяВерсияДАныхЧата);            ///            Log.w(this.getClass().getName(), "  РезультатУвеличинаяВерсияДАныхЧата "                    + РезультатУвеличинаяВерсияДАныхЧата);            //////            String СгенерированованныйДатаДляДаннойОперации = new Class_Generation_Data(getApplicationContext()).ГлавнаяДатаИВремяОперацийСБазойДанных();            //////            АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template.put("date_update", СгенерированованныйДатаДляДаннойОперации);            ///            Log.d(this.getClass().getName(), "  СгенерированованныйДатаДляДаннойОперации " + СгенерированованныйДатаДляДаннойОперации);            // TODO: 11.03.2021 //таблица fio tample ВТОАРЯ ОПЕРЦИЯ// TODO: 25.10.2021  ВТОРОЕ ДЕЙСТИЕ ЗАПОЛЯНЕМ УЖЕ ВО ВТОРУЮ ЬАБЛИЦУ ВЫБРАННЫХ СОТРУЛДНИКОВ В ШАБЛОН             РезультатВставкиСотрудниковУжеСозданныйШаблон = classModel_synchronizedОпервцииДОбавленияДанныхСотрудникавШаблон.                    ВставкаДанныхЧерезКонтейнерТолькоПриСозданииНовогоСотрудникаУниверсальная("Fio_Template",                            АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template, "Fio_Template", "");//////TODO когда true -это значет применяеться только не вобмене  и говорит что плюс записываем изменению версии джанных            /////            //////////////////////////////////            Log.d(this.getClass().getName(), " РезультатВставкиПодобраногоСотрудковВШаблонеTemplates" + РезультатВставкиСотрудниковУжеСозданныйШаблон );            /////        if (РезультатВставкиСотрудниковУжеСозданныйШаблон > 0) {            /////////////////////////////////            Log.d(this.getClass().getName(), "\n" + "  РезультатВставкиСотрудниковУжеСозданныйШаблон  " + РезультатВставкиСотрудниковУжеСозданныйШаблон);            /////        }            //////TODO ПОСЛЕ УСПЕШНОЙ ВСТВКИ ВЫБАРНЫХ СОТРУДНИКА МЕНЯЕМ ВЕРСИЮ ДАННЫХ ДАТЫ НА УКАЗАНОЙ ТАБЛИЦЕ        } catch (Exception e) {            e.fillInStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return РезультатВставкиСотрудниковУжеСозданныйШаблон;    }    private  Long МетодОпределенияВставкиyнАКИДЫВАЕМуЖЕвСУЩЕСТВУЮЩИЙШаблонСотрудников(Long UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника,String ФИОДляВставки) {        Long РезультатВставкиСотрудниковУжеСозданныйШаблон= 0l;        try {            ContentValues АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоОбновление = new ContentValues();////контрейнер для нового табеля            ////todo месяц и год нового сотрудника            Class_MODEL_synchronized classModel_synchronizedОпервцииДОбавленияДанныхСотрудникавШаблон = new Class_MODEL_synchronized(КонтекстДляАктивтиПосикаШаблонов);            //            String ПоученыйУжеСущетсвующийСЦО = null;            String ПоученыйУжеСущетсвующийПерартмет = null;            ПоученыйУжеСущетсвующийЭлектронноеИмяТабеля = null;            //TODO СОЗДАНИЕ СОТРУДНИКА В ТАБЕЛЬ            final Cursor[] Курсор_ИщетВВидеТабеляНазваниеТабеляЦФОИПлюсдерпартмает = {null};            ContentValues АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template = new ContentValues();////контрейнер для нового табеля            /////            //            String ДатаПриВыбореСотрудникаВставка = null;            // TODO: 11.03.2021 //Fio_Template            ///TODO сами данные таблица TABEL вставка            ////TODO ДАТА            // TODO: 24.03.2021 ЕслиВубличногоНЕтТоНАходим ЕГо            Integer ПубличноеIDПолученныйИзСервлетаДляUUID = 0;            Class_GRUD_SQL_Operations class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике;//            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике = new Class_GRUD_SQL_Operations(getApplicationContext());            // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ            ///            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы", "SuccessLogin");            ///////            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки", "id");            //            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика", "id IS NOT NULL ");            ///"_id > ?   AND _id< ?"            //////              /*      class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",finalПолученныйUUID);                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/            ////TODO другие поля            ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);            ////            //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);            ////            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки", "date_update DESC ");            ////            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита", "1");            ////            // TODO: 12.10.2021  Ссылка Менеджер Потоков            PUBLIC_CONTENT Class_Engine_SQLГдеНаходитьсяМенеджерПотоков = new PUBLIC_CONTENT(getApplicationContext());            // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ            SQLiteCursor Курсор_ИщемПУбличныйIDКогдаегоНетВстатике = null;            //////            Курсор_ИщемПУбличныйIDКогдаегоНетВстатике = (SQLiteCursor) class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.                    new GetData(getApplicationContext()).getdata(class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков                            .МенеджерПотоков, Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            Log.d(this.getClass().getName(), "GetData " + Курсор_ИщемПУбличныйIDКогдаегоНетВстатике);            // TODO: 07.09.2021  _old             /*   Курсор_ИщемПУбличныйIDКогдаегоНетВстатике =                        new Class_MODEL_synchronized(getApplicationContext()).КурсорУниверсальныйДляБазыДанных("SuccessLogin",                                new String[]{"id"}, " id IS NOT NULL", null, null, null, "date_update DESC", "1");//*/            // TODO: 07.09.2021  результат            if (Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.getCount() > 0) {                ////////////                Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.moveToFirst();                ////                Log.d(this.getClass().getName(), " Курсор_ИщемПУбличныйIDКогдаегоНетВстатике " + Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.getCount());                ПубличноеIDПолученныйИзСервлетаДляUUID = Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.getInt(0);            }            Log.d(this.getClass().getName(), "   ПубличноеIDПолученныйИзСервлетаДляUUID " + ПубличноеIDПолученныйИзСервлетаДляUUID);            АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template.putNull("id");            АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template.put("user_update", ПубличноеIDПолученныйИзСервлетаДляUUID);            АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template.put("fio_uuid", UUIDДанныйПришелПослеВЫбораУжеСуществующегоСотрудника);            ////todo создаение UUID            ////todo создаение UUID            Long СгенерированованныйUUIDТОлькоДляСотрудниковПриВторомДействииЗаполенияУжеДействуещегоШаблона =                    (Long) new Class_Generation_UUID(getApplicationContext()).МетодГенерацииUUID(getApplicationContext());            ///            ///            Log.d(this.getClass().getName(), "  СгенерированованныйUUIDТОлькоДляСотрудниковПриВторомДействииЗаполенияУжеДействуещегоШаблона " + СгенерированованныйUUIDТОлькоДляСотрудниковПриВторомДействииЗаполенияУжеДействуещегоШаблона);            АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template.put("uuid",                    СгенерированованныйUUIDТОлькоДляСотрудниковПриВторомДействииЗаполенияУжеДействуещегоШаблона);                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template.put("fio_template", ПередаваемыйИзКнопкиПолучаемUUIDТабеля);            //////            String СгенерированованныйДатаДляДаннойОперации = new Class_Generation_Data(getApplicationContext()).ГлавнаяДатаИВремяОперацийСБазойДанных();            //////            АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template.put("date_update", СгенерированованныйДатаДляДаннойОперации);            ///            Log.d(this.getClass().getName(), "  СгенерированованныйДатаДляДаннойОперации " + СгенерированованныйДатаДляДаннойОперации);            // TODO: 11.03.2021 //таблица fio tample ВТОАРЯ ОПЕРЦИЯ            Long РезультатУвеличинаяВерсияДАныхЧата=0L;            РезультатУвеличинаяВерсияДАныхЧата=         class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике. new ChangesVesionData(getApplicationContext()).                    МетодПолученияУвеличинойВесрииДанныхДляТекущейВнутренейтаблицы_ПоПолю_current_table_ПоПолю_current_table(                            "Fio_Template",                            "localversionandroid_version",                            getApplicationContext(),                            Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            //TODO  конец курант ча            //////            АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template.put("current_table", РезультатУвеличинаяВерсияДАныхЧата);            Log.d(this.getClass().getName()," current_table УВЕЛИЧИВАЕМ ВЕРИСЮ ДАННЫХ ВНУТРИ ТАБЛИЦЫ  РезультатУвеличинаяВерсияДАныхЧата  " +РезультатУвеличинаяВерсияДАныхЧата );// TODO: 25.10.2021  ВТОРОЕ ДЕЙСТИЕ ЗАПОЛЯНЕМ УЖЕ ВО ВТОРУЮ ЬАБЛИЦУ ВЫБРАННЫХ СОТРУЛДНИКОВ В ШАБЛОН            РезультатВставкиСотрудниковУжеСозданныйШаблон = classModel_synchronizedОпервцииДОбавленияДанныхСотрудникавШаблон.                    ВставкаДанныхЧерезКонтейнерТолькоПриСозданииНовогоСотрудникаУниверсальная("Fio_Template",                            АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаFio_Template, "Fio_Template", "");//////TODO когда true -это значет применяеться только не вобмене  и говорит что плюс записываем изменению версии джанных            /////            //////////////////////////////////            Log.d(this.getClass().getName(), " РезультатВставкиПодобраногоСотрудковВШаблонеTemplates" + РезультатВставкиСотрудниковУжеСозданныйШаблон );            /////            if (РезультатВставкиСотрудниковУжеСозданныйШаблон > 0) {                /////////////////////////////////                Log.d(this.getClass().getName(), "\n" + "  РезультатВставкиСотрудниковУжеСозданныйШаблон  " + РезультатВставкиСотрудниковУжеСозданныйШаблон);                /////            // TODO: 01.07.2021  после локальной обнолвения поробуем вотрунть синхронизацию локальную  в фоне и порстмортрим что будет            Class_GRUD_SQL_Operations  classGrudSqlOperationsПовышаемВерсиюДАнныхПриЛокальноОбновлениеииДанныхВнутриТабеля;            // TODO: 30.08.2021    КОД ОБНОВЛЕНИЕ   ДАННЫХ   ЧЕРЕЗ            //////            classGrudSqlOperationsПовышаемВерсиюДАнныхПриЛокальноОбновлениеииДанныхВнутриТабеля=new Class_GRUD_SQL_Operations(getApplicationContext());            classGrudSqlOperationsПовышаемВерсиюДАнныхПриЛокальноОбновлениеииДанныхВнутриТабеля.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","Fio_Template");            ///            classGrudSqlOperationsПовышаемВерсиюДАнныхПриЛокальноОбновлениеииДанныхВнутриТабеля.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФлагТипИзменениеВерсииДанныхЛокальнаяСервернаяИлиОба","Локальное");///  "ЛокальныйСерверныйОба"    ПОСЛЕ КАК ПРИШЛИ ВНЕШНИЕ ДАННЫЕ            ///            ///            classGrudSqlOperationsПовышаемВерсиюДАнныхПриЛокальноОбновлениеииДанныхВнутриТабеля.                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put(" " +                    "ПередоваемоеЗначенияДляТаблицы_MODIFITATION_Client_КотороеНадоЗаписать",РезультатУвеличинаяВерсияДАныхЧата);///  "ЛокальныйСерверныйОба"    ПОСЛЕ КАК ПРИШЛИ ВНЕШНИЕ ДАННЫЕ            ///            ///TODO РЕЗУЛЬТА изменения версии данных            Integer        Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы=                    (Integer)  classGrudSqlOperationsПовышаемВерсиюДАнныхПриЛокальноОбновлениеииДанныхВнутриТабеля.                            new ChangesVesionData(getApplicationContext()).                            changesvesiondata(classGrudSqlOperationsПовышаемВерсиюДАнныхПриЛокальноОбновлениеииДанныхВнутриТабеля.                                            concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков                                    ,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());//            Log.d(getApplicationContext().getClass().getName(), "Результат_ПриписиИзменнийВерсииДанныхВФонеПриСменеОрганизации "                    +Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы );            ////            //////TODO ПОСЛЕ УСПЕШНОЙ ВСТВКИ ВЫБАРНЫХ СОТРУДНИКА МЕНЯЕМ ВЕРСИЮ ДАННЫХ ДАТЫ НА УКАЗАНОЙ ТАБЛИЦЕ            }        } catch (Exception e) {            e.fillInStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return РезультатВставкиСотрудниковУжеСозданныйШаблон;    }    private  Long МетодОпределенияВставкиТолькоШаблонаБезСотрудников() {        Long РезультатВставкиПодобраногоПервоеДействиеСотрудковВШаблонеTemplates=0l;            try {            ContentValues АдаптерДляСозданиеНовогоСотрудаТАблицаТабельТолькоОбновление = new ContentValues();////контрейнер для нового табеля            ////todo месяц и год нового сотрудника            Class_MODEL_synchronized classModel_synchronizedОпервцииДОбавленияДанныхСотрудникавШаблон = new Class_MODEL_synchronized(КонтекстДляАктивтиПосикаШаблонов);            //            String ПоученыйУжеСущетсвующийСЦО = null;            String ПоученыйУжеСущетсвующийПерартмет = null;            ПоученыйУжеСущетсвующийЭлектронноеИмяТабеля = null;            //TODO СОЗДАНИЕ СОТРУДНИКА В ТАБЕЛЬ            final Cursor[] Курсор_ИщетВВидеТабеляНазваниеТабеляЦФОИПлюсдерпартмает = {null};            /////TODO КОД ЧИСТА ВСТАВКИ НОВОГО ТАБЕЛЯ И В НЕГО ОВГО СОТРУЖНИКА            ///TODO ТАБЛИЦА ТАБЕЛЬ ТОЛЬКО ВВСТАВКА ТАБЕЛЬ            /////            ContentValues АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates = new ContentValues();////контрейнер для нового табеля            ////            //            String ДатаПриВыбореСотрудникаВставка = null;            // TODO: 24.03.2021 ЕслиВубличногоНЕтТоНАходим ЕГо            Integer   ПубличноеIDПолученныйИзСервлетаДляUUID=0;            Class_GRUD_SQL_Operations class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике;//            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике=new Class_GRUD_SQL_Operations(getApplicationContext());            // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ            ///            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","SuccessLogin");            ///////            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","id");            //            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","id IS NOT NULL ");            ///"_id > ?   AND _id< ?"            //////              /*      class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",finalПолученныйUUID);                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/            ////TODO другие поля            ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);            ////            //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);            ////            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update DESC ");            ////            class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");            ////            // TODO: 12.10.2021  Ссылка Менеджер Потоков            PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());            // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ            SQLiteCursor Курсор_ИщемПУбличныйIDКогдаегоНетВстатике = null;            //////            Курсор_ИщемПУбличныйIDКогдаегоНетВстатике= (SQLiteCursor)  class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике.                    new GetData(getApplicationContext()).getdata(class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков                            .МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());            Log.d(this.getClass().getName(), "GetData "+Курсор_ИщемПУбличныйIDКогдаегоНетВстатике  );            // TODO: 07.09.2021  _old            // TODO: 07.09.2021  результат            if (Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.getCount() > 0) {                ////////////                Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.moveToFirst();                ////                Log.d(this.getClass().getName(), " Курсор_ИщемПУбличныйIDКогдаегоНетВстатике " + Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.getCount());                ПубличноеIDПолученныйИзСервлетаДляUUID = Курсор_ИщемПУбличныйIDКогдаегоНетВстатике.getInt(0);            }            Log.d(this.getClass().getName(), "   ПубличноеIDПолученныйИзСервлетаДляUUID " + ПубличноеIDПолученныйИзСервлетаДляUUID);//////            // TODO: 11.03.2021 // Templates            if (ПередаваемыйИзКнопкиПолучаемUUIDТабеля == 0) {                ///TODO сами данные таблица TABEL вставка                //////                String   СгенерированованныйДатаПриСозданиииШаблона=     new Class_Generation_Data(getApplicationContext()).ГлавнаяДатаИВремяОперацийСБазойДанных();                ////                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates.put("date_update", СгенерированованныйДатаПриСозданиииШаблона);                Log.d(this.getClass().getName(), " СгенерированованныйДатаПриСозданиииШаблона " +СгенерированованныйДатаПриСозданиииШаблона);                Log.d(this.getClass().getName(), "  PUBLIC_CONTENT.ПубличноеIDПолученныйИзСервлетаДляUUID" +ПубличноеIDПолученныйИзСервлетаДляUUID + " ПубличноеIDПолученныйИзСервлетаДляUUID" + ПубличноеIDПолученныйИзСервлетаДляUUID);                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates.put("user_update", ПубличноеIDПолученныйИзСервлетаДляUUID);                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates.put("name_templates", НаписаниеИмяНовгоШаблона);                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates.put("status_send", " ");                // TODO: 24.10.2021                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates.putNull("id");                // TODO: 25.10.2021                СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels=0l;                СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels=   (Long)  new Class_Generation_UUID(getApplicationContext()).МетодГенерацииUUID(getApplicationContext());                Log.d(this.getClass().getName(), " СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels " + СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels);                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates.put("uuid", СгенерированованныйUUIDДляОбоихТаблициTemplesИFio_Tempels);                Long РезультатУвеличинаяВерсияДАныхЧата=0L;                РезультатУвеличинаяВерсияДАныхЧата=         class_grud_sql_operationsИщемПУбличныйIDКогдаегоНетВстатике. new ChangesVesionData(getApplicationContext())                        .МетодПолученияУвеличинойВесрииДанныхДляТекущейВнутренейтаблицы_ПоПолю_current_table_ПоПолю_current_table(                                "Templates",                                "localversionandroid_version"                                ,getApplicationContext()                                ,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                //TODO  конец курант ча                //////                АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates.put("current_table", РезультатУвеличинаяВерсияДАныхЧата);                // TODO: 26.03.2021 первая часть первая таблица                ////////todo подобранный СОТРУДНИК ДЛЯ ТАБЕЛЯ ИЗ АКТИВИТИ ПОСИК СОТРУДНИКА                try {                    // TODO: 11.03.2021 //таблица fio tample ПЕРВАЯ ОПЕРЦИЯ  ВСТАВЛЯЕМ САМ НОЫЙ ШАБЛОН TEMPLES                    РезультатВставкиПодобраногоПервоеДействиеСотрудковВШаблонеTemplates = classModel_synchronizedОпервцииДОбавленияДанныхСотрудникавШаблон.                            ВставкаДанныхЧерезКонтейнерТолькоПриСозданииНовогоСотрудникаУниверсальная("Templates",                                    АдаптерДляСозданиеНовогоСотрудаТАблицаШаблонТолькоВставкаTemplates, "Templates", "");//////TODO когда true -это значет применяеться только не вобмене  и говорит что плюс записываем изменению версии джанных                    /////                    //////////////////////////////////                    Log.d(this.getClass().getName(), " РезультатВставкиПодобраногоПервоеДействиеСотрудковВШаблонеTemplates"                            + РезультатВставкиПодобраногоПервоеДействиеСотрудковВШаблонеTemplates);                    //                    //TODO повышаем верисю для шабдлон                    // TODO: 01.07.2021  после локальной обнолвения поробуем вотрунть синхронизацию локальную  в фоне и порстмортрим что будет/*                    if (РезультатВставкиПодобраногоПервоеДействиеСотрудковВШаблонеTemplates>0) {                        Class_GRUD_SQL_Operations  classGrudSqlOperationsПовышаемВерсиюДАнныхПриЛокальноОбновлениеииДанныхВнутриТабеля;                        // TODO: 30.08.2021    КОД ОБНОВЛЕНИЕ   ДАННЫХ   ЧЕРЕЗ                        //////                        classGrudSqlOperationsПовышаемВерсиюДАнныхПриЛокальноОбновлениеииДанныхВнутриТабеля=new Class_GRUD_SQL_Operations(getApplicationContext());                        classGrudSqlOperationsПовышаемВерсиюДАнныхПриЛокальноОбновлениеииДанныхВнутриТабеля.                                concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","Templates");                        ///                        classGrudSqlOperationsПовышаемВерсиюДАнныхПриЛокальноОбновлениеииДанныхВнутриТабеля.                                concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФлагТипИзменениеВерсииДанныхЛокальнаяСервернаяИлиОба","Локальное");///  "ЛокальныйСерверныйОба"    ПОСЛЕ КАК ПРИШЛИ ВНЕШНИЕ ДАННЫЕ                        ///                        ///                        classGrudSqlOperationsПовышаемВерсиюДАнныхПриЛокальноОбновлениеииДанныхВнутриТабеля.                                concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put(" " +                                "ПередоваемоеЗначенияДляТаблицы_MODIFITATION_Client_КотороеНадоЗаписать",РезультатУвеличинаяВерсияДАныхЧата);///  "ЛокальныйСерверныйОба"    ПОСЛЕ КАК ПРИШЛИ ВНЕШНИЕ ДАННЫЕ                        ///                        ///TODO РЕЗУЛЬТА изменения версии данных                        Integer        Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы=                                (Integer)  classGrudSqlOperationsПовышаемВерсиюДАнныхПриЛокальноОбновлениеииДанныхВнутриТабеля.                                        new ChangesVesionData(getApplicationContext()).                                        changesvesiondata(classGrudSqlOperationsПовышаемВерсиюДАнныхПриЛокальноОбновлениеииДанныхВнутриТабеля.                                                        concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                                                Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков                                                ,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());//                        Log.d(getApplicationContext().getClass().getName(), "Результат_ПриписиИзменнийВерсииДанныхВФонеПриСменеОрганизации "                                +Результат_ПриписиИзменнийВерсииДанныхВФонеПослеОбработкиТекущийТаблицы );                        ////                    }*/                } catch (Exception e) {                    e.printStackTrace();                    ///метод запись ошибок в таблицу                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                            " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                    new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                }            }        } catch (Exception e) {            e.fillInStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return РезультатВставкиПодобраногоПервоеДействиеСотрудковВШаблонеTemplates;    }    /////todo метод заполения аралилта и хэшмема    private void МетодЗаполенияАрайЛистаИХэшМэпаДляПосикаПоФИО(String ПолученыеФИО, String ПолученныеID, long ПолученныйUUID,String ПолученыеДатаРождения,String ПолученыеСНИЛС) {        try{            /////TODO НЕ ПОСТРДВСТВЕНО ЗАПОЛЯНЕМ LISTVIEW  ДАННЫМИ            АрайЛИстФИОВсеДляПосика.add(ПолученыеФИО );            Log.d(this.getClass().getName(), "  АрайЛИстФИОВсеДляПосика.size() " + АрайЛИстФИОВсеДляПосика.size() + " АрайЛИстФИОВсеДляМетокТабеля " +  АрайЛИстФИОВсеДляПосика.toString()+                    "  ПолученныйUUID  " +ПолученныйUUID);            /////todo заполения TAG uuid меток табеля            ЛистСДаннымиФИО.setTag(String.valueOf(ПолученныйUUID));        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());               new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO КОД СЛУШАТЕЛЬ ПРИ НАЖАТИИ НА ТАБЕЛЬ Создаем экземпляр TextWatcher:    private final TextWatcher СлушательПолученияДанных = new TextWatcher() {        public void beforeTextChanged (CharSequence s,int start, int count, int after){            Log.d(this.getClass().getName(), "  beforeTextChanged  " + s.toString());            String ЗначениевПоискеФИО = s.toString();        }        public void onTextChanged (CharSequence s,int start, int before, int count){            Log.d(this.getClass().getName(), "  onTextChanged  " + s.toString());        }        //Задаем действия для TextView после смены введенных в EditText символов:        public void afterTextChanged (Editable s){            try {                //TODO ДАННЫЙ КОД НЕПОСТРЕДСТВЕННО ЗАРУСКАЕТ ОБНОВЛЕНИЕ ЛОКАЛЬНОЕ С АКТИВТИИ                Log.d(this.getClass().getName(), "  afterTextChanged " + s.toString());                String СамоЗначениеЯчейкиТабеля = s.toString();                Log.d(this.getClass().getName(), "  СамоЗначениеЯчейкиТабеля" + СамоЗначениеЯчейкиТабеля);                Log.d(this.getClass().getName(), "  СамоЗначениеЯчейкиТабеля" + СамоЗначениеЯчейкиТабеля);                ////TODO запускаем метод ЛОКАЛЬНОГО ОБНОВЛЕНИЕ ПОСЛЕ ПОЛУЧЕННЫХ ДАННЫХ                МетодПолучениеДанныхИзБазыДляДляЗаполениеСотрудниковДЛяШаблонаЧкерезПоиск(СамоЗначениеЯчейкиТабеля); // TODO ПОСИК С LIKE                /////            } catch (Exception e) {                e.printStackTrace();                ///метод запись ошибок в таблицу                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                   new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            } finally {            }        }    };    // TODO  конец КОД СЛУШАТЕЛЬ ПРИ НАЖАТИИ НА ТАБЕЛЬ Создаем экземпляр TextWatcher:    //TODO метод получени месяа для записи в одну колонку    private int МетодПолучениниеМесяцПриСозданииНовогоСОтрудника(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        int month = 0;        try{            System.out.println(" " + ДатаКоторуюНадоПеревестиИзТекставЦифру + " " + ДатаКоторуюНадоПеревестиИзТекставЦифру);            SimpleDateFormat formatмесяц = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));            // formatмесяц.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));            formatмесяц.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));            Date date = formatмесяц.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру);            GregorianCalendar calendar = (GregorianCalendar) GregorianCalendar.getInstance(new Locale("ru"));            calendar.setTime(date);            /////TODO ОБРАБАТЫВАЕМ ДАННЫЕ ДАТЫ ЯНВАРЬ            if (ДатаКоторуюНадоПеревестиИзТекставЦифру.matches("(.*)Январь(.*)")) {                month = calendar.get(Calendar.MONTH)+1;            } else                month = calendar.get(Calendar.MONTH) + 1;            ///////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());               new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return month;    }    //TODO метод получени месяа для записи в одну колонку    private int МетодПолучениниеГОдПриСозданииНовогоСОтрудника(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        int year= 0;        try{            System.out.println("ДатаКоторуюНадоПеревестиИзТекставЦифру " + ДатаКоторуюНадоПеревестиИзТекставЦифру);            SimpleDateFormat formatгод = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));            // formatгод.setTimeZone(TimeZone.getTimeZone("UTC-03:00"));            formatгод.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));            Date date = formatгод.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру);            Calendar calendar = Calendar.getInstance(new Locale("ru"));            calendar.setTime(date);            if (ДатаКоторуюНадоПеревестиИзТекставЦифру.matches("(.*)Январь(.*)")) {                year = calendar.get(Calendar.YEAR);            } else                year = calendar.get(Calendar.YEAR);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());               new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return year;    }    //функция получающая время операции ДАННАЯ ФУНКЦИЯ ВРЕМЯ ПРИМЕНЯЕТЬСЯ ВО ВСЕЙ ПРОГРАММЕ    ///todo сообщение на активти создание новго сотрудника спрашиваем нужно ли создать    ///todo сообщение    @UiThread    protected void СообщениеСообщаетОСоздаенииНовогоСотрудника(String ШабкаДиалога,  String СообщениеДиалога,                                                               boolean статус ) {        ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ        int ФлагЗнака;        if (статус) {            ФлагЗнака = R.drawable.icon_dsu1_new_customer_success;//icon_dsu1_new_customer7        } else {            ФлагЗнака = R.drawable.icon_dsu1_new_customer_error;        }        try {//////сам вид            final AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)                    .setTitle(ШабкаДиалога)                    .setMessage(СообщениеДиалога)                    .setPositiveButton("ОК", null)                    .setIcon(ФлагЗнака)                    .show();/////////кнопка            final Button MessageBoxUpdateСоздатьТабель = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);            MessageBoxUpdateСоздатьТабель.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                    Log.d(this.getClass().getName(), "  ФИНАЛ создание нового сотрудника ");                    if (статус) {                        //TODO после успешной вставки нового сотрудника  в табель обнуляем переменные///TODO метод запуска формы после вставки                        ///todo ПОСЛЕ ЦИКЛА ОБНУЛЯЕМ ХЭШ                        //МетодаКоторыйПослеУспешнойВставкиЗапускаетТАбельсНовымСотрудниковм();                        try{                        МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти();                    } catch (Exception e) {                        e.printStackTrace();                        ///метод запись ошибок в таблицу                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                    }                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());               new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///todo финалный метод еотровый другому активти посылает данные    private void МетодФинальныйКоторыйОтправлетДванныеДругомуАктивти() {        try{            Intent Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки = new Intent();            ///////////            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.setClass(getApplication(), MainActivity_New_Templates_Tabels.class); // Т            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ДепартаментТабеляПослеПодбора", ДепартаментТабеляФинал);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляПослеПодбора", UUIDТабеляФинал);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляПослеПодбораУниверсальный", UUIDТабеляФинал);            // TODO: 22.09.2021  clear operasion            Log.d(this.getClass().getName(), "  UUIDТабеляФинал UUIDТабеляФинал  " + UUIDТабеляФинал);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("РодительскийUUDТаблицыТабель", UUIDТабеляФинал);            ///TODO ОПИСАНИЕ ЧТО ПЕРЕДАЕМ            Log.d(  this.getClass().getName(), " UUIDТабеляФинал" +UUIDТабеляФинал);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("МесяцТабеляПослеПодбора", МесяцТабеляФинал);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ПолноеНазваниеЗагруженногТАбеляПослеПодбора",ДепартаментТабеляФинал);            //год и месяц цифр            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("МЕсяцДляКурсораТабелейПослеПодбора", МЕсяцПриВставкеНовогоСотрудника);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ГодДляКурсораТабелейПослеПодбора",ГодПриВставкеНовогоСотрудника);            //todo передает контент при нажатии на кнопку back            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляКнопкаBACKУниверсальный", UUIDТабеляФинал);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ПоученыйУжеСущетсвующийЭлектронноеИмяТабеля);", ПоученыйУжеСущетсвующийЭлектронноеИмяТабеля);            ///TODO цифровоеимя табеля            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ЦифровоеИмяНовгоТабеля", ЦифровоеИмяНовгоТабеля);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ПолноеИмяТабеляПослеСозданиеНовогоСотрудника", ПолноеНазваниеЗагруженногТАбеля);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("МесяцТабеляФинал", МесяцТабеляФинал);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ПолученнаяUUIDНазванияОрганизации",    ПолученнаяUUIDНазванияОрганизации);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ЗапускШаблоновFaceAppБлокировкаКнопкиДа",    ЗапускШаблоновFaceAppБлокировкаКнопкиДа);            // TODO: 22.09.2021  clear operasion            Log.d(this.getClass().getName(), "  UUIDТабеляФинал UUIDТабеляФинал  " + UUIDТабеляФинал+  "РодительскийUUDТаблицыТабель " +РодительскийUUDТаблицыТабель);            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляФинал",    РодительскийUUDТаблицыТабель);            ///TODO КОДИТЕЛЬСКИЙ uuid ТАБЕЛЯ В КОТОРОМ ПРОЗВОДЯТ ДЕЙСТВИЯ ВСТАВКИ СОТРУДНИКА            Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("РодительскийUUDТаблицыТабель", РодительскийUUDТаблицыТабель);            ///TODO ОПИСАНИЕ ЧТО ПЕРЕДАЕМ            Log.d(  this.getClass().getName(), " ПолноеНазваниеЗагруженногТАбеля" +ПолноеНазваниеЗагруженногТАбеля                    + "  UUIDТабеляФинал " +UUIDТабеляФинал  + " МесяцТабеляФинал " +МесяцТабеляФинал + " ХэшФИОВсеДляПосика "                    +ХэшФИОВсеДляПосика.toString()+ "  РодительскийUUDТаблицыТабель " +РодительскийUUDТаблицыТабель);////todo запускаем активти            startActivity( Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки);            /////////TODO после как прошла СИНХРОНИЗАЦИЯ В ФОНЕ  ПЕЕРРИСОВЫВАЕМ КОМПОНЕТЫ РОБОЧЕГО СТОЛА//////            finishAfterTransition();//TODO  важно удаляем все т спямати        //  finishAfterTransition();//TODO  важно удаляем все т спямати        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());               new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    protected  View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла;    //TODO адаптер сомостоятельный для GridView    public class СоздаемСвойАдаптерДляГридМюу extends BaseAdapter {        @Override        public int getCount() {            return 0;        }        @Override        public Object getItem(int position) {            return null;        }        @Override        public long getItemId(int position) {            return 0;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            LayoutInflater МеханизмЗагрузкиОдногЛайАутавДругой = getLayoutInflater();            if(convertView ==null){                /*КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла = МеханизмЗагрузкиОдногЛайАутавДругой.inflate(R.layout.activity_main_grid_for_tables_two,//activity_main_find_customer_for_tables // activity_main_grid_for_tables                        ГлавныйКонтейнерТабель, false);*/            }            /*/////TODO ТАБЕЛЬ ФИО создаем textview названия дней понелельник вторик среда четеварг            ///////// todo фио            НазваниеДанныхВТабелеФИО = КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла.findViewById(R.id.КонтейнерКудаЗагружаетьсяФИО);            ПосикДня = Курсор_ЗагружаемТабеляСозданный.getColumnIndex("uuid"); ////TODO СЮДА ПОЛЕ UUID            НазваниеСтолбикаДляЛобкальногоОбноления = Курсор_ЗагружаемТабеляСозданный.getColumnName(ПосикДня);            НазваниеДанныхВТабелеФИО.setTag(Курсор_ЗагружаемТабеляСозданный.getString(ПосикДня));            Log.d(this.getClass().getName(), " UUID пристваем Внутри ФИО  " + Курсор_ЗагружаемТабеляСозданный.getString(ПосикДня));            ////todo УСТАНАВЛИВАЕМ КЛИК НА ФИО            НазваниеДанныхВТабелеФИО.setOnLongClickListener(СлушательУдаланиеСотрудникаИзТабеля);            НазваниеДанныхВТабелеФИО.setOnClickListener(СлушательИнформацияОСотрудника);*/            return convertView;        }    }}