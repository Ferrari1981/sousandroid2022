package com.dsy.dsu;import android.app.Activity;import android.app.Dialog;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.content.pm.ActivityInfo;import android.content.res.Configuration;import android.database.Cursor;import android.database.DataSetObserver;import android.database.sqlite.SQLiteCursor;import android.graphics.Color;import android.graphics.Paint;import android.graphics.Typeface;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.util.Log;import android.util.TypedValue;import android.view.Gravity;import android.view.View;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.CursorAdapter;import android.widget.EditText;import android.widget.ListView;import android.widget.ScrollView;import android.widget.SimpleCursorAdapter;import android.widget.Spinner;import android.widget.TextView;import androidx.annotation.UiThread;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.constraintlayout.widget.ConstraintLayout;import com.dsy.dsu.Business_logic_Only_Class.Class_Engine_SQL;import com.dsy.dsu.Business_logic_Only_Class.Class_GRUD_SQL_Operations;import com.dsy.dsu.Business_logic_Only_Class.Class_Generation_Errors;import com.dsy.dsu.Business_logic_Only_Class.Class_Generations_PUBLIC_CURRENT_ID;import com.dsy.dsu.Business_logic_Only_Class.Class_Search_Changes_Data;import com.dsy.dsu.Business_logic_Only_Class.Class__Generation_Genetal_Tables;import com.dsy.dsu.Code_For_Firebase_AndOneSignal_Здесь_КодДЛяСлужбыУведомленияFirebase.Class_Generation_SendBroadcastReceiver_And_Firebase_OneSignal;import com.google.android.material.dialog.MaterialAlertDialogBuilder;import com.google.android.material.floatingactionbutton.FloatingActionButton;import org.jetbrains.annotations.NotNull;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Collections;import java.util.Date;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.Locale;import java.util.Map;import java.util.concurrent.ExecutionException;import java.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.TimeoutException;import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers;import io.reactivex.rxjava3.core.Completable;import io.reactivex.rxjava3.functions.Action;import io.reactivex.rxjava3.functions.Predicate;import io.reactivex.rxjava3.schedulers.Schedulers;public class MainActivity_List_Employees_Current_Tabel extends AppCompatActivity {    // TODO данные переменные обьявляються на самом активти ТАБЕЛЬ    protected Spinner СпинерТАбельМЕсяцФинал;/////спинеры для создание табеля    protected Spinner СпинерТАбельДепартаментФинал;/////спинеры для создание табеля    protected ScrollView ScrollViewДляВсехСотрудниковТабеля;    boolean РежимыПросмотраДанныхЭкрана;    String МесяцТабеляФинал = "";    String ГодТабеляФинал;    Configuration config;    ArrayList<String> МассивДляВыбораСпинераДаты = new ArrayList<>(); //////АКАРЛИСТ ДЛЯ ПОЛУЧЕНЫЙ НОВЫХ ДАТ    ArrayList<String> МассивДляВыбораВСпинерДепартамент = new ArrayList<>(); //////АКАРЛИСТ ДЛЯ ПОЛУЧЕНЫЙ НОВЫХ ДАТ    String КонтентСпинераНаАктивтиТабель = "";    private String ИмяТабеляФинал = "";    private String ДепартаментТабеляФинал = "";    int ЦифровоеИмяНовгоТабеля=0;    Long ПолученнаяUUIDНазванияОрганизации = 0l;    // String ЦифровоеИмяНовгоТабеля;    String UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя;    TextView НазваниеДанныхВТабелеДниНедели;    TextView НазваниеДанныхВТабелеСНИЛС;    TextView НазваниеДанныхВТабелеФИО;    ///TODO важно здесь созадються самиданные который и отпобрабються в ТАБЕЛЕ    //////TODO ОБРАБОТКА САМИХ ДАННЫХ И УСТАНОВКА КЛИКА    // EditText[] СамиДанныеТабеля= new EditText[31];    EditText СамиДанныеТабеля;    ArrayAdapter<String> ЛистАдаптерДляListViewВсеСотрудникиВТабеле;    int ПосикДня;    String НазваниеСтолбикаДляЛобкальногоОбноления = "";    String НазваниеТабеля = "";    String НазваниеЗагруженногТАбеля = "";    ////    String ДробимДляТабеляГод, ДробимДляТебеляМесяц;    /////TODO записываем в двухм мерный массив данные из табеля    protected View КонтентТабеляКоторыйМыИБудемЗаполнятьВнутриЦикла;    LinkedHashMap<Integer, String> ХЭШНазваниеДнейНедели = new LinkedHashMap<>();    int ПолученыеКоличествоСторочек = 0;    Long   РодительскийUUDТаблицыТабель=0l;    String   ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре;    ///////TODO    CREATE_DATABASE   Create_Database_СсылкаНАБазовыйКласс;    String НазваниеТабеляПослеУспешногоСозданиеСотрудника = "";    String UUIDТабеляПослеУспешногоСозданиеСотрудника = "";    String НазваниеТабеляПришелПослеСоздангоНового = "";    String ДепартаментПришелПослеСоздангоНового = "";    ///после успешной вставки сотрудника    String ПолноеИмяТабеляПослеСозданиеНовогоСотрудника = "";    String ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки = "";    String UUIDТабеляКнопкаBACKУниверсальный;    String МесяцДляЗагрузкиТабелей = "";    String ГодДляЗагрузкиТабелей = "";    String ПубличноеIDЗагрузкиТабелей = "";    int МЕсяцДляКурсораТабелей;    //TODO месяц и год для куросара    int ГодДляКурсораТабелей;    protected Button КнопкаНазад;    protected Button КнопкаЛеваяПередвиженияПоДанным;    protected Button КнопкаПраваяПередвиженияПоДанным;    TextView ОбщееКоличествоВТабелеСотудников;    int КоличествоДнейвЗагружаемойМесяце;    boolean МыУжеВКодеУденияСотрудника = false;    FloatingActionButton КруглаяКнопкаСамТабель;    String ЛимитСоСмещениемДанных = "";    int ИндексДвижениеТабеляСкролл = 0;    int ИндексДвижениеТабеляКнопки = 0;    int ОбщееКоличествоЛюдейВТабелеТекущем;    Map<Object, Object> ХэшЛовимUUIDIDНазваниеСтолбика;    String ПолучениеЗначениеДоИзменения;    String СамоЗначениеЯчейкиТабеля;    /////////todo list view    ListView ЛистДляВсеСотурдникаТекущегоТабеля; /////////TODO КОГДА НЕТ ДАННЫХ    Map<Integer, Long> ХэшФИОВсеСотурдникаТекущегоТабеля;    TextView textView3СловоТабель;    //TODO увелисиваем размер арайоиста  SQLiteCursor Курсор_ВсеСотрудникиТабеля = null;     Context КонтекстСотрудникиДляТабеляВнешний;    Context КонтекстСотрудникиДляТабеля;    /////*  ProgressDialog ПрогрессДиалогВпроцессеОбработки;*/    ////TODO ЗАПУСКАЕМ  МеханизмУправлениеПотокамиОграничеваемИхУжеСозданными    int IDЧьиДанныеДляСотрудников;    protected boolean ФлагУжеСообщалиЧтоСообщениеЧТоТАбельПроведетБыло = false;    Activity activity;    // TODO: 30.01.2022    SimpleCursorAdapter АдаптерДЛяЛистаСотрудниковАктивти =null;    ///TODO компонеты табеля    // TODO: 30.01.2022    DataSetObserver dataSetObserver;    // TODO сам ТАБЕЛЬ активити    @Override    protected void onCreate(Bundle savedInstanceState) {        try {            super.onCreate(savedInstanceState);            setContentView(R.layout.activity_main__tabel_listview);            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);            ////            //  getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION  );            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON                    | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);            /////            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            getSupportActionBar().hide(); ///скрывать тул бар            КонтекстСотрудникиДляТабеля = this;            КонтекстСотрудникиДляТабеляВнешний = this;            ///TODO попытка открыть экран как full screan            Log.d(this.getClass().getName(), "   ");            /////todo данная настрока запрещает при запуке активти подскаваать клавиатуре вверх на компонеты eedittext            ////            activity=this;            ////////////TODO              Create_Database_СсылкаНАБазовыйКласс=new CREATE_DATABASE(getApplicationContext());            ////todo запрещяет поворот экрана            //TODO ПОСЛЕ ЗАПОЛЕНИЯ ВСЕГО АКТИВТИ ПЕРЕРИСОВЫВАЕМ КОМПОНЕТЫ ЭКРАНА            ЛистДляВсеСотурдникаТекущегоТабеля = null; /////////TODO КОГДА НЕТ ДАННЫХ            StringBuffer БуферВсеСотурдникаТекущегоТабеля = new StringBuffer();            ХэшФИОВсеСотурдникаТекущегоТабеля = Collections.synchronizedMap(new LinkedHashMap<Integer, Long>());            ХэшЛовимUUIDIDНазваниеСтолбика = Collections.synchronizedMap(new HashMap<>());            ((Activity) КонтекстСотрудникиДляТабеля).setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            ((Activity) КонтекстСотрудникиДляТабеля).setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);            // Locale locale = Locale.ROOT;            Locale locale = new Locale("rus");            Locale.setDefault(locale);            config =                    getBaseContext().getResources().getConfiguration();            config.setLocale(locale);            createConfigurationContext(config);            ///TODO разное            СпинерТАбельМЕсяцФинал = (Spinner) findViewById(R.id.СпинерТабельМесяц);            СпинерТАбельДепартаментФинал = (Spinner) findViewById(R.id.СпинерТабельДепратамент);            /////TODO КОМПОНЕТЫ ТАБЕЛЯ            ///TODO главный контйренр табеля            /////TODO Скоролл Вид            ScrollViewДляВсехСотрудниковТабеля = (ScrollView) findViewById(R.id.ГлавныйКойтейнерВсеСотрудникаВТАбеле);            ///TODO на данной КНОПКЕ МЫ МОЖЕМ ДОБАВИТЬ СОТРУДНИКА К ТАБЕЛЮ ИЛИ СОЗДАТЬ НОВОГО СОТРУДНИКА            /////////Круглая Кнопка            КруглаяКнопкаСамТабель = findViewById(R.id.КруглаяКнопкаСамТабель);//////КНОПКА СОЗДАНИЕ НОВГО ТАБЕЛЯ ИЗ ИСТОРИИ ВТОРОЙ ШАГ            КнопкаЛеваяПередвиженияПоДанным = (Button) findViewById(R.id.imageViewВСамомТабелеЛеваяСтрелка);            КнопкаПраваяПередвиженияПоДанным = (Button) findViewById(R.id.imageViewВСамомТабелеТабельПраваяСтрелка);            // ОбщееКоличествоВТабелеСотудников.setText("133");            // СОЗДАНИЯ ТАБЕЛЯ СНАЧАЛА ИСТРОИЯ ПОТОМ НА БАЗЕ ЕГО СОЗЗДАНИЕ            //////todo limit offset смеещние и огорничения загрузки данных            ЛимитСоСмещениемДанных = "0";            ЛистДляВсеСотурдникаТекущегоТабеля = (ListView) findViewById(R.id.ЛистВсеСотрудникаВТАбеле);            // ОбщееКоличествоВТабелеСотудников            textView3СловоТабель = (TextView) findViewById(R.id.textView3СловоТабель);            ///TODO установка гравиити            СпинерТАбельМЕсяцФинал.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);            СпинерТАбельДепартаментФинал.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);            textView3СловоТабель.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);            // TODO: 28.01.2022  запускам ВЕСЬ КОД АТИВТИ                        try{            //TODO #1            МетодПришлиПараметрыОтДругихАктивитиДляРаботыВсехТабеля();        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());    new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }            try{            //TODO #2            МетодПриНАжатииНаКнопкуBACK();        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }            try{            //TODO #3            МетодСКодоКруглойКнопкойСКотройМожноЛибоСоздатьЛибоВыбратьСотрудника(КруглаяКнопкаСамТабель);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }            ///////try{            ///TODO клик ВНУТРЕНИМУ СОДЕРЖАНИ Ю LKIST VIEW C СОТРУДНИКАМИ ЧТОБЫ ПЕРЕЙТИ Н АСАМ НЕПОСТРЕДСТВЕНО ТАБЕЛЬ            МетодПриКликеПоОтдельномуСотрудникуВнутриТабеля();        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }            // TODO: 29.03.2021 метод УДАЛЕНИЕ СОТРУДНИКАtry{            МетодУдаленияСотрудникаLongClick();        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }            try{            //TODO #5 заполения LISTVIEW            МетодПолучениеДанныхИзБазыДляДляЗаполенияВсехСотрудников();            /////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }            ///////todo после заполения данными заполняем spimer ВТОРАЯ ЧАСТЬЗАПОЛЕНИЯ АКТИВТИtry{            МетолСозданиеТабеляФинал();        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }            /////            Log.d(this.getClass().getName(), "   МетолСозданиеТабеляФинал() закончено  ОФРМЛЕНИЯ ТАБЕЛЯ ЛИСТ" );        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());          new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    @Override    protected void onDestroy() {        super.onDestroy();try{    // TODO: 30.12.2021   --ОТПИСЫВАЕМСЯ/*    if ( dataSetObserver!=null && Курсор_ВсеСотрудникиТабеля!=null ) {        Курсор_ВсеСотрудникиТабеля.unregisterDataSetObserver(dataSetObserver);    }*/        ///////    } catch (Exception e) {        //  Block of code to handle errors        e.printStackTrace();        ///метод запись ошибок в таблицу        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                + Thread.currentThread().getStackTrace()[2].getLineNumber());        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    @Override    protected void onResume() {        super.onResume();        try {        /*    //TODO #1            МетодПришлиПараметрыОтДругихАктивитиДляРаботыВсехТабеля();            //TODO #2            МетодПриНАжатииНаКнопкуBACK();            //TODO #3            МетодСКодоКруглойКнопкойСКотройМожноЛибоСоздатьЛибоВыбратьСотрудника(КруглаяКнопкаСамТабель);            ///////            ///TODO клик ВНУТРЕНИМУ СОДЕРЖАНИ Ю LKIST VIEW C СОТРУДНИКАМИ ЧТОБЫ ПЕРЕЙТИ Н АСАМ НЕПОСТРЕДСТВЕНО ТАБЕЛЬ          МетодПриКликеПоОтдельномуСотрудникуВнутриТабеля();            // TODO: 29.03.2021 метод УДАЛЕНИЕ СОТРУДНИКА            МетодУдаленияСотрудникаLongClick();            //TODO #5 заполения LISTVIEW            МетодПолучениеДанныхИзБазыДляДляЗаполенияВсехСотрудников();            /////            ///////todo после заполения данными заполняем spimer ВТОРАЯ ЧАСТЬЗАПОЛЕНИЯ АКТИВТИ            МетолСозданиеТабеляФинал();            /////            Log.d(this.getClass().getName(), "   МетолСозданиеТабеляФинал() закончено  ОФРМЛЕНИЯ ТАБЕЛЯ ЛИСТ" );*/            ///////        } catch (Exception e) {            //  Block of code to handle errors            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO: 29.03.2021 удаление сотрудника с акттивти    private void МетодУдаленияСотрудникаLongClick() {        ЛистДляВсеСотурдникаТекущегоТабеля.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {            @Override            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {                final String[] ПолученныйUUIDДляУдаление = {null};                final String[] ПолученныйФИОДляУдаление = {null};                ((TextView) view).setBackgroundColor(Color.GRAY);                /////todo проверяем ен закрли курсор                Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеСотурдникаТекущегоТабеля.size());                Object ТекущийUUIDХЭшаСотруников = ХэшФИОВсеСотурдникаТекущегоТабеля.get(position);                Log.d(this.getClass().getName(), "   ТекущийUUIDХЭшаСотруников" +  ТекущийUUIDХЭшаСотруников);                Long UUIDСамогоТабеляВКотромМыНаходилисьLOng=(Long)  ТекущийUUIDХЭшаСотруников;                /////TODO переходим непостредствено на сотрудника которго выбрали  в активити                Log.d(this.getClass().getName(), " ТекущийUUIDХЭшаСотруников  " + ТекущийUUIDХЭшаСотруников);                ////todo                TextView ФИОДляУдаление=(TextView) view;                ///                Log.d(this.getClass().getName(), " view" +view.getTag()+ " ФИОДляУдаление.getText() " +ФИОДляУдаление.getText() );         ПолученныйUUIDДляУдаление[0] =view.getTag().toString();            ПолученныйФИОДляУдаление[0] =ФИОДляУдаление.getText().toString();                ////todo/////TODO КОД КОТОРЫЙ КОТОРЫ УДАЛЯЮТ СОТРУДНИКА ИЗ ТАБЕЛЯ     /*       if (PUBLIC_CONTENT.Отладка==true) {                *//*    СообщениеПредпреждаетОВыбореУдалениеСотрудникаИзТабеля("Оповещение",  "Вы выбрали функцию удаление сотрудника: "+"\n" +ФИОДляУдаление.getText() +                            " из Табеля."+"\n"+"(Выбор Да/Нет на следующем диалогом окне).", "uuid",(String) v.getTag(), (String) ФИОДляУдаление.getText());*//*             */                ///                Log.d(this.getClass().getName(), " view" +view.getTag()+ " ФИОДляУдаление.getText() " +ФИОДляУдаление.getText() );                    МетодСообщенииУдалениеСотрудника( "uuid", ПолученныйUUIDДляУдаление[0], ПолученныйФИОДляУдаление[0]);                ///                Log.d(this.getClass().getName(), " view" +view.getTag()+ " ФИОДляУдаление.getText() " +ФИОДляУдаление.getText() );                return true;            }        });    }        private void МетодПришлиПараметрыОтДругихАктивитиДляРаботыВсехТабеля() {        try{                                    Intent ИнтентПришелМЕсяцТабеля = getIntent();                        МесяцТабеляФинал = ИнтентПришелМЕсяцТабеля.getStringExtra("ПередаемСозданнуюДатуНовогоТабеля");                        Log.d(this.getClass().getName(), " МесяцТабеляФинал :" + МесяцТабеляФинал);            /////            if(МесяцТабеляФинал==null){                                МесяцТабеляФинал = ИнтентПришелМЕсяцТабеля.getStringExtra("МесяцТабеляФинал");                                Log.d(this.getClass().getName(), " МесяцТабеляФинал :" + МесяцТабеляФинал);            }            Intent ИнтентПришелИмяТабеля = getIntent();                        ИмяТабеляФинал = ИнтентПришелМЕсяцТабеля.getStringExtra("ПередаемСозданнуюНазваниеТабеля");            Log.d(this.getClass().getName(), " ИмяТабеляФинал :" + ИмяТабеляФинал);            /////            Intent ИнтентПришелДепаартаментТабеля = getIntent();                        ДепартаментТабеляФинал = ИнтентПришелМЕсяцТабеля.getStringExtra("ПередаемДепартаментФинал");            Log.d(this.getClass().getName(), " ДепартаментТабеляФинал :" + ДепартаментТабеляФинал);            ////            Intent ИнтентПришелПолноеИмяТабеля = getIntent();                        ПолноеИмяТабеляПослеСозданиеНовогоСотрудника = ИнтентПришелМЕсяцТабеля.getStringExtra("ПолноеНазваниеТабеляФинал");            Log.d(this.getClass().getName(), " ПолноеИмяТабеляПослеСозданиеНовогоСотрудника " + ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);            ////            //todo кнопка назад            КнопкаНазад= findViewById(R.id.imageViewСтрелкаВнутриТабеля);            ///TODO ПОЛНОЕ НАЗВАНИЕ ТАБЕЛЯ ПОСЛЕ УСПЕШНОЙ СОЗДАНОГО СОТРУДНИКА И ПЕРЕДВЕМ СЮДА ЕГО ИМЯ ТАБЕЛЯ ПОЛНОЕ            Intent ИнтентПришелПолноеИмяТабеляПослеУспешнойВставки = getIntent();                        ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки = ИнтентПришелПолноеИмяТабеляПослеУспешнойВставки.getStringExtra("ПолноеИмяТабеляПослеСозданиеНовогоСотрудника");            Log.d(this.getClass().getName(), " ПолноеИмяТабеляПослеСозданиеНовогоСотрудника " + ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки);            Intent ИнтентПришелUUIDНазванияТабеля = getIntent();                        String ПроверкаUUIDТабеляФинал = ИнтентПришелUUIDНазванияТабеля.getStringExtra("ПередаваемыйИзКнопкиПолучаемUUIDТабеля");            /////            ////todo если не пришел uuid запускаем его с дгурим uuid            UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя = ИнтентПришелUUIDНазванияТабеля.getStringExtra("ПередаваемыйИзКнопкиПолучаемUUIDТабеля");            Log.d(this.getClass().getName(), "UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя" + UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);            ////            Intent ИнтентПришелПослеСоздангоНовогоСотрудникаНазваниеТабеля = getIntent();                        НазваниеТабеляПослеУспешногоСозданиеСотрудника = ИнтентПришелПослеСоздангоНовогоСотрудникаНазваниеТабеля.getStringExtra("НазваниеТабеляВКоторомИНадоСоздатьНовогоСотрудника");            Log.d(this.getClass().getName(), " НазваниеТабеляПослеУспешногоСозданиеСотрудника " + НазваниеТабеляПослеУспешногоСозданиеСотрудника);            ////            Intent ИнтентПришелПослеСоздангоНовогоСотрудникаUUID = getIntent();            UUIDТабеляПослеУспешногоСозданиеСотрудника = ИнтентПришелПослеСоздангоНовогоСотрудникаUUID.getStringExtra("UUIDТабеляВКоторомИНадоСоздатьНовогоСотрудника");            Log.d(this.getClass().getName(), " UUIDТабеляФинал:" + UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);            ////            Intent ИнтентПришелПослеСоздангоНовогоНазваниеТабеля = getIntent();            НазваниеТабеляПришелПослеСоздангоНового = ИнтентПришелПослеСоздангоНовогоСотрудникаUUID.getStringExtra("НазваниеМесяцаТабеляВКоторомИНадоСоздатьНовогоСотрудника");            Log.d(this.getClass().getName(), " НазваниеТабеляПришелПослеСоздангоНового  " + НазваниеТабеляПришелПослеСоздангоНового);            ////            ////            Intent ИнтентПришелПослеСоздангоНовогоДепартамент = getIntent();            ДепартаментПришелПослеСоздангоНового = ИнтентПришелПослеСоздангоНовогоДепартамент.getStringExtra("ДепартаментТабеляВКоторомИНадоСоздатьНовогоСотрудника");            Log.d(this.getClass().getName(), "  ДепартаментПришелПослеСоздангоНового   " + ДепартаментПришелПослеСоздангоНового);            ////            Intent ИнтентПришелПослеUUIDТабеляПослеПодбораУниверсальный = getIntent();            String  UUIDТабеляПослеПодбораУниверсальный = ИнтентПришелПослеСоздангоНовогоДепартамент.getStringExtra("UUIDТабеляПослеПодбораУниверсальный");            Log.d(this.getClass().getName(), "  ДепартаментПришелПослеСоздангоНового   " + UUIDТабеляПослеПодбораУниверсальный);            ////            ДепартаментТабеляФинал = ИнтентПришелПослеСоздангоНовогоДепартамент.getStringExtra("ПолноеНазваниеЗагруженногТАбеляПослеПодбора");            Log.d(this.getClass().getName(), "  ДепартаментТабеляФинал  " + ДепартаментТабеляФинал);            ////            //////todo дополнтельные данные которые нужно перебросить далеее в другие актвити и ДАЛЕЕ МЕТКА ТАБЕЛЯ            Intent Интент_ДополнительныеПришлиДанныеКоторыеНужноПроброситьДалее = getIntent();            if(МесяцТабеляФинал==null) {                МесяцТабеляФинал = Интент_ДополнительныеПришлиДанныеКоторыеНужноПроброситьДалее.getStringExtra("ПередаемСозданнуюДатуНовогоТабеля");            }            if (ДепартаментПришелПослеСоздангоНового==null) {                ДепартаментПришелПослеСоздангоНового= Интент_ДополнительныеПришлиДанныеКоторыеНужноПроброситьДалее.getStringExtra("ПередаемДепартаментФинал");            }            if (ДепартаментПришелПослеСоздангоНового==null) {                ДепартаментПришелПослеСоздангоНового= Интент_ДополнительныеПришлиДанныеКоторыеНужноПроброситьДалее.getStringExtra("ПолноеНазваниеТабеляФинал");            }            if (UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя==null) {                UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя=                        Интент_ДополнительныеПришлиДанныеКоторыеНужноПроброситьДалее.getStringExtra(("ПередаваемыйИзКнопкиПолучаемUUIDТабеля"));            }            if (ГодТабеляФинал==null) {                ГодТабеляФинал= Интент_ДополнительныеПришлиДанныеКоторыеНужноПроброситьДалее.getStringExtra("ГодТабеляФиналИзВсехСотрудниковВТАбеле");            }            //TODO  ДАННЫЙ КОД ПРОВЕРЯЕТ ЕЛСИ ЭТО ТАБЕЛЬ ЗАГРУЖАЕТЬСЯ ПОСЛЕ СОЗДАНИЕ НОВОГО СОТРУДНИКА ,,, ТО ПЕРЕПРИСВАЕМВАЕМ ЕГО ОТ ДРУГОЙ ПЕРЕРМЕНОЙ КОТОРАЯ            // ЗАПОЛЯНЕТЬСЯ ПОСЛЕ УСПЕГШНОЙ СОЗДАННОЙ НАЗВАЕНИ МЕМСЯЦА            if ( UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя==null){                UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя= UUIDТабеляПослеПодбораУниверсальный;            }            if (МесяцТабеляФинал==null){                МесяцТабеляФинал=НазваниеТабеляПришелПослеСоздангоНового;            }            //todo департамент            if (ДепартаментТабеляФинал==null ){                ДепартаментТабеляФинал=ДепартаментПришелПослеСоздангоНового;            }            if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудника ==null){                ПолноеИмяТабеляПослеСозданиеНовогоСотрудника = ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки ;            }            if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудника ==null){                ПолноеИмяТабеляПослеСозданиеНовогоСотрудника=    Интент_ДополнительныеПришлиДанныеКоторыеНужноПроброситьДалее.getStringExtra(("ПолноеИмяТабеляПослеСозданиеНовогоСотрудника"));            }            //todo после добавление сотрудник асуществуещего ---- ТУТ ПОСЛЕ КАК ТЫ ДОБАВИЛИ УЖЕ СУЩЕСТВУЮЩИХ СОТРУДНИКОВ В ТАБЕЛЬ            Intent ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника = getIntent();            ////////            if (МесяцТабеляФинал==null) {                МесяцТабеляФинал = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getStringExtra("МесяцТабеляПослеПодбора");                Log.d(this.getClass().getName(), "  МесяцТабеляФинал " + МесяцТабеляФинал);                ////                if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки==null) {                    ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.                            getStringExtra("ПолноеНазваниеЗагруженногТАбеляПослеПодбора");                    Log.d(this.getClass().getName(), " ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки " + ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки);                }                ///////                if (ДепартаментПришелПослеСоздангоНового==null) {                    ДепартаментПришелПослеСоздангоНового = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getStringExtra("ДепартаментТабеляПослеПодбора");                    Log.d(this.getClass().getName(), "  ДепартаментПришелПослеСоздангоНового   " + ДепартаментПришелПослеСоздангоНового);                }                ////                if ( UUIDТабеляПослеУспешногоСозданиеСотрудника ==null) {                    UUIDТабеляПослеУспешногоСозданиеСотрудника = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getStringExtra("UUIDТабеляПослеПодбораУниверсальный");                    Log.d(this.getClass().getName(), "  UUIDТабеляПослеУспешногоСозданиеСотрудника  " + UUIDТабеляПослеУспешногоСозданиеСотрудника);                }                if ( UUIDТабеляПослеУспешногоСозданиеСотрудника ==null) {                    UUIDТабеляПослеУспешногоСозданиеСотрудника = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getStringExtra("c");                    Log.d(this.getClass().getName(), "  UUIDТабеляПослеУспешногоСозданиеСотрудника  " + UUIDТабеляПослеУспешногоСозданиеСотрудника);                }                if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудника==null) {                    ПолноеИмяТабеляПослеСозданиеНовогоСотрудника= ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.                            getStringExtra("ПолноеНазваниеЗагруженногТАбеляПослеПодбора");                    Log.d(this.getClass().getName(), " ПолноеИмяТабеляПослеСозданиеНовогоСотрудника " + ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                }///todo если имя табеля пустое полслен созадени нового сотрудника по присваемое ему имя от дургой переменой                Log.d(this.getClass().getName(), "   МесяцТабеляФинал  " + МесяцТабеляФинал +                        "    ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки   " + ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки+                        "  ДепартаментПришелПослеСоздангоНового " + ДепартаментПришелПослеСоздангоНового + "  UUIDТабеляПослеУспешногоСозданиеСотрудника  "                        + UUIDТабеляПослеУспешногоСозданиеСотрудника );            }            if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудника == null) {               //ПолноеИмяТабеляПослеСозданиеНовогоСотрудника                ПолноеИмяТабеляПослеСозданиеНовогоСотрудника= ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getStringExtra("НазваниеТабеляВКоторомИНадоСоздатьНовогоСотрудника");            }            /////            Log.d(this.getClass().getName(), "   ПолноеИмяТабеляПослеСозданиеНовогоСотрудника  " +ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);            if (UUIDТабеляПослеУспешногоСозданиеСотрудника==null){                UUIDТабеляПослеУспешногоСозданиеСотрудника=UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя;            }            Log.d(this.getClass().getName(), "  UUIDТабеляПослеУспешногоСозданиеСотрудника  " + UUIDТабеляПослеУспешногоСозданиеСотрудника);////TODO UUID ПОСЛЕ ВСТАВКИ НОВГО СОТРУДНИКА////todo ДАНЫЕ ДДАНЫЕ ПРИХОДЯТ КОГДА МЫ НА ПРДЫДУЩЕМ КВТИВАИТИ СОЗДАНИЕ НОВОГО СОТРУДНИКА ИЛИ ВЫБОР ИЗ УЖЕ СУЩЕСТВУЮЩИХ            if( UUIDТабеляКнопкаBACKУниверсальный==null) {                Long UUIDТабеляКнопкаBACKУниверсальный = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getLongExtra("UUIDТабеляКнопкаBACKУниверсальный", 0);                // TODO: 26.10.2021if (UUIDТабеляКнопкаBACKУниверсальный==0){    UUIDТабеляКнопкаBACKУниверсальный = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getLongExtra("UUIDТабеляПослеПодбора", 0);    Log.d(this.getClass().getName(), "  ПолноеИмяТабеляПослеСозданиеНовогоСотрудника " +ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);}                if (UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя == null){                    UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя = String.valueOf(UUIDТабеляКнопкаBACKУниверсальный);                }                if (UUIDТабеляПослеУспешногоСозданиеСотрудника==null) {                    UUIDТабеляПослеУспешногоСозданиеСотрудника= String.valueOf(UUIDТабеляКнопкаBACKУниверсальный);                }                Log.d(this.getClass().getName(), "  UUIDТабеляКнопкаBACKУниверсальный  " + UUIDТабеляКнопкаBACKУниверсальный);            }            if(ПолноеИмяТабеляПослеСозданиеНовогоСотрудника==null){                ПолноеИмяТабеляПослеСозданиеНовогоСотрудника = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getStringExtra("ДепартаментТабеляВКоторомИНадоСоздатьНовогоСотрудника");                Log.d(this.getClass().getName(), "  ПолноеИмяТабеляПослеСозданиеНовогоСотрудника " +ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);            }            if(МесяцТабеляФинал==null){                МесяцТабеляФинал= ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getStringExtra("МесяцТабеляФинал");                Log.d(this.getClass().getName(), "  МесяцТабеляФинал " +МесяцТабеляФинал);            }            if (UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя==null){                UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя=UUIDТабеляКнопкаBACKУниверсальный;            }            if (МЕсяцДляКурсораТабелей==0) {                ///TODO получаем из месца и года в цифру                МЕсяцДляКурсораТабелей = МетодПолучениниеКурсораМЕсяцДата(МесяцТабеляФинал);                Log.d(this.getClass().getName(), "  МЕсяцДляКурсораТабелей " +МЕсяцДляКурсораТабелей);            }            if (ГодДляКурсораТабелей==0) {                ГодДляКурсораТабелей=МетодПолучениниеКурсораГОДДата(МесяцТабеляФинал);                Log.d(this.getClass().getName(), " ГодДляКурсораТабелей " +ГодДляКурсораТабелей);            }            if (ДепартаментТабеляФинал ==null){                ДепартаментТабеляФинал=ПолноеИмяТабеляПослеСозданиеНовогоСотрудника;                Log.d(this.getClass().getName(), "  ДепартаментТабеляФинал" +ДепартаментТабеляФинал);            }if ( ЦифровоеИмяНовгоТабеля==0) {    ЦифровоеИмяНовгоТабеля = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getIntExtra("ЦифровоеИмяНовгоТабеля", 0);    Log.d(this.getClass().getName(), "  ЦифровоеИмяНовгоТабеля " + ЦифровоеИмяНовгоТабеля);}            if (ПолученнаяUUIDНазванияОрганизации==0l) {                ПолученнаяUUIDНазванияОрганизации = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getLongExtra("ПолученнаяUUIDНазванияОрганизации",0l);                Log.d(this.getClass().getName(), "  ПолученнаяUUIDНазванияОрганизации " + ПолученнаяUUIDНазванияОрганизации);            }            if (ЦифровоеИмяНовгоТабеля==0) {                ЦифровоеИмяНовгоТабеля = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getIntExtra("ЦифровоеИмяНовгоТабеляSingle",0);                Log.d(this.getClass().getName(), "  ЦифровоеИмяНовгоТабеля " + ЦифровоеИмяНовгоТабеля);            }            // TODO: 20.10.2021 new            ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getStringExtra("ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре");            Log.d(this.getClass().getName(), "  ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре " + ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);         РодительскийUUDТаблицыТабель = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getLongExtra("РодительскийUUDТаблицыТабель",0l);            Log.d(this.getClass().getName(), "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель);        if (РодительскийUUDТаблицыТабель==0){            РодительскийUUDТаблицыТабель=Long.parseLong(UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);            Log.d(this.getClass().getName(), "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель+                    " UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя " +UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);        }            if (РодительскийUUDТаблицыТабель==0){                РодительскийUUDТаблицыТабель = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getLongExtra("UUIDТабеляГлавыйРодительскгоТабеля",0l);                Log.d(this.getClass().getName(), "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель+                        " UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя " +UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);            }            Log.d(this.getClass().getName(), "  UUIDТабеляГлавыйРодительскгоТабеля " + РодительскийUUDТаблицыТабель+                    " UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя " +UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);            if (РодительскийUUDТаблицыТабель==0){                РодительскийUUDТаблицыТабель = ИнтентПришелПослеДобавлениеУжеСуществуюещегоСотрудника.getLongExtra("РодительскийUUDТаблицыТабель",0l);                Log.d(this.getClass().getName(), "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель+                        " UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя " +UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);            }            Log.d(this.getClass().getName(), "  РодительскийUUDТаблицыТабель " + РодительскийUUDТаблицыТабель+                    " UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя " +UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);        } catch (Exception e) {            //  Block of code to handle errors            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }///todo круглая кнопка для вызова создание или добавления сотркдника    private void МетодСКодоКруглойКнопкойСКотройМожноЛибоСоздатьЛибоВыбратьСотрудника(FloatingActionButton круглаяКнопкаСамТабель) {        //////////////////////////////        круглаяКнопкаСамТабель.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Log.e(this.getClass().getName()," " );                //////конец второго лушателя спинера                //  Snackbar.make(v, "Here",Snackbar.LENGTH_LONG).setAction("Action",null).show();/////TODO КНОПКА КРУГЛАЯ НА АКТИВТИ В ТАБЕЛЕ ПРЕДНАЗВАНЧЕН ДЛЯ СОЗДАНИЕ НОВОГО СОТРУДНИКА ИЛИ ДОБАВЛЕНИЕ УЖЕ ДЕЙСТВУЕЩЕГО СОТРУДКА В ТАБЕЛЬ                    СообщениеДляВыбораСозданиеНовогоСотрудникаИлиЕгоПодобратьДляТабеля("Создание/добавление"                                    + "\n" + "Сотрудника/ов", true,                            UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя,                            МесяцТабеляФинал, ДепартаментТабеляФинал);                    //TODO ТУТ КОД БУДЕТ ЗАПУСКАТЬСЯ СОЗДАЕНИЕ НОВОГО ИЛИ ДОБАВЛЕНИЕ ДЕЙСТВУЕЮЩЕГО СОТРУДНИКА В ТАБЕЛЬ            }        });        // TODO: 04.10.2021  ДОЛГОЕ НАЖАТЕИ НА КРУГЛУЮ КНОПКУ        круглаяКнопкаСамТабель.setOnLongClickListener(new View.OnLongClickListener() {            @Override            public boolean onLongClick(View v) {          /*      // TODO: 04.10.2021  ДОЛГОЕ НАЖАТИЕ НА КРУГД КНОПКУ                //  Snackbar.make(v, "Here",Snackbar.LENGTH_LONG).setAction("Action",null).show();                Vibrator v2 = (Vibrator) getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE);                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {                    v2.vibrate(VibrationEffect.createOneShot(250, VibrationEffect.DEFAULT_AMPLITUDE));                } else {                    //deprecated in API 26                    v2.vibrate(250);                }                // TODO: 04.10.202 запуск  СИНХРОГИЗАЦИИ С КНОПКИ                Snackbar.make(v, " Запускаем обмен с данными !!! ", Snackbar.LENGTH_LONG).show();    Constraints constraintsЗапускФОновойСинхрониазциииИзНУтриТабеля= new Constraints.Builder()            .setRequiredNetworkType(NetworkType.CONNECTED)            .setRequiresCharging(false)            .setRequiresBatteryNotLow(false)            .setRequiresStorageNotLow(false)            .build();    ///    String ИмяСлужбы="WorkManagerинхрониазцацияВнутриТАбеляЛокально";    OneTimeWorkRequest OneTimeWorkЗапускФОновойСинхрониазциииИзНУтриТабеля= new OneTimeWorkRequest.Builder(MyWork_Async_Синхронизация_ТолькоДляТабеля.class)            .setConstraints(constraintsЗапускФОновойСинхрониазциииИзНУтриТабеля)            //    .setInputData(new Data.Builder().putString("КтоЗапустилWorkmanager","BroadCastRecieve").build())        //  .setInitialDelay(5,TimeUnit.SECONDS)            .addTag(ИмяСлужбы)            .build();// Queue the work    WorkManager.getInstance(getApplicationContext()).enqueueUniqueWork(ИмяСлужбы, ExistingWorkPolicy.KEEP, OneTimeWorkЗапускФОновойСинхрониазциииИзНУтриТабеля);    // WorkManager.getInstance().enqueue(periodicWorkRequest);// workmanager.enqueueUniquePeriodicWork(TAG, ExistingPeriodicWorkPolicy.KEEP, photoCheckWork)    Log.i(this.getClass().getName(), "После Запуска из  FaceApp  WorkManager СинхрониазцацияВнутриТАбеля Локально"            +new Date() + " СТАТУС WORKMANAGER-----------" +WorkManager.getInstance(getApplicationContext()).getWorkInfosByTag("WorkManager СинхрониазцацияВнутриТАбеля Локально"));*/                return true;            }        });    }    //todo метод возврата к предыдущему активти    private void МетодПриНАжатииНаКнопкуBACK() {        //////////        КнопкаНазад.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {// TODO: 02.09.2021  запуск синхронизации сраз н авсе сотрулдниковtry {    /////    // TODO: 29.09.2021 второе действие запуск актвти                    Log.d(this.getClass().getName(), " кликнем для созданни новго сотрдника при нажатии  ");                    ///todo код которыц возврящет предыдущий актвитики кнопка back                    Intent Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки = new Intent();                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.setClass(getApplication(), MainActivity_List_Tabels.class); // Т                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ДепартаментТабеляПослеПодбора", МесяцТабеляФинал);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляПослеПодбора", UUIDТабеляПослеУспешногоСозданиеСотрудника);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляПослеПодбораУниверсальный",                            UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("МесяцТабеляПослеПодбора", МесяцТабеляФинал);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ПолноеНазваниеЗагруженногТАбеляПослеПодбора",ПолноеИмяТабеляПослеСозданиеНовогоСотрудника );                    //год и месяц цифр                    //Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("МЕсяцДляКурсораТабелейПослеПодбора", МЕсяцПриВставкеНовогоСотрудника);                    // Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ГодДляКурсораТабелейПослеПодбора",ГодПриВставкеНовогоСотрудника);                    //todo передает контент при нажатии на кнопку back                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляКнопкаBACKУниверсальный",                            UUIDТабеляКнопкаBACKУниверсальный);                    ///TODO ОПИСАНИЕ ЧТО ПЕРЕДАЕМ                    Log.d(  this.getClass().getName(), " ПолноеНазваниеЗагруженногТАбеля" +ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                    ////todo для возврата правильно от BACK кнопки                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ДепартаментТабеляПослеПодбораBACK", МесяцТабеляФинал);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ГодТабеляПослеПодбора", ГодДляКурсораТабелей);    // TODO: 20.10.2021 new Значение при движение по кругу месяц сохраняем                Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре", ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("UUIDТабеляФинал", UUIDТабеляПослеУспешногоСозданиеСотрудника);    ///////    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.putExtra("РодительскийUUDТаблицыТабель", UUIDТабеляПослеУспешногоСозданиеСотрудника);                    Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    // TODO: 30.12.2021   --ОТПИСЫВАЕМСЯ    if ( dataSetObserver!=null && Курсор_ВсеСотрудникиТабеля!=null) {        Курсор_ВсеСотрудникиТабеля.unregisterDataSetObserver(dataSetObserver);    }                    ///    //TODO второе  действие при сходе с АКТИВТИ    Log.d(this.getClass().getName(), " запускам метод сихронизации данных   МетодЗапускаСинхрониазцииССерверомКогдаМЫНажимаемНакономукBACKСходимсАктивти() " );    // TODO: 04.10.2021  ДОЛГОЕ НАЖАТИЕ НА КРУГД КНОПКУ    МетодЗапускаСинхрониазцииССерверомКогдаМЫНажимаемНакономукBACKСходимсАктивти();    ////todo запускаем активти    startActivity( Интент_ПослеПодбораДействуещегоСотрудникаОтпраляемЕгоДляВставки);    finish();} catch (Exception e) {                    e.printStackTrace();                    ///метод запись ошибок в таблицу                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                            " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                    new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                }            }            private void МетодЗапускаСинхрониазцииССерверомКогдаМЫНажимаемНакономукBACKСходимсАктивти() {                PUBLIC_CONTENT      cachedThreadPoolВизуальнаяСинхронизацияМенеджер=new PUBLIC_CONTENT(getApplicationContext());///                //////////                    Integer РезультатЗапускВизуальнойСинхронизации =0;             try{                        LinkedBlockingQueue<String> ЗаполненыеСистемныеТаблицыДЛяСинхронизации = new Class__Generation_Genetal_Tables(getApplicationContext()).                                МетодЗаполеннияТаблицДЛяРаботыиСинхрониазции();                        //TODO ФУТУРЕ ЗАВЕРШАЕМ                        Log.d(this.getClass().getName(), "  ЗаполненыеСистемныеТаблицыДЛяСинхронизации " + ЗаполненыеСистемныеТаблицыДЛяСинхронизации.size());                        // TODO: 01.07.2021  ЗАПУСКАЕМ ВИЗУАЛЬНУЮ СИНХРОНИЗИЦИЮ С АКТИВТИ ЧДЕ КРУТИТЬСЯ ПРОГРЕСС БАР                 ///todo                     ЗаполненыеСистемныеТаблицыДЛяСинхронизации.spliterator().forEachRemaining((ТАблицаДЛяСинхрониазциисТабеля)->{                         Log.d(this.getClass().getName(), "ТАблицаДЛяСинхрониазциисТабеля "  + ТАблицаДЛяСинхрониазциисТабеля);                         if (ТАблицаДЛяСинхрониазциисТабеля.equals("tabel") ||                                 ТАблицаДЛяСинхрониазциисТабеля.equals("data_tabels")){                 Boolean ПроверкаБылиИзмененияВБазе =                         new Class_Search_Changes_Data(getApplicationContext()).                                 МетодВычислемБылиИзменениВДанныхВДанныхПоДатам(ТАблицаДЛяСинхрониазциисТабеля);                 Log.d(this.getClass().getName(), "ПроверкаБылиИзмененияВБазе "  + ПроверкаБылиИзмененияВБазе);            // TODO: 18.10.2021                 if (ПроверкаБылиИзмененияВБазе ==true) {                     // TODO: 01.02.2022 заПУСКАЕМ сИНХРОНИАЗАЦИЮ С ВСЕХ ЛИСТ ТАБЕЛЕЙ                     Completable completableСинхронизацияЗапускаетсяИзВссехЛИСТабелей= Completable.fromAction(new Action() {                         @Override                         public void run() throws Throwable {                             // TODO: 30.09.2021 МЕТОД ЗАПУСКА СИНХРОНИЗАЦИИ ЧАТА ПО РАСПИСАНИЮ , НЕ ВЗАВИСИМОСТИ ОТ СОЗДАВАЛ ЛИ СООБЩЕНИЕ ИЛИ НЕТ                             Integer  ПубличныйIDДляФрагмента=   new Class_Generations_PUBLIC_CURRENT_ID(getApplicationContext()).ПолучениеПубличногоТекущегоПользователяID();                             Log.d(this.getClass().getName(), "ПубличныйIDДляФрагмента  ИЗ ВСЕХ ТАБЕЛЕЙ " + ПубличныйIDДляФрагмента);                             // TODO: 14.11.2021  ПОВТОРЫЙ ЗАПУСК ВОРК МЕНЕДЖЕР                             // TODO: 24.12.2021                             new Class_Generation_SendBroadcastReceiver_And_Firebase_OneSignal(getApplicationContext()).                                     МетодПовторногоЗапускаВсехWorkManager__ОДНОРАЗОВОЙСинхрониазцииданных(ПубличныйIDДляФрагмента,getApplicationContext());                             Log.d(this.getClass().getName(), " ИЗ ВСЕХ ТАБЕЛЕЙ   ОДНОРАЗОВАЯ СИНХРОНИЗАЦИЯ ");                         }                     })                             .onErrorComplete(new Predicate<Throwable>() {                                 @Override                                 public boolean test(Throwable throwable) throws Throwable {                                     Log.d(this.getClass().getName(), " ОШИБКА В СИНХРОНИАЗЙИИ КОТОРУЮ ЗАПСКАЮТ СО ВСЕХ ТАБЕЛЙ ЛИСТ onErrorComplete  " + throwable.fillInStackTrace().getMessage());                                     return false;                                 }                             })                             .doOnComplete(new Action() {                                 @Override                                 public void run() throws Throwable {                                     Log.d(this.getClass().getName(), " doOnComplete ЗАВЕРШЕНИЯ СИНХРОНИАЗЙИИ КОТОРУЮ ЗАПСКАЮТ СО ВСЕХ ТАБЕЛЙ ЛИСТ  ПубличныйIDДляФрагмента  ИЗ ВСЕХ ТАБЕЛЕЙ ");                            activity.runOnUiThread(new Runnable() {                            @Override                            public void run() {                                // TODO: 14.11.2021  ПОВТОРЫЙ ЗАПУСК ВОРК МЕНЕДЖЕР                                new Class_Generation_SendBroadcastReceiver_And_Firebase_OneSignal(getApplicationContext()).МетодПовторногоЗапускаУведомленияЗадач();                                //TODO srating......  oneSignal                                Log.d(this.getClass().getName(), "  ЗАПУСК УВЕДОМЛЕНИЯ ...ИЗ ВСЕХ ТАБЕЛЕЙ   ОДНОРАЗОВАЯ СИНХРОНИЗАЦИЯ  ");                                                                               /*     new Class_Engine_SQL(getApplication()).                                                                                    МетодЗАпускаСинхронизациивВизуальная(getApplication(),"СинхронизацияДляЧата",false,КонтекстДляСинхронизацииОбмена);  //МетодЗАпускаСинхронизациивФонеТолькоСинхронно   //МетодЗАпускаСинхронизациивФоне                                                                                ///*/                                Log.d(this.getClass().getName(), " РезультатЗапускВизуальнойСинхронизации  СЛУЖБА запуск визуальной синхрониациии"                                        + РезультатЗапускВизуальнойСинхронизации);                            }                            });                                 }                             })                             .subscribeOn(Schedulers.computation()).observeOn(AndroidSchedulers.mainThread());                     // TODO: 01.02.2022                     completableСинхронизацияЗапускаетсяИзВссехЛИСТабелей.subscribe(System.out::println);                 } }                     });                 Log.d(this.getClass().getName(), " РезультатЗапускВизуальнойСинхронизации  СЛУЖБА запуск визуальной синхрониациии"                         + РезультатЗапускВизуальнойСинхронизации);                        //////                    } catch (Exception e) {                        //  Block of code to handle errors                        e.printStackTrace();                        ///метод запись ошибок в таблицу                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                Thread.currentThread().getStackTrace()[2].getLineNumber());                    }            }        });    }    //todo метод получаем даные для загружки ихв listview    private void МетодПолучениеДанныхИзБазыДляДляЗаполенияВсехСотрудников() throws ExecutionException, InterruptedException {        //todo        Курсор_ВсеСотрудникиТабеля = null;        try {            String УниверсальноеИмяТабеля = null;            try {                УниверсальноеИмяТабеля = МетодПредварительногоПолучениеДанных();                ////////                Log.d(this.getClass().getName(), "Запущен.... метод  onCreate в классе MainActivity_Settings  ;  УниверсальноеИмяТабеля "+УниверсальноеИмяТабеля);                //поймать ошибку всего классаIOException | MyException e    NumberFormatException            } catch (Exception e) {                e.printStackTrace();                ///метод запись ошибок в таблицу                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());               new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            }          /*  ReentrantLock reentrantLock=new ReentrantLock();            reentrantLock.lock();            reentrantLock.newCondition().await(50, TimeUnit.MILLISECONDS);*/////TODO end test            if (УниверсальноеИмяТабеля.length() > 0 && МЕсяцДляКурсораТабелей > 0 && ГодДляКурсораТабелей > 0                   && ЦифровоеИмяНовгоТабеля>0) {                ////TODO ЗАГРУЗКА НА АКТИВИТИ НЕ СОТРУДСТВЕННО СОТРУДНИКОВ                String finalУниверсальноеИмяТабеля = УниверсальноеИмяТабеля;                ///////final  String ЦифровоеИмяТабеля = PUBLIC_CONTENT.ЦифровоеИмяНовгоТабеля;                //////TODO НЕПОСРЕДСТЕННО ЗАГРУЗКА СОТРУДНИКОВ ВСЕХ В КОНКРЕТНЫЙ ТАБЕЛЬ             /*   Курсор_ВсеСотрудникиТабеля = new Class_MODEL_synchronized(КонтекстСотрудникиДляТабеля).                        МетодЗагружаетСотрудниковListViewТабеляПриВозвратеИЗШаблона(КонтекстСотрудникиДляТабеля,                                String.valueOf(ЦифровоеИмяНовгоТабеля),МЕсяцДляКурсораТабелей,ГодДляКурсораТабелей);                Курсор_ДляЗагрузкиСотрудниковНепостредственновИзШаблона = new Class_MODEL_synchronized(контекстLIstView).КурсорУниверсальныйДляБазыДанных("viewtabel",                        new String[]{"*"},//     new String[]{"name,id,uuid,BirthDate,snils},                        "status_send!=?  AND cfo=? AND fio !=?  AND month_tabels=? AND  year_tabels =?  AND fio IS NOT NULL AND name IS NOT NULL",//  nametabel_typename  AND nametabel IS NOT NULL",//AND status_send IS NULL//"Удаленная" //AND status_send!=?" /AND status_send IS NULL AND  name IS NOT NULL AND fio IS NOT NULL                        new String[]{"Удаленная", String.valueOf(ЦифровоеИмяНовгоТабеля), "", String.valueOf(месяцДляПермещенияПоТабелю), String.valueOf(годДляПермещенияПоТабелю)},                        "name", null, "name", null);*/                //TODO Получение данных новый движок                    Class_GRUD_SQL_Operations class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников;                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников=new Class_GRUD_SQL_Operations(getApplicationContext());                // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ                ///                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников.                        concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","viewtabel");//data_tabels                ///////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","*");                //                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников.                        concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","status_send!=?" +                        "  AND cfo=?   AND month_tabels=? AND  year_tabels =?    AND fio IS NOT NULL  ");                ///"_id > ?   AND _id< ?"                //////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1","Удаленная");                ///                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2",ЦифровоеИмяНовгоТабеля);                ///                 class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                //...                /////                class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......                /////               /// class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска5","");////УсловиеПоискаv4,........УсловиеПоискаv5 .......                /////                ///class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска5",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......                ////TODO другие поля                //class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки", "cfo");                ////                //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                ////              class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","uuid");//date_update                ////                /// class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита",null);                ////                // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                ///TODO ПОТОК загрузки данных в Активти в LISTVIEW                Курсор_ВсеСотрудникиТабеля = null;                ////////////////////////////////////////////                Курсор_ВсеСотрудникиТабеля= (SQLiteCursor) class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников.                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsДанныхИзБазыДляДляЗаполенияВсехСотрудников.                        concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                /////                Log.d(this.getClass().getName(), "GetData "+Курсор_ВсеСотрудникиТабеля  );                ///////////                     /*   Курсор_ВсеСотрудникиТабеля = new Class_MODEL_synchronized(КонтекстСотрудникиДляТабеля).                                МетодЗагружаетСотрудниковListViewТабеля(IDЧьиДанныеДляСотрудников,                                        ПолученнаяUUIDНазванияОрганизации,                                        finalУниверсальноеИмяТабеля,КонтекстСотрудникиДляТабеля,МЕсяцДляКурсораТабелей,ГодДляКурсораТабелей,                                        ЦифровоеИмяТабеля );*/                if (Курсор_ВсеСотрудникиТабеля.getCount()>0) {                    Log.d(this.getClass().getName(), "   Курсор_ВсеСотрудникиТабеля.getCount() "+Курсор_ВсеСотрудникиТабеля.getCount());                }                /////                ////TODO когд когда нет прав для текущего пользоватлея или нет данных            } else if (МесяцТабеляФинал != null && ЦифровоеИмяНовгоТабеля > 0) {///////TODO данные загружаються проходят от ШАБЛОНОВ                Log.d(this.getClass().getName(), " МесяцТабеляФинал " + МесяцТабеляФинал + " ЦифровоеИмяНовгоТабеля " + ЦифровоеИмяНовгоТабеля);                final String ЦифровоеИмяТабеля = String.valueOf(ЦифровоеИмяНовгоТабеля);                //////TODO НЕПОСРЕДСТЕННО ЗАГРУЗКА СОТРУДНИКОВ ВСЕХ В КОНКРЕТНЫЙ ТАБЕЛЬ    /*            Курсор_ВсеСотрудникиТабеля = new Class_MODEL_synchronized(КонтекстСотрудникиДляТабеля).                        МетодЗагружаетСотрудниковListViewТабеляПриВозвратеИЗШаблона(КонтекстСотрудникиДляТабеля,                                String.valueOf(ЦифровоеИмяНовгоТабеля), МЕсяцДляКурсораТабелей,ГодДляКурсораТабелей);                ///////////*/                       /* Курсор_ВсеСотрудникиТабеля = new Class_MODEL_synchronized(КонтекстСотрудникиДляТабеля).                                МетодЗагружаетСотрудниковListViewТабеляПриВозвратеИЗШаблона(IDЧьиДанныеДляСотрудников,КонтекстСотрудникиДляТабеля,                                        ЦифровоеИмяТабеля, Math.toIntExact(ПолученнаяUUIDНазванияОрганизации));*/                //TODO Получение данных новый движок                Class_GRUD_SQL_Operations class_grud_sql_operationsЦифровоеИмяТабеля;                class_grud_sql_operationsЦифровоеИмяТабеля=new Class_GRUD_SQL_Operations(getApplicationContext());                // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ                ///                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","viewtabel");//data_tabels                ///////                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","*");                //                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","status_send!=?  " +                        "AND cfo=? AND fio !=?  AND month_tabels=? AND  year_tabels =?  AND fio IS NOT NULL AND name IS NOT NULL ");                ///"_id > ?   AND _id< ?"                //////                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1","Удаленная");                ///                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2",ЦифровоеИмяНовгоТабеля);                ///                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3","");                //...                /////                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",МЕсяцДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......                /////                class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска5",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......                ////TODO другие поля                //////class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки", "name");                ////                //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                ////             class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","uuid");///date_update                ////                /// class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита",null);                ////                // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                Курсор_ВсеСотрудникиТабеля = null;                ////////                // TODO: 12.10.2021  Ссылка Менеджер Потоков                PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                Курсор_ВсеСотрудникиТабеля= (SQLiteCursor)  class_grud_sql_operationsЦифровоеИмяТабеля.                        new GetData(getApplicationContext()).getdata(class_grud_sql_operationsЦифровоеИмяТабеля. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                //////                Log.d(this.getClass().getName(), "GetData "  +Курсор_ВсеСотрудникиТабеля);                Log.d(this.getClass().getName(), " Курсор_ВсеСотрудникиТабеля.getCount()  " + Курсор_ВсеСотрудникиТабеля.getCount());                /////                ////TODO когда данных нет вообщее и на прямую и не через шадбон            } else {                //todo                if (ПолученнаяUUIDНазванияОрганизации == 0) {///                    ///////////todo                    МетодКогдаДАнныхНетИЛИОшибкаИлиНетПрав();                    /////TODO КОД ВЫПОЛЯЕТЬСЯ КОГДА ПО УКАЗАНОМУ ТАБЕЛЮ НЕ СМОСТРДУНИКРОВ                    //  Toast.makeText(getApplicationContext(), "Не выбрана организация (в настройках выберети ОРГАНИЗАЦИЮ и зайтите еще раз)", Toast.LENGTH_LONG).show();                }            }                ///////TODO после получение данных из курсора//todo НАЧИНАЕМ ЗАГРУЗКУ САМИХ СОТРУДНИКОВ В ТЕКУЩИЙ ТАБЕЛЬ                ////todo проверяем куроср                if (Курсор_ВсеСотрудникиТабеля.getCount() > 0) {                    ///                    Log.d(this.getClass().getName(), " Курсор_ВсеСотрудникиТабеля.getCount()  " + Курсор_ВсеСотрудникиТабеля.getCount());                    ////                    Log.d(this.getClass().getName(), " Курсор_ВсеСотрудникиТабеля.getCount()  "                            + Курсор_ВсеСотрудникиТабеля.getCount());                    Курсор_ВсеСотрудникиТабеля.moveToFirst();                    int КоличествроСтрочек = Курсор_ВсеСотрудникиТабеля.getCount();                    /////// //TODO инизалицируем ЛИНКЛИСТ  табеля                    //TODO МЕТОД ЗАПОЛЕНИЯ ДАННЫМИ ПОИСКА ТАБЕЛЯ*/                    МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО(Курсор_ВсеСотрудникиТабеля);                    /////todo                    /////TODO КОД ВЫПОЛЯЕТЬСЯ КОГДА ПО УКАЗАНОМУ ТАБЕЛЮ НЕ СМОСТРДУНИКРОВ                } else {                    МетодКогдаДАнныхНетИЛИОшибкаИлиНетПрав();                }            //поймать ошибку всего классаIOException | MyException e    NumberFormatException        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());           new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }finally {            // TODO: 30.01.2022// TODO: 30.01.2022 ДОБАВЛЯЕМ УСЛУШАТЕЛЬКУРСОРА НА АКТИВТИ СОТРУДНИКИ  Курсор_ВсеСотрудникиТабеля            МетодКодомРЕгистарцииОбозревателяКурсора();            ////            Log.d(this.getClass().getName(), " Курсор_ВсеСотрудникиТабеля.getCount()  "                    + Курсор_ВсеСотрудникиТабеля.getCount());        }    }    private void МетодКодомРЕгистарцииОбозревателяКурсора() {        try{        if(Курсор_ВсеСотрудникиТабеля!=null) {            ////            Log.d(this.getClass().getName(), " Курсор_ВсеСотрудникиТабеля.getCount()  "                    + Курсор_ВсеСотрудникиТабеля.getCount());                // TODO: 31.01.2022                  dataSetObserver= new DataSetObserver() {                     @Override                     public void onChanged() {                         super.onChanged();                         // TODO: 23.12.2021                         Log.w(this.getClass().getName(), " СРАБОТАЛ registerDataSetObserver  --- фрагменты ПИСАТЬ ЧИТАТЬ ЧАТ КурсорДанныеДлязаписиичтнияЧата.registerDataSetObserver onChanged ");                         if (АдаптерДЛяЛистаСотрудниковАктивти != null) {                             АдаптерДЛяЛистаСотрудниковАктивти.changeCursor(Курсор_ВсеСотрудникиТабеля);                             АдаптерДЛяЛистаСотрудниковАктивти.notifyDataSetChanged();                             АдаптерДЛяЛистаСотрудниковАктивти.notifyDataSetInvalidated();                         }                         if (ЛистДляВсеСотурдникаТекущегоТабеля != null) {                             ЛистДляВсеСотурдникаТекущегоТабеля.invalidateViews();                             ЛистДляВсеСотурдникаТекущегоТабеля.refreshDrawableState();                             ЛистДляВсеСотурдникаТекущегоТабеля.deferNotifyDataSetChanged();                         }                         Log.w(this.getClass().getName(), " СРАБОТАЛ registerDataSetObserver  --- фрагменты ПИСАТЬ ЧИТАТЬ ЧАТ КурсорДанныеДлязаписиичтнияЧата.registerDataSetObserver");                     }                    @Override                    public void onInvalidated() {                        super.onInvalidated();                        Log.w(this.getClass().getName(), " СРАБОТАЛ registerDataSetObserver  --- фрагменты ПИСАТЬ ЧИТАТЬ ЧАТ КурсорДанныеДлязаписиичтнияЧата.registerDataSetObserver onInvalidated");                       if (АдаптерДЛяЛистаСотрудниковАктивти != null) {                            АдаптерДЛяЛистаСотрудниковАктивти.changeCursor(Курсор_ВсеСотрудникиТабеля);                            АдаптерДЛяЛистаСотрудниковАктивти.notifyDataSetChanged();                            АдаптерДЛяЛистаСотрудниковАктивти.notifyDataSetInvalidated();                        }                        if (ЛистДляВсеСотурдникаТекущегоТабеля != null) {                            ЛистДляВсеСотурдникаТекущегоТабеля.invalidateViews();                            ЛистДляВсеСотурдникаТекущегоТабеля.refreshDrawableState();                            ЛистДляВсеСотурдникаТекущегоТабеля.deferNotifyDataSetChanged();                        }                    }                };                Курсор_ВсеСотрудникиТабеля.registerDataSetObserver(dataSetObserver );        }        //поймать ошибку всего классаIOException | MyException e    NumberFormatException    } catch (Exception e) {        e.printStackTrace();        ///метод запись ошибок в таблицу        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    @NotNull    private String МетодПредварительногоПолучениеДанных() throws InterruptedException, ExecutionException, TimeoutException {        //////todo если пустой то без like        String УниверсальноеИмяТабеля= "";        if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудника!=null) {            if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудника!=null) {                УниверсальноеИмяТабеля=ПолноеИмяТабеляПослеСозданиеНовогоСотрудника;            }        }else if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки!=null) {            if (ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки!=null) {                УниверсальноеИмяТабеля=    ПолноеИмяТабеляПослеСозданиеНовогоСотрудникаПослеУспешнойВставки;            }        }        Log.d(this.getClass().getName(), " УниверсальноеИмяТабеля " +УниверсальноеИмяТабеля );        ///todo для загрузки контктного сотркдника текущего вытсиква е публичный ид        // IDЧьиДанныеДляСотрудников=Integer.parseInt(PUBLIC_CONTENT.ПубличноеIDПолученныйИзСервлетаДляUUID);////TODO test        return УниверсальноеИмяТабеля;    }    private void МетодКогдаДАнныхНетИЛИОшибкаИлиНетПрав() {        try{            ЛистАдаптерДляListViewВсеСотрудникиВТабеле =null;            //TODO увелисиваем размер арайоиста       StringBuffer     БуферВсеСотурдникаТекущегоТабеля=new StringBuffer();            БуферВсеСотурдникаТекущегоТабеля.append(" *В табеле нет сотрудников*");       ArrayList     АрайЛИстВсеСотурдникаТекущегоТабеля=new ArrayList();            АрайЛИстВсеСотурдникаТекущегоТабеля.add(БуферВсеСотурдникаТекущегоТабеля.toString());            ///            // TODO: 29.04.2021 обнулем буфер            БуферВсеСотурдникаТекущегоТабеля.setLength(0);            ЛистАдаптерДляListViewВсеСотрудникиВТабеле = new ArrayAdapter<String>(this, R.layout.list_item_all_customer_tabel_color_red,  АрайЛИстВсеСотурдникаТекущегоТабеля);//ХэшФИОВсеДляПосика // АрайЛИстФИОВсеДляПосика // simple_list_item_checked //simple_list_item_multiple_choice            /////////            ((Activity) КонтекстСотрудникиДляТабеля).runOnUiThread(new Runnable() {                @Override                public void run() {                    /////////TODO ЗАПОЛЕНИЕ                    ////TODO SET УСТАНОВКА ДАНЫХ В АДАПТЕР                    ЛистДляВсеСотурдникаТекущегоТабеля.setAdapter(ЛистАдаптерДляListViewВсеСотрудникиВТабеле);                }            });            ЛистДляВсеСотурдникаТекущегоТабеля.setBackgroundResource(R.drawable.textlines_tabel_row_color_green_mini);            // ЛистДляВсеСотурдникаТекущегоТабеля.setBackground(getApplication().getResources().getDrawable(R.drawable.textlines_tabel_row_color_green_mini));            ЛистДляВсеСотурдникаТекущегоТабеля.deferNotifyDataSetChanged();            ЛистДляВсеСотурдникаТекущегоТабеля.invalidate();            //////            //TODO чистим патять            ЛистДляВсеСотурдникаТекущегоТабеля.requestLayout();            ScrollViewДляВсехСотрудниковТабеля.requestLayout();            ScrollViewДляВсехСотрудниковТабеля.invalidate();            try{                ///                ScrollViewДляВсехСотрудниковТабеля.removeAllViews();                ///todo метод работает внутти listview                ScrollViewДляВсехСотрудниковТабеля.addView(ЛистДляВсеСотурдникаТекущегоТабеля);            } catch (Exception e) {                e.printStackTrace();                ///метод запись ошибок в таблицу//                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +//                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());             new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            }        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());           new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод не ПОСТРЕДТСВЕНО АПОЛЯНЕТ LISTVIEW ДАНЫМИ    private void МетодЗаполненияАктивтиДаннымиИзБазыДляПосикаПоФИО(SQLiteCursor Курсор_ДляЗагрузкиСотрудников) {        try {            if (Курсор_ДляЗагрузкиСотрудников.getCount() > 0) {                //////                Курсор_ДляЗагрузкиСотрудников.moveToFirst();            }            ///todo перед заполенеем данных удалем возможные комнопенты на активити            try {            //     ScrollViewДляВсехСотрудниковТабеля.removeAllViews();//todo очищаем стролл            } catch (Exception e) {                e.printStackTrace();                ///метод запись ошибок в таблицу          Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());            }            try {                ЛистДляВсеСотурдникаТекущегоТабеля.removeAllViewsInLayout();            } catch (Exception e) {              e.printStackTrace();            }            ХэшФИОВсеСотурдникаТекущегоТабеля.clear();            ////todo циклы заполения            final int[] ИндексСтрокКомпонентовТабеляВизуализацииПрогрессБара = {1};////////////////////////////////            final Integer[] ИндексСтрокКомпонентовТабеля = {0};            final int[] ИндексДляsetID = {1};            // create the adapter using the cursor pointing to the desired data            // as well as the layout information            // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ            Class_GRUD_SQL_Operations class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ= new Class_GRUD_SQL_Operations(getApplicationContext());            // TODO: 12.10.2021  Ссылка Менеджер Потоков            PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());            Class_GRUD_SQL_Operations class_grud_sql_operationsПолучаемНаБазуДляРасчетаЧасовЧеловка= new Class_GRUD_SQL_Operations(getApplicationContext());            АдаптерДЛяЛистаСотрудниковАктивти =null;                    try {                        АдаптерДЛяЛистаСотрудниковАктивти = new SimpleCursorAdapter(getApplicationContext(), R.layout.list_item_all_customer_tabel,                                Курсор_ДляЗагрузкиСотрудников, new String[]{"fio"}, new int[]{android.R.id.text1}, CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER);  ///name                        //TODO                    } catch (Exception e) {                        e.printStackTrace();                    }                    SimpleCursorAdapter.ViewBinder binding = new SimpleCursorAdapter.ViewBinder() {                        @Override                        public boolean setViewValue(View view, Cursor cursor, int columnIndex) {                            int ИндекcКорневогоСтолбца = cursor.getColumnIndex("fio");                            if (ИндекcКорневогоСтолбца == columnIndex) {                                /*   TextView tvColor = (TextView) view;                                 */                                ///                                //  ((TextView) view).setText(data);                                ///                       /* if (tvColor.length() == 25) {                            tvColor.setTextColor(Color.MAGENTA);                        } else if (tvColor.length() == 28) {                            tvColor.setTextColor(Color.GREEN);                        }*/                                //TODO переменные                                // TODO: 24.03.2021 получаем данные для удалениея                                int ГдеUUID=cursor.getColumnIndex("uuid");                                // TODO: 29.04.2021                                Long ПолученныйUUID=0l;                                /////////////////                             ПолученныйUUID = cursor.getLong(ГдеUUID);                                Log.d(  this.getClass().getName(), " метод посика уже существующего сотрудника в базе андройжа ПолученныйUUID[0] "                                        +ПолученныйUUID);                                // view.setTag(String.valueOf(ПолученныйUUID));                                // TODO: 29.04.2021 Вписываем UUID для конкретного сотрудника                                if (ПолученныйUUID >0) {                                    // TODO: 29.04.2021 ПрисваемваемКАЖДОМУ СОТРУДНИКУ ID                                    ((TextView) view).setTag(String.valueOf(ПолученныйUUID));                                    ///                                    Log.d(  this.getClass().getName(), "передаем данные uuid в другую активти "                                            +"uuid"+ПолученныйUUID);                                    // TODO: 30.01.2022   ОФРМЛЕНИЕ                                    ((TextView) view).setBackgroundColor(Color.parseColor("#F5FFFA"));                                    // TODO: 30.01.2022  офрмления на цетр маркеруем                                    ((TextView) view).setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);                                    ///////                                  /*  ((TextView) view).setTag(String.valueOf("uuid"+ПолученныйUUID[0]+"id"+ ИндексДляsetID[0]));                                    ////////////                                    /////////////                                    ИндексДляsetID[0]++;                                    Log.d(  this.getClass().getName(), "передаем данные uuid и id в другую активти "                                            +"uuid"+ПолученныйUUID[0]+"id"+ ИндексДляsetID[0]);*/                                }                                ////TODO ДДАНЫЕ ИЗ БАЗЫ САМИ ФИО                                String ПолученыеФИО = null;                                try {                                    int ГдеФИО=cursor.getColumnIndex("fio");//name                                    //                                Long    ПолученыеUUIDдляФИО = cursor.getLong(ГдеФИО);                                    ///                                    Log.d(  this.getClass().getName(), "ПолученыеФИО "                                            +"uuid"+ПолученыеФИО);                                    ///                                    class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СамFreeSQLКОд",                                            " SELECT name  FROM fio  WHERE  uuid = '" + ПолученыеUUIDдляФИО + "' ;");                                    SQLiteCursor            Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО=null;                                    ///////                           Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО= (SQLiteCursor) class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ.                                            new GetаFreeData(getApplicationContext()).getfreedata(class_grud_sql_operationsПолучаемНаБазуUUIDфиоПолучаемИзТаблицыФИОИМЯ. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                                Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                                    Log.d(this.getClass().getName(), "Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО "  +Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО);                                    ////                                    if(Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО.getCount()>0){                                        ///                                        Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО.moveToFirst();                                        ПолученыеФИО=Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО.getString(0);                                        ///                                        Log.d(  this.getClass().getName(), "ПолученыеФИО "                                                +"uuid"+ПолученыеФИО);                                    }                                    Курсор_ПолучаемИмяСотрудникаИзТаблицыФИО.close();                                    // TODO: 24.09.2021  получаем само имя сотрудника                                  //  ПолученыеФИО = cursor.getString(ГдеФИО);                                    if (ПолученныйUUID >0) {                                        ((TextView) view).setText(ПолученыеФИО);                                        ///                                        Log.d(  this.getClass().getName(), "ПолученыеФИО "                                                +"uuid"+ПолученыеФИО);                                    }else {                                        if( cursor.getCount()<=1){                                            ПолученыеФИО="Нет сотрудника/ов";                                            ((TextView)view).setTextColor(Color.RED);                                            Log.d(this.getClass().getName(), " ПолученыеФИО " + ПолученыеФИО+  "  cursor.getCount() " +cursor.getCount());                                        }                                    }                                } catch (Exception e) {                                    e.printStackTrace();                                    Log.d(this.getClass().getName(), " ПолученыеФИО " + e.toString());                                }                             /*   int ГдеДатаРождения=cursor.getColumnIndex("BirthDate");                                //////////////                                String ПолученыеДатаРождения = cursor.getString(ГдеДатаРождения);                                int ГдеСНИЛС=cursor.getColumnIndex("snils");                                String ПолученыеСНИЛС = cursor.getString(ГдеСНИЛС);*/                                ПолученыеКоличествоСторочек = cursor.getCount();                              int ГдеТекущаяСтрочка=cursor.getColumnIndex("cfo");///                int ГдеТекущаяСтрочка=cursor.getColumnIndex("nametabel_typename");                                int ТекущаяСтрочкаИзБазы= cursor.getInt(ГдеТекущаяСтрочка);                                /////                           ///     TODO status_carried_out                                int ГдеСтатусПроведения=cursor.getColumnIndex("status_carried_out");                                Integer ПолученныйСтатусПроведенныйТаьельИлиНЕт = cursor.getInt(ГдеСтатусПроведения);     //      String ПолученыеСНИЛС = cursor.getString(3);                                /////////                                if(ПолученныйСтатусПроведенныйТаьельИлиНЕт==null){                                    ///                                    ПолученныйСтатусПроведенныйТаьельИлиНЕт=0;                                }                          ;                           ///////////                                String ПолученыеСуммаЧасовСотрудника = "0";                                try {                                    ПолученыеСуммаЧасовСотрудника = МетодДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников(ПолученныйUUID,                                            КонтекстСотрудникиДляТабеля,class_grud_sql_operationsПолучаемНаБазуДляРасчетаЧасовЧеловка);                                    Log.d(  getApplicationContext().getClass().getName(), " ПолученыеСуммаЧасовСотрудникаУ" + ПолученыеСуммаЧасовСотрудника + ПолученныйUUID+ " ПолученныйUUID ");                                } catch (InterruptedException e) {                                    e.printStackTrace();                                } catch (ExecutionException e) {                                    e.printStackTrace();                                }                                if (ПолученыеСуммаЧасовСотрудника==null) {                                    ПолученыеСуммаЧасовСотрудника="0";                                }                                //TODO добвлем галочку                                Drawable icon = null;                                Log.d(this.getClass().getName(), " ПолученныйСтатусПроведенныйТаьельИлиНЕт "+ПолученныйСтатусПроведенныйТаьельИлиНЕт);                                ////                                if (ПолученныйСтатусПроведенныйТаьельИлиНЕт>0) {                                        icon = getResources().getDrawable(R.mipmap.icon_dsu1_tabel_emloes_error);                                        if(ФлагУжеСообщалиЧтоСообщениеЧТоТАбельПроведетБыло==false) {                                         /*   Toast.makeText(getApplicationContext(), " Табель Проведен !!!. " + "\n" + "(редактирование запрещено).", Toast.LENGTH_SHORT).show();                                            /////////                                            ФлагУжеСообщалиЧтоСообщениеЧТоТАбельПроведетБыло=true;*/                                            ФлагУжеСообщалиЧтоСообщениеЧТоТАбельПроведетБыло=true;                                        }                                }else{                                    // TODO: 30.01.2022                                      icon = getResources().getDrawable(R.mipmap.icon_dsu1_emloeys_sonrudnik2);                                                                  }                                // TODO: 30.01.2022                                icon.setBounds(5, 0, 80, 80);                                // ((TextView) view).   setPadding(10,10,10,10);                                ((TextView) view).setCompoundDrawables(icon, null, null, null);                                /////                                Log.d(this.getClass().getName(), "  ПолученныйUUID[0] " +ПолученныйUUID);                                if ( ПолученныйUUID>0) {                                    /////todo заполение хэша сотрудниками котрые мы  ПОДОБРАЛИ                                    ХэшФИОВсеСотурдникаТекущегоТабеля.put(ИндексСтрокКомпонентовТабеля[0], ПолученныйUUID);                                ////                                ИндексСтрокКомпонентовТабеля[0]++;                                Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеСотурдникаТекущегоТабеля.size());                                ////                    StringBuffer            БуферВсеСотурдникаТекущегоТабеля=new StringBuffer();                                БуферВсеСотурдникаТекущегоТабеля.append("  ").append(ПолученыеФИО.trim() + " - " + "(" + ПолученыеСуммаЧасовСотрудника + ")");                                Log.d(this.getClass().getName(), "  АрайЛИстВсеСотурдникаТекущегоТабеля.size() " + БуферВсеСотурдникаТекущегоТабеля.length());                                ПолученыеФИО=null;                                ПолученыеСуммаЧасовСотрудника=null;                                //TODO само ЗАПОЛЕНЕНИЕ ДАННЫМИ АКТИВТИ НАПИЧА ФИО И ПЛЮС ЧАСЫ                                    ((TextView) view).setText(БуферВсеСотурдникаТекущегоТабеля.toString());                                    Log.d(this.getClass().getName(), "  Добавили Сотрдуника SimpleCu " + БуферВсеСотурдникаТекущегоТабеля.toString() + "  ИндексСтрокКомпонентовТабеля[0] " + ИндексСтрокКомпонентовТабеля[0]);                                // TODO: 26.03.2021 после встак обнуляем                                // TODO: 29.04.2021 clear string buffer                                БуферВсеСотурдникаТекущегоТабеля.setLength(0);                                }else{                                    Log.e(this.getClass().getName(), "view.getId() " + view.getId());                                }                                return true;                            } else {                                Log.e(this.getClass().getName(), "view.getId() " + view.getId());                            }                            return false;                        }                    };                    // TODO: 26.03.2021 присваиваем simpleadapter вид наших данных                АдаптерДЛяЛистаСотрудниковАктивти.setViewBinder(binding);                    /////            ЛистДляВсеСотурдникаТекущегоТабеля.setAdapter(АдаптерДЛяЛистаСотрудниковАктивти);           // Курсор_ВсеСотрудникиТабеля.close();            ЛистДляВсеСотурдникаТекущегоТабеля.deferNotifyDataSetChanged();            ЛистДляВсеСотурдникаТекущегоТабеля.invalidateViews();            ЛистДляВсеСотурдникаТекущегоТабеля.requestLayout();            ЛистДляВсеСотурдникаТекущегоТабеля.setItemChecked(ЛистДляВсеСотурдникаТекущегоТабеля.getCheckedItemPosition() + 1, true);                    ScrollViewДляВсехСотрудниковТабеля.fullScroll(View.FOCUS_DOWN);            Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеСотурдникаТекущегоТабеля.size() +                    "  ХэшФИОВсеСотурдникаТекущегоТабеля.toString() " + ХэшФИОВсеСотурдникаТекущегоТабеля.toString());            /////////TODO ЗАПОЛЕНИЕ            ////TODO SET УСТАНОВКА ДАНЫХ В АДАПТЕР            ////TODO ПОСЛЕ ТОГО КАК ЗАПОЛНИЛИ АРАЙЛИСТ ПРИСВАИВАЕМ ВСЕ КОМПОНЕЕТЫ В LINEARLOUT            //TODO ЗАПОЛЕНЕИЯ АДАПТЕРА            // АдаптерДляListViewВсеСотрудникиВТабеле= new ArrayAdapter<String>(КонтекстСотрудникиДляТабеля, R.layout.list_item_all_customer_tabel,  АрайЛИстВсеСотурдникаТекущегоТабеля);//ХэшФИОВсеДляПосика // АрайЛИстФИОВсеДляПосика // simple_list_item_checked //simple_list_item_multiple_choice            /////////;            ЛистДляВсеСотурдникаТекущегоТабеля.setBackgroundResource(R.drawable.textlines_tabel_row_color_green_mini);            ////TODO ПОСЛЕ ТОГО КАК ЗАПОЛНИЛИ АРАЙЛИСТ ПРИСВАИВАЕМ ВСЕ КОМПОНЕЕТЫ В LINEARLOUT            //TODO ЗАПОЛЕНЕИЯ АДАПТЕРА            // АдаптерДляListViewВсеСотрудникиВТабеле= new ArrayAdapter<String>(КонтекстСотрудникиДляТабеля, R.layout.list_item_all_customer_tabel,  АрайЛИстВсеСотурдникаТекущегоТабеля);//ХэшФИОВсеДляПосика // АрайЛИстФИОВсеДляПосика // simple_list_item_checked //simple_list_item_multiple_choice            /////////            ЛистДляВсеСотурдникаТекущегоТабеля.deferNotifyDataSetChanged();            try {                ///                ScrollViewДляВсехСотрудниковТабеля.removeAllViews();                ScrollViewДляВсехСотрудниковТабеля.removeAllViewsInLayout();                ScrollViewДляВсехСотрудниковТабеля.addView(ЛистДляВсеСотурдникаТекущегоТабеля);                //TODO ПОСЛЕ ЗАПОЛЕНИЯ ВСЕГО АКТИВТИ ПЕРЕРИСОВЫВАЕМ КОМПОНЕТЫ ЭКРАНА                /////            } catch (Exception e) {            }            //  Курсор_ДляЗагрузкиСотрудников.close();        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());            ///        }    }    //////////////////////    void МетодПриКликеПоОтдельномуСотрудникуВнутриТабеля() {        try{            final Long[] UUIDСамогоТабеляВКотромМыНаходилисьLOng = {0l};            final int[] setIDСамогоТабеляВКотромМыНаходились = {0};        ////////////        ЛистДляВсеСотурдникаТекущегоТабеля.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                /////todo проверяем ен закрли курсор                Log.d(this.getClass().getName(), "  ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеСотурдникаТекущегоТабеля.size() + " position "+position + " id "+id);                if (ХэшФИОВсеСотурдникаТекущегоТабеля.size()>0) {                    //    Object ТекущийUUIDХЭшаСотруников = ХэшФИОВсеСотурдникаТекущегоТабеля.get(position);                    ((TextView) view).setBackgroundColor(Color.GRAY);                    Object ТекущийUUIDХЭшаСотруниковОбьект = ((TextView) view).getTag();// TODO: 30.04.2021 end                    ///  Курсор_ВсеСотрудникиТабеля.close();                    Log.d(this.getClass().getName(), " ТекущийUUIDХЭшаСотруников" + ТекущийUUIDХЭшаСотруниковОбьект.toString());                    Long  ТекущийUUIDХЭшаСотруников= null;                    if (ТекущийUUIDХЭшаСотруниковОбьект!=null) {                        ТекущийUUIDХЭшаСотруников = Long.parseLong((String) ТекущийUUIDХЭшаСотруниковОбьект);                    }                    if (ТекущийUUIDХЭшаСотруников>0) {                        Log.d(this.getClass().getName(), " ТекущийUUIDХЭшаСотруников" + ТекущийUUIDХЭшаСотруников.toString());                        //////                        Log.d(this.getClass().getName(), "   ТекущийUUIDХЭшаСотруников" +  ТекущийUUIDХЭшаСотруников);                        UUIDСамогоТабеляВКотромМыНаходилисьLOng[0] = Long.parseLong(ТекущийUUIDХЭшаСотруников.toString());    // TODO: 22.04.2021 ЗАХОДИМ СЮДА ЕСЛИ ТОЛЬКО ЕСТЬХОТЬ ОДИН СОТРУДНИК В ТАБЕЛЕ                    if (ТекущийUUIDХЭшаСотруников!=null) {                        if(UUIDСамогоТабеляВКотромМыНаходилисьLOng[0] ==0){                            ////                            UUIDСамогоТабеляВКотромМыНаходилисьLOng[0] = Long.valueOf(view.getTag().toString());                        }                        // TODO: 29.04.2021 вычислем и передеаем SETID для табедял и СКРОЛА                     //   String recipes = String.valueOf(parent.getItemAtPosition(position));                        // TODO: 30.04.2021 получаем ID  для передаич в другое активти                        ////////                        setIDСамогоТабеляВКотромМыНаходились[0] = position+1;                        //                        /////TODO переходим непостредствено на сотрудника которго выбрали  в активити                        Log.d(this.getClass().getName(), " ТекущийUUIDХЭшаСотруников  "                                + ТекущийUUIDХЭшаСотруников+"  UUIDСамогоТабеляВКотромМыНаходилисьLOng " + UUIDСамогоТабеляВКотромМыНаходилисьLOng[0]+                                "      setIDСамогоТабеляВКотромМыНаходились[0] " +    setIDСамогоТабеляВКотромМыНаходились[0]);                        ////TODO ОПРАВЛЯЕМ ДАННЫЕ В ДРУГУЮ АКТИВИТИ                        //////                        if(UUIDСамогоТабеляВКотромМыНаходилисьLOng[0] >0 && setIDСамогоТабеляВКотромМыНаходились[0]>0){                            ////TODO ИНТРЕНТ КОТОРЫЙ СОЗДАЕТ НОВГО СОТРУДНИКА                            Intent Интент_ЗапускСозданиеНовогоСотрудника = new Intent();                            /////                            ///////                            Интент_ЗапускСозданиеНовогоСотрудника.setClass(getApplicationContext(), MainActivity_Tabel_Only_Single_Employee.class); //  ТЕСТ КОД КОТОРЫЙ ЗАПУСКАЕТ ACTIVITY VIEWDATA  ПРОВЕРИТЬ ОБМЕН                          Интент_ЗапускСозданиеНовогоСотрудника.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                            Log.d(this.getClass().getName(), " ДепартаментТабеляФинал  " + ДепартаментТабеляФинал+                                    " UUIDСамогоТабеляВКотромМыНаходилисьLOng " + UUIDСамогоТабеляВКотромМыНаходилисьLOng[0] +                                    " МесяцТабеляФинал " +МесяцТабеляФинал+                                    " IDЧьиДанныеДляСотрудников "+IDЧьиДанныеДляСотрудников+ " ГодТабеляФинал " + ГодТабеляФинал);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ДепартаментТабеляИзВсехСотрудниковВТАбеле", ДепартаментТабеляФинал);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("UUIDТабеляФиналПослеВыбораИзВсехСотрудниковВТАбеле", UUIDСамогоТабеляВКотромМыНаходилисьLOng[0]);                            Long РодительскийUUIDКоторыйДолженПроходитьЧерезВсеАктивти=UUIDСамогоТабеляВКотромМыНаходилисьLOng[0];                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("РодительскийUUDТаблицыТабель", РодительскийUUIDКоторыйДолженПроходитьЧерезВсеАктивти);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("МесяцТабеляФиналИзВсехСотрудниковВТАбеле", МесяцТабеляФинал);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("МЕсяцДляКурсораТабелей", МЕсяцДляКурсораТабелей);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("UUIDТабеляПослеПодбораУниверсальный",UUIDСамогоТабеляВКотромМыНаходилисьLOng[0]);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("IDЧьиДанныеДляСотрудников",IDЧьиДанныеДляСотрудников);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ГодДляЗагрузкиТабелей", ГодТабеляФинал);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ЦифровоеИмяНовгоТабеля", ЦифровоеИмяНовгоТабеля);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ЦифровоеИмяНовгоТабеля", ЦифровоеИмяНовгоТабеля);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ПолноеНазваниеТабеляФинал", ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("setIDСамогоТабеляВКотромМыНаходились", setIDСамогоТабеляВКотромМыНаходились[0]);                            // TODO: 05.05.2021  получаем первоночальний ндификатор для началп работы                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ИндификаторПередвиженияПоТабелюСвайпы", 0);                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ФлагУжеСообщалиЧтоСообщениеЧТоТАбельПроведетБыло", ФлагУжеСообщалиЧтоСообщениеЧТоТАбельПроведетБыло);                            // TODO: 20.10.2021 new Значение при движение по кругу месяц сохраняем                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре", ПолученныйПоследнийМесяцДляСортировкиЕгоВСпиноре);                            КонтекстСотрудникиДляТабеляВнешний=null;                            /////ы                            ////TODO после как прошла СИНХРОНИЗАЦИЯ В ФОНЕ  ПЕЕРРИСОВЫВАЕМ КОМПОНЕТЫ РОБОЧЕГО СТОЛА        //////                            // TODO: 30.12.2021   --ОТПИСЫВАЕМСЯ                            if ( dataSetObserver!=null && Курсор_ВсеСотрудникиТабеля!=null) {                                Курсор_ВсеСотрудникиТабеля.unregisterDataSetObserver(dataSetObserver);                            }                            /////                            startActivity(Интент_ЗапускСозданиеНовогоСотрудника);                 ///                         ////   overridePendingTransition(R.transition.svayp_reght,R.transition.svayp_left);                 finish();                            Log.d(this.getClass().getName(), "  ФИНАЛ создание нового сотрудника ");                        }else {                            /////TODO переходим непостредствено на сотрудника которго выбрали  в активити                            Log.e(this.getClass().getName(), " БуферВсеСотурдникаТекущегоТабеля.toString()");                        }                        // TODO: 22.04.2021 НЕТ СОТРУДНИКОВ В ТАБЕЛЕ                    } else {                        Log.e(this.getClass().getName(), "НЕТ НЕ ОДНОГО СОТРУДНИКА ВТАБЛЕ ТЕКУЩЕМ БуферВсеСотурдникаТекущегоТабеля.toString() ТекущийUUIDХЭшаСотруников ");                    }                    ///TODO обработывает нажтие и напрвляем загрузить указаннй табелья строго по UUID                    }else{                        //////                        Log.e(this.getClass().getName(), "  нет UUID у текущаго сотрудника ТекущийUUIDХЭшаСотруников ошибка позиция" +position+                                "ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеСотурдникаТекущегоТабеля.size());                    }                    // TODO: 13.05.2021  нет ни одного сотрудника в тебеле                } else {                    /////todo проверяем ен закрли курсор                    Log.d(this.getClass().getName(), "  нет не одного сотрдууника в тебеле ХэшФИОВсеДляПосика.size() " + ХэшФИОВсеСотурдникаТекущегоТабеля.size() + " position "+position + " id "+id);                }            }        });        } catch (Exception e) {            //  Block of code to handle errors            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }                                                                      }    /////todo метод заполения аралилта и хэшмема    private void МетодЗаполенияАрайЛистаИХэшМэпаДляПосикаПоФИО(String ПолученыеФИО,                                                               long ПолученныйUUID,String ПолученыеДатаРождения,                                                               String ПолученыеСНИЛС,String ПолученыеСуммаЧасовСотрудника) {        try{            /////TODO НЕ ПОСТРДВСТВЕНО ЗАПОЛЯНЕМ LISTVIEW  ДАННЫМИ  плюс ЧАСЫ СОТРУДНИКА СУММА            ////TODO САМО ОТОБРАЖЕНИЯ НАЗВАНИЕ ТАБЕЛЕЙ    StringBuffer        БуферВсеСотурдникаТекущегоТабеля=new StringBuffer();            БуферВсеСотурдникаТекущегоТабеля.append(ПолученыеФИО +" - "+"("  +ПолученыеСуммаЧасовСотрудника + ")");            ///            Log.d(this.getClass().getName(), "  БуферВсеСотурдникаТекущегоТабеля .size() " + БуферВсеСотурдникаТекущегоТабеля.length());            /////            // TODO: 29.04.2021 clear buffer         ///   БуферВсеСотурдникаТекущегоТабеля.setLength(0);        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    /////////////////////TODO ЗАПОЛЕНИЯ ХАШМАПА    //TODO хдесь мы запускаем метод создание и обработка самого табеля    private void МетолСозданиеТабеляФинал() {        try {///            ПолученыеКоличествоСторочек=0;            int  ПолученыеКоличествоСторочек= 0;            if ( Курсор_ВсеСотрудникиТабеля!=null) {                //////                if (Курсор_ВсеСотрудникиТабеля.getCount()>0) {                    /////                    ПолученыеКоличествоСторочек = Курсор_ВсеСотрудникиТабеля.getCount();                }            }                Log.d(this.getClass().getName(), "  Курсор_ВсеСотрудникиТабеля.getCount(); "                        + Курсор_ВсеСотрудникиТабеля.getCount()+" ПолученыеКоличествоСторочек"+ПолученыеКоличествоСторочек);                ////////todo заполняем спинер первый дата табеля                МассивДляВыбораСпинераДаты.clear();                ////////TODO ПОКАЗЫВАЕМ КОЛИЧЕСТВО СОТРУДНИКОВ В ТАБЕЛЕ ШТ.                МассивДляВыбораСпинераДаты.add(МесяцТабеляФинал+"\n"+                        "   ("+ ПолученыеКоличествоСторочек+")");                Log.d(this.getClass().getName(), " МассивДляВыбораВСпинерТабельФинал " + МассивДляВыбораСпинераДаты.toString());                // Создаем адаптер ArrayAdapter с помощью массива строк и стандартной разметки элемета spinner                /////                ArrayAdapter<String> АдаптерДляСпинераТабельФинал = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_activated_1, МассивДляВыбораСпинераДаты);                // Определяем разметку для использования при выборе элемента                АдаптерДляСпинераТабельФинал.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);                /////                // Применяем адаптер к элементу spinner                СпинерТАбельМЕсяцФинал.setAdapter(АдаптерДляСпинераТабельФинал);                ////TODO вненшний вид табеля                СпинерТАбельМЕсяцФинал.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                    @Override                    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                        //////меняем цвет спинера                        try {                            if (СпинерТАбельМЕсяцФинал!=null ) {                                // TODO: 28.01.2022                                Log.d(this.getClass().getName(), " parent.getItemAtPosition(0) " + parent.getItemAtPosition(0)+                                        "view  "+view.getTag()+ "  id " +id );                                                                                                if (СпинерТАбельМЕсяцФинал.getCount()>0) {                                 ////                                            /////                                    for (int i = 0; i < СпинерТАбельМЕсяцФинал.getCount(); i++) {                                        /////////                                        //((TextView) parent.getChildAt(0)).setTypeface(Typeface.defaultFromStyle(Typeface.NORMAL),Typeface.BOLD);///.setTypeface(Typeface.create(textView.getTypeface(), Typeface.NORMAL), Typeface.NORMAL);                                        ((TextView) parent.getChildAt(0)).setTypeface(Typeface.SANS_SERIF,Typeface.BOLD);//Typeface boldTypeface = Typeface.defaultFromStyle(Typeface.BOLD);                                            ((TextView) parent.getChildAt(0)).setTextColor(Color.BLACK);                                            ((TextView) parent.getChildAt(0)).setPaintFlags( ((TextView) parent.getChildAt(0)).getPaintFlags() | Paint.FAKE_BOLD_TEXT_FLAG);                                            ((TextView) parent.getChildAt(0)).setBackgroundResource(R.drawable.textlines_tabel);                                            ((TextView) parent.getChildAt(0)).setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);                                            ((TextView) parent.getChildAt(0)).setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);                                        //////                                        //////                                        КонтентСпинераНаАктивтиТабель = String.valueOf(((TextView) parent.getChildAt(0)).getText()); /////ОПРЕДЕЛЯЕМ ТЕКУЩЕЕ ЗНАЧЕНИЕ ВНУТИРИ СПЕНИРА                                        ///                                        Log.d(this.getClass().getName(), " КонтентСпинераНаАктивтиТабель  " + КонтентСпинераНаАктивтиТабель);                                    }                                }                            }                            Log.d(this.getClass().getName(), " КонтентСпинераНаАктивтиТабель " +КонтентСпинераНаАктивтиТабель );                            ///поймать ошибку                        } catch (Exception e) {                            //  Block of code to handle errors                            e.printStackTrace();                            ///метод запись ошибок в таблицу                            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                                 new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                            ///////                        }                        ////что быврали//поймать ошибку всего классаIOException | MyException e    NumberFormatException                    }                    @Override                    public void onNothingSelected(AdapterView<?> parent) {                        Log.d(this.getClass().getName(), " ПолученноеЗначениеИзСпинераДата  ");                    }                });                ////////todo заполняем спинер второй  департамент табеля                МассивДляВыбораВСпинерДепартамент.clear();                // TODO: 28.03.2021                    МассивДляВыбораВСпинерДепартамент.add(ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                    //МассивДляВыбораВСпинерДепартамент.add(ПолноеИмяТабеляПослеСозданиеНовогоСотрудника+ "  —  " +РезультатТолькоОдноНазваниеОргниазицииДляТекущегоСотрудника);                    Log.d(this.getClass().getName(), " МассивДляВыбораВСпинерТабельФинал " + МассивДляВыбораВСпинерДепартамент.toString());                    // Создаем адаптер ArrayAdapter с помощью массива строк и стандартной разметки элемета spinner                    ArrayAdapter<String> АдаптерДляСпинераТабельФиналДепартамент = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_activated_1, МассивДляВыбораВСпинерДепартамент);                    // Определяем разметку для использования при выборе элемента                    АдаптерДляСпинераТабельФинал.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);                    // Применяем адаптер к элементу spinner                    СпинерТАбельДепартаментФинал.setAdapter(АдаптерДляСпинераТабельФиналДепартамент);                    ////TODO вненшний вид табеля                    СпинерТАбельДепартаментФинал.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                        @Override                        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                            //////меняем цвет спинера                            try {                                if (СпинерТАбельДепартаментФинал.getCount()>0) {                                    ///                                    for (int i = 0; i < СпинерТАбельДепартаментФинал.getCount(); i++) {                                   ////                                        ((TextView) parent.getChildAt(0)).setTypeface(Typeface.SANS_SERIF,Typeface.BOLD);                                        ((TextView) parent.getChildAt(0)).setBackgroundResource(R.drawable.textlines_tabel);                                        ((TextView) parent.getChildAt(0)).setPaintFlags( ((TextView) parent.getChildAt(0)).getPaintFlags() | Paint.FAKE_BOLD_TEXT_FLAG);                                        ((TextView) parent.getChildAt(0)).setTextColor(Color.BLACK);                                        ((TextView) parent.getChildAt(0)).setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL );                                        ((TextView) parent.getChildAt(0)).setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);                                        //////                                        КонтентСпинераНаАктивтиТабель = String.valueOf(((TextView) parent.getChildAt(0)).getText()); /////ОПРЕДЕЛЯЕМ ТЕКУЩЕЕ ЗНАЧЕНИЕ ВНУТИРИ СПЕНИРА                                        Log.d(this.getClass().getName(), " КонтентСпинераНаАктивтиТабель  " + КонтентСпинераНаАктивтиТабель);                                    }                                }                                Log.d(this.getClass().getName(), " КонтентСпинераНаАктивтиТабель  " + КонтентСпинераНаАктивтиТабель);                                ///поймать ошибку                            } catch (Exception e) {                                //  Block of code to handle errors                                e.printStackTrace();                                ///метод запись ошибок в таблицу                                Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                        " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                                     new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                        Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                                ///////                            }                            ////что быврали//поймать ошибку всего классаIOException | MyException e    NumberFormatException                        }                        @Override                        public void onNothingSelected(AdapterView<?> parent) {                            Log.e(this.getClass().getName(), " ПолученноеЗначениеИзСпинераДата  ");                        }                    });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    ///////    @UiThread    public void СообщениеДляВыбораСозданиеНовогоСотрудникаИлиЕгоПодобратьДляТабеля(String ШабкаДиалога,boolean Флаг,String UUIDТабеляФинал ,                                                                                   String МесяцТабеляФинал, String ДепартаментТабеляФинал ) {//  ////MESSAGEBOX ДЛЯ ИНТЕРНЕТА  ПОДКЛЮЧЕНИЕ не успешное нет связи с итрнтнето и/или файлом json        try{            //super.MessageBoxs(ШабкаДиалога, СообщениеДиалога, Выбор);            int ЦветЗначек;            String ТекстПродолжениеОбновление;            TextView ЧетвртаяКнопка;            ConstraintLayout constraintLayoutВозможностьДобавитьЧтевертуюКнопку=(ConstraintLayout) getLayoutInflater().inflate(R.layout.chetirek_nopkistyle,null);            ////            final AlertDialog DialogBox = new MaterialAlertDialogBuilder(this)                    .setTitle(ШабкаДиалога)                    .setPositiveButton( "Новый Сотрудник ", null)                    .setNegativeButton("Выбрать Сотрудника ", null)                    .setNeutralButton("Закрыть", null)                    .setIcon(R.drawable.icon_dsu1_new_customer2)                    .setView(constraintLayoutВозможностьДобавитьЧтевертуюКнопку)                    .show();            ///TODO КНОПКА выбор  ДОБАВЛЕНИЕ УЩЕ СУЩЕСТВУЮЩЕГО СОТРУДНИКА            final Button КнопкаПодобратьНовогоСотрудникаДляТАбеля = DialogBox.getButton(AlertDialog.BUTTON_NEGATIVE);            DialogBox.getButton(Dialog.BUTTON_NEGATIVE).setTextSize(12);            DialogBox.getButton(Dialog.BUTTON_NEGATIVE).setTypeface(Typeface.SANS_SERIF,Typeface.BOLD);;//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ            //////////            ///TODO кнеопки обработки создать сотрудника или его потобрать            КнопкаПодобратьНовогоСотрудникаДляТАбеля.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Log.d(this.getClass().getName(), "  Кнопка закрыть");                    //удаляем с экрана Диалог                    DialogBox.dismiss();                    //TODO ПОДОБРАТЬ СОТРУДНИКА СУЩЕСТЮЩЕГО                    Log.d(this.getClass().getName(), " " );                    //TODO ПОСИК FINE CUSMOMERS                    Intent Интент_ЗапускПодобратьУжеСуществующегоСотрудника = new Intent();                    Интент_ЗапускПодобратьУжеСуществующегоСотрудника.setClass(getApplicationContext(), MainActivity_Find_Customers.class);                    // передача объекта с ключом "hello" и значением "Hello World"                    Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("ДепартаментТабеляФинал", ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                    Log.d(this.getClass().getName(), " ДепартаментТабеляФинал " + ДепартаментТабеляФинал+   " РодительскийUUDТаблицыТабель " +РодительскийUUDТаблицыТабель);                    //////////todo разница если новый сотрудник и ранее созданный                    if (РодительскийUUDТаблицыТабель>0){                        Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("UUIDТабеляФинал", РодительскийUUDТаблицыТабель);                        Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("РодительскийUUDТаблицыТабель", РодительскийUUDТаблицыТабель);                        Log.d(this.getClass().getName(), "UUIDТабеляФинал" + UUIDТабеляФинал);                    }else if (UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя!=null){                        Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("UUIDТабеляФинал", UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);                        Log.d(this.getClass().getName(), " UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя "                                + UUIDCтарыйУжеСозданногоТабеляВКоторыйИНужноДобавитьНовгоПользователя);                    }else{                        Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("UUIDТабеляФинал", UUIDТабеляПослеУспешногоСозданиеСотрудника);                        Log.d(this.getClass().getName(), "UUIDТабеляПослеУспешногоСозданиеСотрудника" + UUIDТабеляПослеУспешногоСозданиеСотрудника);                    }                //    Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("UUIDТабеляФинал", РодительскийUUDТаблицыТабель);                    /////                    Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("МесяцТабеляФинал", МесяцТабеляФинал);                    Log.d(this.getClass().getName(), "МесяцТабеляФинал" + МесяцТабеляФинал);                    /////                    Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("ДепартаментТабеляВКоторомИНадоСоздатьНовогоСотрудника", НазваниеЗагруженногТАбеля);                    Log.d(this.getClass().getName(), "  НазваниеЗагруженногТАбеля  " + НазваниеЗагруженногТАбеля);                    ////                    Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("МЕсяцДляКурсораТабелей", МЕсяцДляКурсораТабелей);                    Log.d(this.getClass().getName(), "  МЕсяцДляКурсораТабелей  " + МЕсяцДляКурсораТабелей);                    /////                    Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("ГодДляКурсораТабелей", ГодДляКурсораТабелей);                    Log.d(this.getClass().getName(), "ГодДляКурсораТабелей " + ГодДляКурсораТабелей);                    Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("РодительскийUUDТаблицыТабель", UUIDТабеляПослеУспешногоСозданиеСотрудника);////TODO после как прошла СИНХРОНИЗАЦИЯ В ФОНЕ  ПЕЕРРИСОВЫВАЕМ КОМПОНЕТЫ РОБОЧЕГО СТОЛА//////                    Интент_ЗапускПодобратьУжеСуществующегоСотрудника.putExtra("ЦифровоеИмяНовгоТабеля", ЦифровоеИмяНовгоТабеля);                    // TODO: 30.12.2021   --ОТПИСЫВАЕМСЯ                    if ( dataSetObserver!=null && Курсор_ВсеСотрудникиТабеля!=null ) {                        Курсор_ВсеСотрудникиТабеля.unregisterDataSetObserver(dataSetObserver);                    }                    /////                    startActivity(Интент_ЗапускПодобратьУжеСуществующегоСотрудника);                    //////               finish();                    ////////////                }            });/////TODO КНОПКА СОЗДАНИЯ НОВОГО СОТРУДКНИКА            final Button КнопкаСозданиеНовогоСотрудникаДляТАбеля = DialogBox.getButton(AlertDialog.BUTTON_POSITIVE);            DialogBox.getButton(Dialog.BUTTON_POSITIVE).setTextSize(12);            DialogBox.getButton(Dialog.BUTTON_POSITIVE).setTypeface(Typeface.SANS_SERIF,Typeface.BOLD);//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ            /////////            КнопкаСозданиеНовогоСотрудникаДляТАбеля.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Log.d(this.getClass().getName(), "  Кнопка добавить нового ");                    try{                    //удаляем с экрана Диалог                    DialogBox.dismiss();                    //////TODO В ДАННОМ КОДЕ МЫ ДОБАВЛЯЕМ УЖЕ СУЩЕСТВУЮЩЕГО СОТРУДКА В ТАБЕЛЬ НОВОГО СОТДУНИКА ДЛЯ ДОБАВЛЕНИЕ ЕГО В  ТАБЕЛЬ                    //////TODO В ДАННОМ КОДЕ МЫ СОЗДАЕМ НОВОГО СОТДУНИКА ДЛЯ ДОБАВЛЕНИЕ ЕГО В  ТАБЕЛЬ                    ////TODO ИНТРЕНТ КОТОРЫЙ СОЗДАЕТ НОВГО СОТРУДНИКА                    Intent Интент_ЗапускСозданиеНовогоСотрудника = new Intent();                    Интент_ЗапускСозданиеНовогоСотрудника.setClass(getApplicationContext(), MainActivity_New_Cusomers.class); //  ТЕСТ КОД КОТОРЫЙ ЗАПУСКАЕТ ACTIVITY VIEWDATA  ПРОВЕРИТЬ ОБМЕН                    // передача объекта с ключом "hello" и значением "Hello World"                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ДепартаментТабеляФинал", ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ПолноеИмяТабеляПослеСозданиеНовогоСотрудника", ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                    Log.d(this.getClass().getName(), " ДепартаментТабеляФинал " + ДепартаментТабеляФинал);                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("UUIDТабеляФинал", UUIDТабеляФинал);                    Log.d(this.getClass().getName(), "UUIDТабеляФинал" + UUIDТабеляФинал);                    /////                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("МесяцТабеляФинал", МесяцТабеляФинал);                    Log.d(this.getClass().getName(), "МесяцТабеляФинал" + МесяцТабеляФинал);                    /////                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ДепартаментТабеляВКоторомИНадоСоздатьНовогоСотрудника", ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                    Log.d(this.getClass().getName(), "  НазваниеЗагруженногТАбеля  " + НазваниеЗагруженногТАбеля);                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("UUIDТабеляПослеУспешногоСозданиеСотрудника", UUIDТабеляПослеУспешногоСозданиеСотрудника);                    Log.d(this.getClass().getName(), "  UUIDТабеляПослеУспешногоСозданиеСотрудника " + UUIDТабеляПослеУспешногоСозданиеСотрудника);                    Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ЦифровоеИмяНовгоТабеля",ЦифровоеИмяНовгоТабеля);                    Log.d(this.getClass().getName(), "  ЦифровоеИмяНовгоТабеля " + ЦифровоеИмяНовгоТабеля+                              "UUIDТабеляПослеУспешногоСозданиеСотрудника " +UUIDТабеляПослеУспешногоСозданиеСотрудника +                             "РодительскийUUDТаблицыТабель  "  +РодительскийUUDТаблицыТабель);                        if (UUIDТабеляПослеУспешногоСозданиеСотрудника!=null) {                            /////                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("ГлавныйУниверсальныйUUIDУжеСозданогоТабелявКоторвыйИНУжноВставитьСотрудника",UUIDТабеляПослеУспешногоСозданиеСотрудника);                        }                        if (РодительскийUUDТаблицыТабель>0) {                            /////                            Интент_ЗапускСозданиеНовогоСотрудника.putExtra("РодительскийUUDТаблицыТабель",РодительскийUUDТаблицыТабель);                        }                        ////TODO после как прошла СИНХРОНИЗАЦИЯ В ФОНЕ  ПЕЕРРИСОВЫВАЕМ КОМПОНЕТЫ РОБОЧЕГО СТОЛА//////                        // TODO: 30.12.2021   --ОТПИСЫВАЕМСЯ                        if ( dataSetObserver!=null && Курсор_ВсеСотрудникиТабеля!=null ) {                            Курсор_ВсеСотрудникиТабеля.unregisterDataSetObserver(dataSetObserver);                        }                        // TODO: 31.01.2022                    startActivity(Интент_ЗапускСозданиеНовогоСотрудника);// TODO: 28.01.2022               finish();                    /////////                } catch (Exception e) {                    //  Block of code to handle errors                    e.printStackTrace();                    ///метод запись ошибок в таблицу                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                            + Thread.currentThread().getStackTrace()[2].getLineNumber());                    new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                            Thread.currentThread().getStackTrace()[2].getLineNumber());                }///finish();                }            });            ///TODO КНОПКА ЗАКРЫТИЕ СООБЩЕНИЯ            final Button КнопкаЗакрытьСообщкение = DialogBox.getButton(AlertDialog.BUTTON_NEUTRAL);            DialogBox.getButton(Dialog.BUTTON_NEUTRAL).setTextSize(12);            DialogBox.getButton(Dialog.BUTTON_NEUTRAL).setTextColor(Color.parseColor("#A9A9A9"));            DialogBox.getButton(Dialog.BUTTON_NEUTRAL).setPaintFlags(Paint.FAKE_BOLD_TEXT_FLAG);//////ВЫДЕЛЕМ ЖИРНЫМ ЦВЕТОМ ДАТЫ//            //////////            КнопкаЗакрытьСообщкение.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Log.d(this.getClass().getName(), "  Кнопка добавить уже сущетсвующего сотрудника ");                    //удаляем с экрана Диалог                    DialogBox.dismiss();                    //////TODO В ДАННОМ КОДЕ МЫ добавлем существующего СОТДУНИКА ДЛЯ ДОБАВЛЕНИЕ ЕГО В  ТАБЕЛЬ                    ////--- ТУТ СТРАРТУЕТ НАЧАЛО ОБМЕНА МЕЖДУ АНДРОЙДОМ И СЕРВЕРОМ ( СИНХРОНИЗАЦИЯ ДАННЫХ  )                }            });///////////////////////////TODO ЧЕТВЕРТАЯ КНОПКА            ЧетвртаяКнопка=DialogBox.findViewById(R.id.textView2ForAliDilog);          ЧетвртаяКнопка.setPadding(0,0,60,0);            ЧетвртаяКнопка.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    try{                    Log.d(this.getClass().getName(), "  Кнопка добавить уже сущетсвующего сотрудника ");                    //удаляем с экрана Диалог                    DialogBox.dismiss();                    //////TODO В ДАННОМ КОДЕ МЫ добавлем существующего СОТДУНИКА ДЛЯ ДОБАВЛЕНИЕ ЕГО В  ТАБЕЛЬ                    ////--- ТУТ СТРАРТУЕТ НАЧАЛО ОБМЕНА МЕЖДУ АНДРОЙДОМ И СЕРВЕРОМ ( СИНХРОНИЗАЦИЯ ДАННЫХ  )                    Log.d(this.getClass().getName(), " Переход на  Шаблоны");                    Intent Интент_ШаблоныызватИлиСоздать = new Intent();                    Интент_ШаблоныызватИлиСоздать.setClass(getApplication(), MainActivity_New_Templates_Tabels.class); //  ТЕСТ КОД КОТОРЫЙ ЗАПУСКАЕТ ACTIVITY VIEWDATA  ПРОВЕРИТЬ ОБМЕН                    // передача объекта с ключом "hello" и значением "Hello World"                    Интент_ШаблоныызватИлиСоздать.putExtra("ДепартаментТабеляФинал", ДепартаментТабеляФинал);                    Log.d(this.getClass().getName(), "ДепартаментТабеляФинал " + ДепартаментТабеляФинал);                    Интент_ШаблоныызватИлиСоздать.putExtra("UUIDТабеляФинал", UUIDТабеляФинал);                    Log.d(this.getClass().getName(), "UUIDТабеляФинал" + UUIDТабеляФинал);                    // TODO: 16.11.2021                    Интент_ШаблоныызватИлиСоздать.putExtra("РодительскийUUDТаблицыТабель", UUIDТабеляФинал);                    Log.d(this.getClass().getName(), "UUIDТабеляФинал" + UUIDТабеляФинал);                    /////                    Интент_ШаблоныызватИлиСоздать.putExtra("МесяцТабеляФинал", МесяцТабеляФинал);                    Log.d(this.getClass().getName(), "МесяцТабеляФинал" + МесяцТабеляФинал);                    /////                    Интент_ШаблоныызватИлиСоздать.putExtra("ПолноеИмяТабеляПослеСозданиеНовогоСотрудника", ПолноеИмяТабеляПослеСозданиеНовогоСотрудника);                    Log.d(this.getClass().getName(), "НазваниеЗагруженногТАбеля  " + НазваниеЗагруженногТАбеля);                    Интент_ШаблоныызватИлиСоздать.putExtra("UUIDТабеляПослеУспешногоСозданиеСотрудника", UUIDТабеляПослеУспешногоСозданиеСотрудника);                    Log.d(this.getClass().getName(), "  UUIDТабеляПослеУспешногоСозданиеСотрудника " + UUIDТабеляПослеУспешногоСозданиеСотрудника);                    Интент_ШаблоныызватИлиСоздать.putExtra("ЦифровоеИмяНовгоТабеля",  ЦифровоеИмяНовгоТабеля);                    Log.d(this.getClass().getName(), "ЦифровоеИмяНовгоТабеля  " +ЦифровоеИмяНовгоТабеля);                    Интент_ШаблоныызватИлиСоздать.putExtra("ПолученнаяUUIDНазванияОрганизации",  ПолученнаяUUIDНазванияОрганизации);                    Log.d(this.getClass().getName(), "ПолученнаяUUIDНазванияОрганизации  " +ПолученнаяUUIDНазванияОрганизации);                    Интент_ШаблоныызватИлиСоздать.putExtra("UUIDТабеляФинал", UUIDТабеляПослеУспешногоСозданиеСотрудника);                    // TODO: 28.01.2022                    Log.d(this.getClass().getName(), "РодительскийUUDТаблицыТабель  " +РодительскийUUDТаблицыТабель);                    ///////                    Интент_ШаблоныызватИлиСоздать.putExtra("РодительскийUUDТаблицыТабель", РодительскийUUDТаблицыТабель);                    // TODO: 30.12.2021   --ОТПИСЫВАЕМСЯ                    if ( dataSetObserver!=null  && Курсор_ВсеСотрудникиТабеля!=null ) {                        Курсор_ВсеСотрудникиТабеля.unregisterDataSetObserver(dataSetObserver);                    }                    ////todo запускаем активти                    ////                    startActivity( Интент_ШаблоныызватИлиСоздать);            finish();//TODO  важно удаляем все т спямати                    } catch (Exception e) {                        e.printStackTrace();                        ///метод запись ошибок в таблицу                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                }            });        } catch (Exception e) {            //  Block of code to handle errors            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //TODO метод получени месяа для записи в одну колонку ОБРАБОТКА ДАТЫ ДЛЯ КУРСОРА НЕ НОВЫЕ ДАННЫЕ А УЖЕ СУЩЕТСВУЮЩИЕ--МЕСЯЦ    private int  МетодПолучениниеКурсораМЕсяцДата(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        String[] ДелимМЕсяцИгод =ДатаКоторуюНадоПеревестиИзТекставЦифру.split(" ");        System.out.println( " " + ДелимМЕсяцИгод [0]);        SimpleDateFormat formatмесяц = new SimpleDateFormat("LLLL  yyyy", new Locale("ru"));        Date date = formatмесяц.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру.trim());        Calendar calendar = Calendar.getInstance(new Locale("ru"));        calendar.setTime(date);        System.out.println(calendar.get(Calendar.YEAR));        System.out.println(calendar.get(Calendar.MONTH)+1);        System.out.println(calendar.get(Calendar.DAY_OF_MONTH));        System.out.println(new SimpleDateFormat("MMMM").format(calendar.getTime()));        return   calendar.get(Calendar.MONTH)+1;    }    //TODO метод получени месяа для записи в одну колонку ОБРАБОТКА ДАТЫ ДЛЯ КУРСОРА НЕ НОВЫЕ ДАННЫЕ А УЖЕ СУЩЕТСВУЮЩИЕ--ГОД    private int  МетодПолучениниеКурсораГОДДата(String ДатаКоторуюНадоПеревестиИзТекставЦифру) throws ParseException {        String[] ДелимМЕсяцИгод =ДатаКоторуюНадоПеревестиИзТекставЦифру.split(" ");        System.out.println( " " + ДелимМЕсяцИгод [1]);        SimpleDateFormat formatгод = new SimpleDateFormat("LLLL  yyyy");        Date date = formatгод.parse(ДатаКоторуюНадоПеревестиИзТекставЦифру.trim());        Calendar calendar = Calendar.getInstance(new Locale("ru"));        calendar.setTime(date);        System.out.println(calendar.get(Calendar.YEAR));        System.out.println(calendar.get(Calendar.MONTH)+1);        System.out.println(calendar.get(Calendar.DAY_OF_MONTH));        System.out.println(new SimpleDateFormat("yyyy").format(calendar.getTime()));        return   calendar.get(Calendar.YEAR);    }    //TODO  конец метод получени месяа для записи в одну колонку ОБРАБОТКА ДАТЫ ДЛЯ КУРСОРА НЕ НОВЫЕ ДАННЫЕ А УЖЕ СУЩЕТСВУЮЩИЕ--МЕСЯЦ    ////todo метод полчение огранизации при запуске программы    Long МетодПолучениеОрганизацииНепосрдственодляДанногоСОтрудника() throws InterruptedException, ExecutionException, TimeoutException {        ///////        Long названиеорганизациидлясотркдника=0l;        try{////TODO КУРСОР ПРОВЕЯЕТ ПЕРВЫЙ ЭТО ЗАПУСК ИЛИ НЕТ           SQLiteCursor Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего = null;                    ////////                    try {                                                                                                               /*         Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего =                                new Class_MODEL_synchronized(getApplicationContext()).КурсорУниверсальныйДляБазыДанных("settings_tabels",                                        new String[]{"organizations"}, "organizations IS NOT NULL", null,                                        null, null, "date_update DESC", "1");//"settings_tabels", "date_update","id=","1",null,null,null,null*/                        // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ                        Class_GRUD_SQL_Operations class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника;                        class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника=new Class_GRUD_SQL_Operations(getApplicationContext());                        ///                        class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы",                                "settings_tabels");                        ///////                        class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","organizations");                        //                        class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","organizations IS NOT NULL ");                        ///"_id > ?   AND _id< ?"                        //////                  /*      class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",МЕсяцВвидеЦифрыДляКурсора);                        ///                        class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2",ГОДВвидеЦифрыДляКурсора);                        //                     ///   class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3","Удаленная");////УсловиеПоискаv4,........УсловиеПоискаv5 .......                        ////TODO другие поля*/                        ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);                        ////                        //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                        ////                        class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update");                        ////                        class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");                        ////                        // TODO: 12.10.2021  Ссылка Менеджер Потоков                        PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                        // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                        Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего= (SQLiteCursor)  class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника.                                new GetData(getApplicationContext()).getdata(class_grud_sql_operationsОрганизацииНепосрдственодляДанногоСОтрудника. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                                Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                        ///////                        Log.d(this.getClass().getName(), "GetData "+Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего  );                    } catch (Exception e) {                        //  Block of code to handle errors                        e.printStackTrace();                        ///метод запись ошибок в таблицу                        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                                + Thread.currentThread().getStackTrace()[2].getLineNumber());                            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                                Thread.currentThread().getStackTrace()[2].getLineNumber());                    }                    ///TODO УДАЛЕМ ПАМЯТЬ                    if (Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getCount() > 0) { //TODO ЕСЛИ ДАННЫЙ UUID НЕ ПУСТОЙ ЭТО ЗНАЧИТ ЧТО ЭТОТ ТАБЕЛЬ УЖЕ СУЩЕТСВЕТ И НАМ НАДО ОБНОВИТЬ                ////TODO ТАБЕЛЬ УЖЕ ЕСТЬ И МЫ ЕГО ОБНОЫЛЕНИЯ ПубличноеИмяНовогоТабеля                //todo определяем есть uuid в строчке или нет                Log.d(this.getClass().getName(), "Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего  " +                        Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getCount());                Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.moveToFirst();                Log.d(this.getClass().getName(), " Курсор_ПонятьМыВставляемВПУстойТабельСотрудникаИЛиОбновлеемЕго.getString(1) " +                        Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getString(0));                названиеорганизациидлясотркдника= Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.getLong(0);            }            ///todo вырубаем курсор            Курсор_КоторыйВЫгружемНазваниеОрганизацииДляЭтогоСотркдникаТекущего.close();            ///        } catch (Exception e) {            //  Block of code to handle errors            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return  названиеорганизациидлясотркдника;    }/*    for (String key : hashmap.keySet())    {        for (list : hashmap.get(key))        {            //list.toString()        }    }*/    //TODO Метод ПОДЧСЧЕТА ЧАСОВ ПО ВСЕМ ТАБЕЛЯМ СРАЗУ    private String МетодДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников(Long finalПолученныйUUID,                                                                               Context КонтекстДЛляПодсчетаЧасовПоВсемТабелям, Class_GRUD_SQL_Operations class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников)            throws InterruptedException, ExecutionException {        ///        String     ПолученыеСуммаЧасовСотрудникаВнутри=null; //TODO РЕзультат        ////// TODO: 07.05.2021 главный курсор заргузки сотрудников в табель                try {                    //TODO вытастиваем непостредственный табель для которго и нужно посчитать часы             /*       Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям = new Class_MODEL_synchronized(КонтекстДЛляПодсчетаЧасовПоВсемТабелям).                            МетодЗагружетУжеготовыеТабеля(КонтекстДЛляПодсчетаЧасовПоВсемТабелям, finalПолученныйUUID,МЕсяцДляКурсораТабелей,ГодДляКурсораТабелей);                    Курсор_ЗагружаемТабеляСозданныйВнутрений = new Class_Engine_SQL(КонтекстДляЗагружемыхТАбелей).КурсорУниверсальныйДляБазыДанных(                            "viewtabel", new String[]{"*"},                            "uuid=?    AND status_send !=? AND month_tabels=? AND  year_tabels =? AND fio IS NOT NULL", new String[]{String.valueOf(UUIDТабеляПослеУспешногоСозданиеСотрудникаВсехСотридников),                                    "Удаленная", String.valueOf(месяцДляПермещенияПоТабелю), String.valueOf(годДляПермещенияПоТабелю)},                            null, null, null, "1");                    ///////todoс сортиртировной по дате кто последний изменяли сотрудника тот и сверху*/                    // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ                    //                    class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников=new Class_GRUD_SQL_Operations(getApplicationContext());                    ///                    class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","viewtabel");//data_tabels                    ///////                    class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","*");                    //                    class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников.                            concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика",                            "uuid=?   " +                            " AND status_send !=? " +                            "AND month_tabels=? " +                            "AND  year_tabels =? " +                            "AND fio IS NOT NULL ");                    ///"_id > ?   AND _id< ?"                    //////                    class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",finalПолученныйUUID);                    ///                    class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");                    ///                    class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);                    //                    class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......                    ////TODO другие поля                    ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);                    ////                    //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);                    ////                    class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update");//DESC                    ////                    class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");                    ////                    // TODO: 12.10.2021  Ссылка Менеджер Потоков                    PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());                    // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ                    /////////                    SQLiteCursor Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям = null;                    //////                    Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям= (SQLiteCursor)  class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников.                            new GetData(getApplicationContext()).getdata(class_grud_sql_operationsДосчётаЧасовПоВсемТабелямДляНовыхиВыбранныхСотрудников.                            concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                            Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());                    ///////////                    Log.d(this.getClass().getName(), "GetData " +Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям );                    // TODO: 03.09.2021                    if (Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям.getCount() > 0) {                        ///                        Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям.moveToFirst();                        //TODO Считаем Сумму часов по всем табелям                  ПолученыеСуммаЧасовСотрудникаВнутри = String.valueOf(МетодПосчётаЧасовПоСотрудникуДляЗагрузкиСотрудников(Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям));                    }                    Log.d(this.getClass().getName(), "ПолученыеСуммаЧасовСотрудникаВнутри " +ПолученыеСуммаЧасовСотрудникаВнутри );                    //TODO                    Курсор_ЗагружаемТабеляДляПодсчетаЧасовПовсемТАбелям.close();                } catch (Exception e) {                    e.printStackTrace();                    ///метод запись ошибок в таблицу                    Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                            " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                            Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());                }        return ПолученыеСуммаЧасовСотрудникаВнутри;    }    ////////////////////    protected int МетодПосчётаЧасовПоСотрудникуДляЗагрузкиСотрудников(Cursor курсор_ЗагружаемТабеляСозданный) {        int СуммаЧасов = 0;        try{        if (курсор_ЗагружаемТабеляСозданный.getCount() > 0) {            //////            курсор_ЗагружаемТабеляСозданный.moveToFirst();        }        do {            for (int ИндексДляИзмененияДней = 1; ИндексДляИзмененияДней < 32; ИндексДляИзмененияДней++) {                //TODO d -это в данном курсоре это день без цифры пока , d1,d2,d3                int ИндексЧассыСотрудника = курсор_ЗагружаемТабеляСозданный.getColumnIndex("d" + ИндексДляИзмененияДней);                int ЧассыСотрудника = курсор_ЗагружаемТабеляСозданный.getInt(ИндексЧассыСотрудника);                СуммаЧасов = СуммаЧасов + ЧассыСотрудника;                Log.d(this.getClass().getName(), "    СуммаЧасов " + СуммаЧасов);            }///TODO END FOR  ПО СТОЛБЦАМ БЕЖИМ        } while (курсор_ЗагружаемТабеляСозданный.moveToNext());        ////TODO ПРИСВАИВАЕМ ПОЛУЧЕННЫЕ ЧАСЫ ИЗ БАЗЫ УЖЕ ПЕРЕДЕМ ЕЕ НА АКТИВТИ        ////todo и ставим курсор на место на первое        курсор_ЗагружаемТабеляСозданный.close();        //    } catch (Exception e) {        e.printStackTrace();        ///метод запись ошибок в таблицу        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());    }        return СуммаЧасов;    }    private void МетодЗапускаЛокальнойСинхронизации() throws InterruptedException, ExecutionException {        try {            Log.d(this.getClass().getName(), "onPause() ");          ////TODO ЗАПУСК СЛЛУЖБЫ ПОДРУЗКИ СЛОВАРЯ FIO        /*    Intent serviceIntentSynchronizationService = new Intent(this, Service_Async_Синхронизация_Общая.class);            //////            КонтекстСотрудникиДляТабеля .startService(serviceIntentSynchronizationService);*/       /*     ////TODO ЗАПУСК СЛЛУЖБЫ ПОДРУЗКИ СЛОВАРЯ FIO          new Class_Engine_SQL(PUBLIC_CONTENT.КонтекстСотрудникиДляТабеляДлясинхронизации).                    МетодЗАпускаСинхронизациивФоне(PUBLIC_CONTENT.КонтекстСотрудникиДляТабеляДлясинхронизации);*/            ///////        } catch (Exception e) {            //  Block of code to handle errors            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    // TODO: 29.03.2021 КОД ДЛЯ УДАЛЕНИЕ СОТРУДНИКА ЧЕРЕЗ LONG  КЛИК    void МетодСообщенииУдалениеСотрудника(String ДляУдалениеUUID,String СамИндификаторUUID,String ФИОДляУдаление) {       Integer ФлагВыясняемПроведенныйТабельИлиНет = null;        ////       SQLiteCursor Курсор_ИщемПроведенЛиТАбельИлиНЕт = null;       try {          /*          Курсор_ИщемПроведенЛиТАбельИлиНЕт =                            new Class_MODEL_synchronized(getApplicationContext()).КурсорУниверсальныйДляБазыДанных("tabels",                                    new String[]{"*"}, " uuid=?", new String[]{СамИндификаторUUID}, null, null, "date_update", "1");//*/        // TODO: 03.09.2021  новый стьль работы через новый движок        // TODO: 26.08.2021 НОВЫЙ ВЫЗОВ НОВОГО КЛАСС GRUD - ОПЕРАЦИИ        Class_GRUD_SQL_Operations class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ;        //           class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ=new Class_GRUD_SQL_Operations(getApplicationContext());        ///           class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                   concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы","viewtabel");//data_tabels        ///////           class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                   concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("СтолбцыОбработки","*");        //           class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                   concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФорматПосика","uuid=? ");        ///"_id > ?   AND _id< ?"        //////           class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                   concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска1",СамИндификаторUUID);        ////*        class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска2","Удаленная");        ///        class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска3",МЕсяцДляКурсораТабелей);        //        class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеПоиска4",ГодДляКурсораТабелей);////УсловиеПоискаv4,........УсловиеПоискаv5 .......*/        ////TODO другие поля        ///classGrudSqlOperations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ПоляГрупировки",null);        ////        //class_grud_sql_operations. concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеГрупировки",null);        ////           class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                   concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеСортировки","date_update");//DESC        ////           class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                   concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("УсловиеЛимита","1");        ////           // TODO: 12.10.2021  Ссылка Менеджер Потоков           PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());        // TODO: 27.08.2021  ПОЛУЧЕНИЕ ДАННЫХ ОТ КЛАССА GRUD-ОПЕРАЦИИ           Курсор_ИщемПроведенЛиТАбельИлиНЕт=null;        Курсор_ИщемПроведенЛиТАбельИлиНЕт= (SQLiteCursor)  class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                new GetData(getApplicationContext()).getdata(class_grud_sql_operationsСообщенииУдалениеСотрудникаВычисляемСтатусСотрудникаСтрочкиПроведенИлИНЕТ.                concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());        Log.d(this.getClass().getName(), "GetData " +Курсор_ИщемПроведенЛиТАбельИлиНЕт );                /////////                if(Курсор_ИщемПроведенЛиТАбельИлиНЕт.getCount()>0){                    ///                    Курсор_ИщемПроведенЛиТАбельИлиНЕт.moveToFirst();                    ////                    Log.d(this.getClass().getName(), " Курсор_ИщемПУбличныйIDКогдаегоНетВстатике " + Курсор_ИщемПроведенЛиТАбельИлиНЕт.getCount());                    int ИндексКурсор_ИщемПУбличныйIDКогдаегоНетВстатике= Курсор_ИщемПроведенЛиТАбельИлиНЕт.getColumnIndex("status_carried_out");                    ///////                    ФлагВыясняемПроведенныйТабельИлиНет = Курсор_ИщемПроведенЛиТАбельИлиНЕт.getInt(ИндексКурсор_ИщемПУбличныйIDКогдаегоНетВстатике);                    /////////                    if(ФлагВыясняемПроведенныйТабельИлиНет==null){                        ///                        ФлагВыясняемПроведенныйТабельИлиНет=0;                    }                    ////                    Log.d(this.getClass().getName(), " ФлагВыясняемПроведенныйТабельИлиНет " + ФлагВыясняемПроведенныйТабельИлиНет);                }        // TODO: 03.09.2021 поле            if (ФлагВыясняемПроведенныйТабельИлиНет<1) {                ///todo                Log.d(this.getClass().getName(), "  ФИНАЛ создание нового сотрудника ");                СообщениеВыборУдлаляниИлиНЕтСотрудникаИзБазы("Удаление сотрудника",                        "Удалить выбраного сотрудника ?: "+"\n"+"\n"  + ФИОДляУдаление+                        " из текущего Табеля. "                        ,ДляУдалениеUUID,                        СамИндификаторUUID,                        true,ФИОДляУдаление)  ;            }        ///////    } catch (Exception e) {        //  Block of code to handle errors        e.printStackTrace();        ///метод запись ошибок в таблицу        Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                + Thread.currentThread().getStackTrace()[2].getLineNumber());        new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                Thread.currentThread().getStackTrace()[2].getLineNumber());    }    }    ///todo сообщение    @UiThread    protected void СообщениеВыборУдлаляниИлиНЕтСотрудникаИзБазы(String ШабкаДиалога,  String СообщениеДиалога,  String UUID,                                                                String СамоЗначениеUUID,boolean статус,String ФИОУдаляемого ) {        ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ        try {//////сам вид            final AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)                    .setTitle(ШабкаДиалога)                    .setMessage(СообщениеДиалога)                    .setPositiveButton("Да", null)                    .setNegativeButton("Нет", null)                    .setIcon(R.drawable.icon_dsu1_delete_customer)                    .show();/////////кнопка            final Button MessageBoxУдалениеСотрудникаИзТабеля = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);            MessageBoxУдалениеСотрудникаИзТабеля .setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                    Log.d(this.getClass().getName(), "  ФИНАЛ создание нового сотрудника " + " UUID " +UUID+ " СамоЗначениеUUID " + СамоЗначениеUUID);                    Log.d(this.getClass().getName(), "При удалении сотрудника СамоЗначениеUUID " +СамоЗначениеUUID+ " UUID  " +UUID);         Long РезультатУдалениеКонкертногоСотрудникаИзТабеля=           МетодУдалениеСотрудникаИзТабеля(UUID,СамоЗначениеUUID,ФИОУдаляемого); //// TODO передаеюм UUID для Удалание                    Log.d(this.getClass().getName(), "При удалении сотрудника СамоЗначениеUUID "                            +СамоЗначениеUUID+ " UUID  "                            +UUID + "  РезультатУдалениеКонкертногоСотрудникаИзТабеля " +РезультатУдалениеКонкертногоСотрудникаИзТабеля);                }            });            /////////кнопка            final Button MessageBoxУдалениеСотрудникаИзТабеляОтмена = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);            MessageBoxУдалениеСотрудникаИзТабеляОтмена.setOnClickListener(new View.OnClickListener() {                ///MessageBoxUpdate метод CLICK для DIALOBOX                @Override                public void onClick(View v) {                    //удаляем с экрана Диалог                    alertDialog.dismiss();                }            });        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() + " Линия  :"                    + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName(),                    Thread.currentThread().getStackTrace()[2].getLineNumber());        }    }    //todo метод удаление сотрудника из табеля    private Long МетодУдалениеСотрудникаИзТабеля(String ДляУдалениеUUID,String СамоЗначениеUUID,String ФИОДляУдаление) {        final long[] РезультатУдалениеСотрудникаИзТаблея = {0};        try{            Log.d(this.getClass().getName()," СамоЗначениеUUID "+СамоЗначениеUUID+ " ДляУдалениеUUID " +ДляУдалениеUUID);            ///TODO ЗАПУСКАЕМ  ПуллПамяти            ////TODO ЗАПУСКАЕМ  МеханизмУправлениеПотокамиОграничеваемИхУжеСозданными            String finalСамоЗначениеUUID = СамоЗначениеUUID;            ///            String finalДляУдалениеUUID = ДляУдалениеUUID;String ТаблицыДляОбработкиУдалние="data_tabels";ProgressDialog progressDialogДляудалениеОдногоотрудника=new ProgressDialog(this);//            progressDialogДляудалениеОдногоотрудника.setIndeterminate(true);            progressDialogДляудалениеОдногоотрудника.setTitle("Удаление сотрудника");            progressDialogДляудалениеОдногоотрудника.setMessage("Удаление");            progressDialogДляудалениеОдногоотрудника.setProgressStyle(ProgressDialog.STYLE_SPINNER);            progressDialogДляудалениеОдногоотрудника.setCanceledOnTouchOutside(false);            progressDialogДляудалениеОдногоотрудника.setCancelable(false);            progressDialogДляудалениеОдногоотрудника.show();            ////            PUBLIC_CONTENT public_content=new PUBLIC_CONTENT(getApplicationContext());            // TODO: 12.10.2021  Ссылка Менеджер Потоков            PUBLIC_CONTENT  Class_Engine_SQLГдеНаходитьсяМенеджерПотоков =new PUBLIC_CONTENT (getApplicationContext());            /// TODO енендера удаления            Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков.submit(()->{                Class_GRUD_SQL_Operations      class_grud_sql_operationsПовышаемВерсиюДляЛокальногоОбволенияТабеля=new Class_GRUD_SQL_Operations(getApplicationContext());                Long  РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника=                        class_grud_sql_operationsПовышаемВерсиюДляЛокальногоОбволенияТабеля. new ChangesVesionData(getApplicationContext()).                                МетодПолученияУвеличинойВесрииДанныхДляТекущейВнутренейтаблицы_ПоПолю_current_table_ПоПолю_current_table(ТаблицыДляОбработкиУдалние                                        ,"localversionandroid_version",                                        getApplicationContext()                                        ,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());///  current_table    ///  localversionandroid_version                Log.w(this.getClass().getName(),   "РЕЗУЛЬТАТ УДАЛДЕНИЕ ОДНОГО СОТРУДНИКА РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника  "                        + РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника);                try {                        //////////                        /////                        РезультатУдалениеСотрудникаИзТаблея[0] = new Class_Engine_SQL(getApplicationContext()).                                УдалениеДанныхЧерезКонтейнерУниверсальная(ТаблицыДляОбработкиУдалние,                                        finalДляУдалениеUUID,                                        finalСамоЗначениеUUID, "status_send", "Удаленная");                        Log.e(this.getClass().getName(),   "РЕЗУЛЬТАТ УДАЛДЕНИЕ ОДНОГО СОТРУДНИКА  РезультатУдалениеСотрудникаИзТаблея[0] "                                + РезультатУдалениеСотрудникаИзТаблея[0]);                        // TODO: 18.05.2021 успешное удалени сотрудника                        if (РезультатУдалениеСотрудникаИзТаблея[0] > 0) {                            ///todo ДАННЫЙ КОД ИЗМЕНЯЕТ ВЕРИСЮ ДАННЫХ                            Log.d(getApplicationContext().getClass().getName(), "РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника "                                    +РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника );                            ///ПослеУспешнойОперациии записать в табблицу версии данных на клиенте                            // TODO: 03.09.2021  получение ПО НОВОМУ ДВИЖКУ                            Class_GRUD_SQL_Operations  classGrudSqlOperationsУдалениеСотрудникаИзТаблея;                            // TODO: 30.08.2021    КОД ОБНОВЛЕНИЕ   ДАННЫХ   ЧЕРЕЗ                            //////                            classGrudSqlOperationsУдалениеСотрудникаИзТаблея=new Class_GRUD_SQL_Operations(getApplicationContext());                            ///                            classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("НазваниеОбрабоатываемойТаблицы",ТаблицыДляОбработкиУдалние);                            ///                            classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put("ФлагТипИзменениеВерсииДанныхЛокальнаяСервернаяИлиОба","Локальное");//Локальное  //  Серверный  // ЛокальныйСерверныйОба                            ///                            // TODO: 01.07.2021  после локальной обнолвения поробуем вотрунть синхронизацию локальную  в фоне и порстмортрим что будет                            Log.w(this.getClass().getName(),   "РЕЗУЛЬТАТ УДАЛДЕНИЕ ОДНОГО СОТРУДНИКА РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника  "                                    + РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника);                            ///                            classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                    concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций.put(" " +                                    "ПередоваемоеЗначенияДляТаблицы_MODIFITATION_Client_КотороеНадоЗаписать",РезультатУвеличинаяВерсияВнутриСамогоТабелСтрудника);///  "ЛокальныйСерверныйОба"    ПОСЛЕ КАК ПРИШЛИ ВНЕШНИЕ ДАННЫЕ                            ///                            ///TODO РЕЗУЛЬТА изменения версии данных                            Integer        Результат_ПриписиИзменнийВерсииДанных=                                    (Integer)  classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                            new ChangesVesionData(getApplicationContext()).                                            changesvesiondata(classGrudSqlOperationsУдалениеСотрудникаИзТаблея.                                                            concurrentHashMapНаборПараментовSQLBuilder_Для_GRUD_Операций,                                                    Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков                                                    ,Create_Database_СсылкаНАБазовыйКласс.getССылкаНаСозданнуюБазу());//                            Log.d(getApplicationContext().getClass().getName(), "Результат_ПриписиИзменнийВерсииДанныхВФонеПриСменеОрганизации "                                    +Результат_ПриписиИзменнийВерсииДанных );//                            Log.d(this.getClass().getName(), "Результат_ПриписиИзменнийВерсииДанных " +Результат_ПриписиИзменнийВерсииДанных );                            ////                            if(Результат_ПриписиИзменнийВерсииДанных==null){                                ////                                Результат_ПриписиИзменнийВерсииДанных=0;                            }                            // TODO: 03.09.2021                            Log.e(this.getClass().getName(), "Результат_ПриписиИзменнийВерсииДанных" + Результат_ПриписиИзменнийВерсииДанных);                            ///todo  конец  ДАННЫЙ КОД ИЗМЕНЯЕТ ВЕРИСЮ ДАННЫХ                        }                        activity.runOnUiThread(new Runnable() {                            @Override                            public void run() {                                progressDialogДляудалениеОдногоотрудника.setMessage("Удаление..."+ФИОДляУдаление);                            }                        });                        ////                        Log.w(this.getClass().getName(), "РезультатУдалениеСотрудникаИзТаблея[0] РЕЗУЛЬТАТ УДАЛЕНИЯ ТАБЕЛЯ " + РезультатУдалениеСотрудникаИзТаблея[0]);                        ///////////                    } catch (Exception e) {                        e.printStackTrace();                        Log.e(this.getClass().getName(), "Ошибка " +e + " Метод :"+Thread.currentThread().getStackTrace()[2].getMethodName()                                + " Линия  :"+Thread.currentThread().getStackTrace()[2].getLineNumber());                            new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(),  this.getClass().getName(),                                    Thread.currentThread().getStackTrace()[2].getMethodName(),                                Thread.currentThread().getStackTrace()[2].getLineNumber());                    }finally {                        //                        Class_Engine_SQLГдеНаходитьсяМенеджерПотоков.МенеджерПотоков.poll();                        ////////////////////                        //TODO ЗАПУСКАЕМ ФУТУРЕ                        activity.runOnUiThread(new Runnable() {                            @Override                            public void run() {                                ЛистДляВсеСотурдникаТекущегоТабеля.deferNotifyDataSetChanged();                                ЛистДляВсеСотурдникаТекущегоТабеля.invalidate();                                ScrollViewДляВсехСотрудниковТабеля.requestLayout();                                ScrollViewДляВсехСотрудниковТабеля.invalidate();                                //                                progressDialogДляудалениеОдногоотрудника.dismiss();                                // TODO: 30.01.2022 Сообщеам Observer что изменилибьс данные в адаптере AdapterCursor                                                                Курсор_ВсеСотрудникиТабеля.deactivate();                                // TODO: 30.01.2022                                  Курсор_ВсеСотрудникиТабеля.requery();                                Log.w(this.getClass().getName(), "  Курсор_ВсеСотрудникиТабеля " + Курсор_ВсеСотрудникиТабеля);                            ///    onResume();/*                //TODO #1                МетодПришлиПараметрыОтДругихАктивитиДляРаботыВсехТабеля();                //TODO #2                МетодПриНАжатииНаКнопкуBACK();                //TODO #3                МетодСКодоКруглойКнопкойСКотройМожноЛибоСоздатьЛибоВыбратьСотрудника(КруглаяКнопкаСамТабель);                ///////                ///TODO клик ВНУТРЕНИМУ СОДЕРЖАНИ Ю LKIST VIEW C СОТРУДНИКАМИ ЧТОБЫ ПЕРЕЙТИ Н АСАМ НЕПОСТРЕДСТВЕНО ТАБЕЛЬ                МетодПриКликеПоОтдельномуСотрудникуВнутриТабеля();                // TODO: 29.03.2021 метод УДАЛЕНИЕ СОТРУДНИКА                МетодУдаленияСотрудникаLongClick();                //TODO #5 заполения LISTVIEW                МетодПолучениеДанныхИзБазыДляДляЗаполенияВсехСотрудников();                /////                ///////todo после заполения данными заполняем spimer ВТОРАЯ ЧАСТЬЗАПОЛЕНИЯ АКТИВТИ                МетолСозданиеТабеляФинал();*/                                /////                                /////TODO ЗАПУСКАМ ОБНОЛВЕНИЕ ДАННЫХ С СЕРВЕРА ПЕРЕРД ЗАПУСКОМ ПРИЛОЖЕНИЯ ВСЕ ПРИЛОЖЕНИЯ ДСУ-1                                //todo очищаем память                                Log.d(this.getClass().getName()," РезультатУдалениеСотрудникаИзТаблея "+ РезультатУдалениеСотрудникаИзТаблея[0]);                                ///TODO СООБЩЕНИЕ О РЕЗУЛЬТАТОВ                                if (РезультатУдалениеСотрудникаИзТаблея[0] >0){                                    //todo после успешной уданеие обнуляем ерпеменные                 /*           ДляУдалениеUUID=null;                            СамоЗначениеUUID=null;*/                                    РезультатУдалениеСотрудникаИзТаблея[0] =0;                                    ///todo сообещение о успешном удалении                                 /*   if (PUBLIC_CONTENT.Отладка==true) {*/                                        /// СообщениеПослеУдаленияСотрудникаИзТабеля("Оповещение",  "Успешное удалание сотрудника из текущего Табеля",true) ;                                        // TODO: 29.03.2021 посде удаление                                        ////////      МетодЗапускаетСотрудниковПослеУспешногоУдалениеСотрудника();                                }else{                                    СообщениеПослеУдаленияСотрудникаИзТабеля("Оповещение",  "Операция удаление сотрудника не прошла ",false);                                }                            }                            });                    }                return  null;            });////////        } catch (Exception e) {            e.printStackTrace();            ///метод запись ошибок в таблицу            Log.e(this.getClass().getName(), "Ошибка " + e + " Метод :" + Thread.currentThread().getStackTrace()[2].getMethodName() +                    " Линия  :" + Thread.currentThread().getStackTrace()[2].getLineNumber());                new   Class_Generation_Errors(getApplicationContext()).МетодЗаписиВЖурналНовойОшибки(e.toString(), this.getClass().getName(),                    Thread.currentThread().getStackTrace()[2].getMethodName(), Thread.currentThread().getStackTrace()[2].getLineNumber());        }        return    РезультатУдалениеСотрудникаИзТаблея[0];    }    ///todo  конец метода удаления третий обработчки нажатия    ///todo сообщение    @UiThread    protected void СообщениеПослеУдаленияСотрудникаИзТабеля(String ШабкаДиалога,  String СообщениеДиалога,boolean Статус) {        ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ///////СОЗДАЕМ ДИАЛОГ ДА ИЛИ НЕТ//////сам вид        int Значек;        if (Статус){            Значек  =R.drawable.icon_dsu1_tabel_info;        }else{            Значек  =R.drawable.icon_dsu1_delete_customer;        }        final AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)                .setTitle(ШабкаДиалога)                .setMessage(СообщениеДиалога)                .setPositiveButton("ОК", null)                .setIcon(Значек)                .show();/////////кнопка        final Button MessageBoxUpdateСоздатьТабель = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);        MessageBoxUpdateСоздатьТабель.setOnClickListener(new View.OnClickListener() {            ///MessageBoxUpdate метод CLICK для DIALOBOX            @Override            public void onClick(View v) {                //удаляем с экрана Диалог                alertDialog.dismiss();                Log.d(this.getClass().getName(), "  ФИНАЛ после удалание сотрудуника ");                //TODO  второе действие заполенние контентом  в табеля в TableLyзаполения табеля из базы через элемент TableLauy                ///// МетодЗаполненияАлайЛИстаНовымМЕсцевНовогоТабеля( МесяцТабеляФинал);                ///TODO запускаем возврат на предыдущее активывти после успешного удаление сотрудника                ///МетодЗапускаетСотрудниковПослеУспешногоУдалениеСотрудника();                //todo            }        });    }}